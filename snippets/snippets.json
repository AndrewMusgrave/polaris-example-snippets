{
  "DefaultAccountConnection": {
    "prefix": [
      "PEDefaultAccountConnection"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Link, AccountConnection} from '../src';\n\nexport function AccountConnectionExample() {\n  const [connected, setConnected] = useState(false);\n  const accountName = connected ? 'Jane Appleseed' : '';\n\n  const handleAction = useCallback(() => {\n    const newConnected = !connected;\n    setConnected((connected) => !connected);\n  }, [connected]);\n\n  const buttonText = connected ? 'Disconnect' : 'Connect';\n  const details = connected ? 'Account connected' : 'No account connected';\n  const terms = connected ? null : (\n    <p>\n      By clicking <strong>Connect</strong>, you agree to accept Sample App’s{' '}\n      <Link url=\"Example App\">terms and conditions</Link>. You’ll pay a\n      commission rate of 15% on sales made through Sample App.\n    </p>\n  );\n\n  return (\n    <AccountConnection\n      accountName={accountName}\n      connected={connected}\n      title=\"Example App\"\n      action={{\n        content: buttonText,\n        onAction: handleAction,\n      }}\n      details={details}\n      termsOfService={terms}\n    />\n  );\n}",
    "description": "Use to let merchants connect or disconnect their store to their third-party accounts, like Facebook."
  },
  "ActionListInAPopover": {
    "prefix": [
      "PEActionListInAPopover"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Button, Popover, ActionList} from '../src';\n\nexport function ActionListInPopoverExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const handleImportedAction = useCallback(\n    () => console.log('Imported action'),\n    [],\n  );\n\n  const handleExportedAction = useCallback(\n    () => console.log('Exported action'),\n    [],\n  );\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover active={active} activator={activator} onClose={toggleActive}>\n        <ActionList\n          items={[\n            {\n              content: 'Import file',\n              onAction: handleImportedAction,\n            },\n            {\n              content: 'Export file',\n              onAction: handleExportedAction,\n            },\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}",
    "description": "Use for the least important actions so merchants aren’t distracted by secondary tasks. Can also be used for a set of actions that won’t fit in the available screen space."
  },
  "ActionListWithIconsOrImage": {
    "prefix": [
      "PEActionListWithIconsOrImage"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Button, Popover, ActionList} from '../src';\n\nexport function ActionListWithMediaExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '200px'}}>\n      <Popover active={active} activator={activator} onClose={toggleActive}>\n        <ActionList\n          items={[\n            {content: 'Import file', icon: ImportMinor},\n            {content: 'Export file', icon: ExportMinor},\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}",
    "description": "Use when the items benefit from an associated action or image, such as a list of products."
  },
  "SectionedActionList": {
    "prefix": [
      "PESectionedActionList"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Button, Popover, ActionList} from '../src';\n\nexport function SectionedActionListExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover active={active} activator={activator} onClose={toggleActive}>\n        <ActionList\n          sections={[\n            {\n              title: 'File options',\n              items: [\n                {content: 'Import file', icon: ImportMinor},\n                {content: 'Export file', icon: ExportMinor},\n              ],\n            },\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}",
    "description": "Use when the items benefit from sections to help differentiate actions."
  },
  "ActionListWithDestructiveItem": {
    "prefix": [
      "PEActionListWithDestructiveItem"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Button, Popover, ActionList} from '../src';\n\nexport function ActionListWithDestructiveItemExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover active={active} activator={activator} onClose={toggleActive}>\n        <ActionList\n          sections={[\n            {\n              title: 'File options',\n              items: [\n                {content: 'Import file', icon: ImportMinor},\n                {content: 'Export file', icon: ExportMinor},\n                {\n                  destructive: true,\n                  content: 'Delete file',\n                  icon: DeleteMinor,\n                },\n              ],\n            },\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}",
    "description": "Use to visually indicate that an action list item is destructive."
  },
  "ActionListWithHelpText": {
    "prefix": [
      "PEActionListWithHelpText"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Button, Popover, ActionList} from '../src';\n\nexport function ActionListWithHelpTextExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover active={active} activator={activator} onClose={toggleActive}>\n        <ActionList\n          sections={[\n            {\n              items: [\n                {\n                  content: 'Blog posts',\n                  helpText: 'Manage your blog articles',\n                },\n                {\n                  content: 'Blogs',\n                  helpText: 'Manage blogs published to your Online Store',\n                },\n              ],\n            },\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}",
    "description": "Use help text when the normal Verb noun syntax for the actions does not provide sufficient context for the merchant."
  },
  "Default": {
    "prefix": [
      "PEDefault"
    ],
    "body": "import React from 'react';\nimport {ProgressBar} from '../src';\n\nexport function Playground() {\n  return (\n    <ProgressBar progress={75} />\n  );\n}",
    "description": "Use this component to visually represent the completion of a task or operation."
  },
  "WithI18n": {
    "prefix": [
      "PEWithI18n"
    ],
    "body": "import React from 'react';\nimport {AppProvider, Page, Card, ResourceList, Avatar, TextStyle} from '../src';\n\nexport function Playground() {\n  return (\n    <AppProvider\n  i18n={{\n    Polaris: {\n      Common: {\n        checkbox: 'case à cocher',\n      },\n      ResourceList: {\n        sortingLabel: 'Trier par',\n        showing: '{itemsCount} {resource} affichés',\n        defaultItemPlural: 'articles',\n        defaultItemSingular: 'article',\n        Item: {\n          viewItem: \"Afficher les détails de l'{itemName}\",\n        },\n      },\n    },\n  }}\n>\n  <Page>\n    <Card>\n      <ResourceList\n        showHeader\n        items={[\n          {\n            id: 341,\n            url: 'customers/341',\n            name: 'Mae Jemison',\n            location: 'Decatur, USA',\n          },\n          {\n            id: 256,\n            url: 'customers/256',\n            name: 'Ellen Ochoa',\n            location: 'Los Angeles, USA',\n          },\n        ]}\n        renderItem={(item) => {\n          const {id, url, name, location} = item;\n          const media = <Avatar customer size=\"medium\" name={name} />;\n\n          return (\n            <ResourceList.Item id={id} url={url} media={media}>\n              <h3>\n                <TextStyle variation=\"strong\">{name}</TextStyle>\n              </h3>\n              <div>{location}</div>\n            </ResourceList.Item>\n          );\n        }}\n      />\n    </Card>\n  </Page>\n</AppProvider>\n  );\n}",
    "description": "With an `i18n`, `AppProvider` will provide these translations to polaris components. See [using translations](https://polaris.shopify.com/components/structure/app-provider#using-translations)"
  },
  "WithLinkComponent": {
    "prefix": [
      "PEWithLinkComponent"
    ],
    "body": "import React, {Component} from 'react';\nimport {AppProvider, Page} from '../src';\n\nexport function AppProviderLinkExample() {\n  const CustomLinkComponent = ({children, url, ...rest}) => {\n    return (\n      <a\n        href={url}\n        onClick={() => console.log('Custom link clicked')}\n        {...rest}\n      >\n        {children}\n      </a>\n    );\n  };\n\n  return (\n    <AppProvider\n      linkComponent={CustomLinkComponent}\n      i18n={{\n        Polaris: {\n          Page: {\n            Header: {\n              rollupButton: 'Actions',\n            },\n          },\n        },\n      }}\n    >\n      <Page\n        breadcrumbs={[{content: 'Products', url: '#'}]}\n        title=\"Jar With Lock-Lid\"\n        primaryAction={{content: 'Save', disabled: true}}\n        secondaryActions={[\n          {content: 'Duplicate', url: '#'},\n          {content: 'View on your store', url: '#'},\n        ]}\n      >\n        <p>Page content</p>\n      </Page>\n    </AppProvider>\n  );\n}",
    "description": "With a `linkComponent`, the app provider component will override the links used in other components. For example you may want to use the `Link` component provided by `react-router` throughout your application instead of the default `a` tag."
  },
  "WithTheme": {
    "prefix": [
      "PEWithTheme"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TopBar, Page, Layout, SettingToggle, TextStyle, ContextualSaveBar, AppProvider, Frame} from '../src';\n\nexport function AppProviderThemeExample() {\n  const [isDirty, setIsDirty] = useState(false);\n  const [searchFieldValue, setSearchFieldValue] = useState('');\n\n  const handleSearchChange = useCallback(\n    (searchFieldValue) => setSearchFieldValue(searchFieldValue),\n    [],\n  );\n\n  const toggleIsDirty = useCallback(\n    () => setIsDirty((isDirty) => !isDirty),\n    [],\n  );\n\n  const theme = {\n    colors: {\n      topBar: {\n        background: '#357997',\n      },\n    },\n    logo: {\n      width: 124,\n      topBarSource:\n        'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999',\n      url: 'http://jadedpixel.com',\n      accessibilityLabel: 'Jaded Pixel',\n      contextualSaveBarSource:\n        'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999',\n    },\n  };\n\n  const searchFieldMarkup = (\n    <TopBar.SearchField\n      placeholder=\"Search\"\n      value={searchFieldValue}\n      onChange={handleSearchChange}\n    />\n  );\n\n  const topBarMarkup = <TopBar searchField={searchFieldMarkup} />;\n\n  const contentStatus = isDirty ? 'Disable' : 'Enable';\n  const textStatus = isDirty ? 'enabled' : 'disabled';\n\n  const pageMarkup = (\n    <Page title=\"Account\">\n      <Layout>\n        <Layout.Section>\n          <SettingToggle\n            action={{\n              content: contentStatus,\n              onAction: toggleIsDirty,\n            }}\n            enabled={isDirty}\n          >\n            This setting is{' '}\n            <TextStyle variation=\"strong\">{textStatus}</TextStyle>.\n          </SettingToggle>\n        </Layout.Section>\n      </Layout>\n    </Page>\n  );\n\n  const contextualSaveBarMarkup = isDirty ? (\n    <ContextualSaveBar\n      message=\"Unsaved changes\"\n      saveAction={{\n        onAction: toggleIsDirty,\n      }}\n      discardAction={{\n        onAction: toggleIsDirty,\n      }}\n    />\n  ) : null;\n\n  return (\n    <div style={{height: '250px'}}>\n      <AppProvider\n        theme={theme}\n        i18n={{\n          Polaris: {\n            Frame: {skipToContent: 'Skip to content'},\n            ContextualSaveBar: {\n              save: 'Save',\n              discard: 'Discard',\n            },\n            TopBar: {\n              SearchField: {\n                clearButtonLabel: 'Clear',\n                search: 'Search',\n              },\n            },\n          },\n        }}\n      >\n        <Frame topBar={topBarMarkup}>\n          {contextualSaveBarMarkup}\n          {pageMarkup}\n        </Frame>\n      </AppProvider>\n    </div>\n  );\n}",
    "description": "With a `theme`, the app provider component will set light, dark, and text colors for the [top bar](https://polaris.shopify.com/components/structure/top-bar) component when given a `background` color, as well as a logo for the top bar and [contextual save bar](https://polaris.shopify.com/components/forms/contextual-save-bar) components."
  },
  "WithThemeUsingAllThemeKeys": {
    "prefix": [
      "PEWithThemeUsingAllThemeKeys"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TopBar, Page, Layout, SettingToggle, TextStyle, ContextualSaveBar, AppProvider, Frame} from '../src';\n\nexport function AppProviderWithAllThemeKeysExample() {\n  const [isDirty, setIsDirty] = useState(false);\n  const [searchFieldValue, setSearchFieldValue] = useState('');\n\n  const handleSearchChange = useCallback(\n    (searchFieldValue) => setSearchFieldValue(searchFieldValue),\n    [],\n  );\n\n  const toggleIsDirty = useCallback(\n    () => setIsDirty((isDirty) => !isDirty),\n    [],\n  );\n\n  const theme = {\n    colors: {\n      topBar: {\n        background: '#357997',\n        backgroundLighter: '#6192a9',\n        color: '#FFFFFF',\n      },\n    },\n    logo: {\n      width: 124,\n      topBarSource:\n        'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999',\n      url: 'http://jadedpixel.com',\n      accessibilityLabel: 'Jaded Pixel',\n      contextualSaveBarSource:\n        'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999',\n    },\n  };\n\n  const searchFieldMarkup = (\n    <TopBar.SearchField\n      placeholder=\"Search\"\n      value={searchFieldValue}\n      onChange={handleSearchChange}\n    />\n  );\n\n  const topBarMarkup = <TopBar searchField={searchFieldMarkup} />;\n\n  const contentStatus = isDirty ? 'Disable' : 'Enable';\n  const textStatus = isDirty ? 'enabled' : 'disabled';\n\n  const pageMarkup = (\n    <Page title=\"Account\">\n      <Layout>\n        <Layout.Section>\n          <SettingToggle\n            action={{\n              content: contentStatus,\n              onAction: toggleIsDirty,\n            }}\n            enabled={isDirty}\n          >\n            This setting is{' '}\n            <TextStyle variation=\"strong\">{textStatus}</TextStyle>.\n          </SettingToggle>\n        </Layout.Section>\n      </Layout>\n    </Page>\n  );\n\n  const contextualSaveBarMarkup = isDirty ? (\n    <ContextualSaveBar\n      message=\"Unsaved changes\"\n      saveAction={{\n        onAction: toggleIsDirty,\n      }}\n      discardAction={{\n        onAction: toggleIsDirty,\n      }}\n    />\n  ) : null;\n\n  return (\n    <div style={{height: '250px'}}>\n      <AppProvider\n        theme={theme}\n        i18n={{\n          Polaris: {\n            Frame: {\n              skipToContent: 'Skip to content',\n            },\n            ContextualSaveBar: {\n              save: 'Save',\n              discard: 'Discard',\n            },\n            TopBar: {\n              SearchField: {\n                clearButtonLabel: 'Clear',\n                search: 'Search',\n              },\n            },\n          },\n        }}\n      >\n        <Frame topBar={topBarMarkup}>\n          {contextualSaveBarMarkup}\n          {pageMarkup}\n        </Frame>\n      </AppProvider>\n    </div>\n  );\n}",
    "description": "Provide specific keys and corresponding colors to the [top bar](https://polaris.shopify.com/components/structure/top-bar) component theme for finer control. When giving more than just the `background`, providing all keys is necessary to prevent falling back to default colors."
  },
  "BasicAutocomplete": {
    "prefix": [
      "PEBasicAutocomplete"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Autocomplete, Icon} from '../src';\n\nexport function AutocompleteExample() {\n  const deselectedOptions = [\n    {value: 'rustic', label: 'Rustic'},\n    {value: 'antique', label: 'Antique'},\n    {value: 'vinyl', label: 'Vinyl'},\n    {value: 'vintage', label: 'Vintage'},\n    {value: 'refurbished', label: 'Refurbished'},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (value === '') {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, 'i');\n      const resultOptions = deselectedOptions.filter((option) =>\n        option.label.match(filterRegex),\n      );\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const updateSelection = useCallback((selected) => {\n    const selectedValue = selected.map((selectedItem) => {\n      const matchedOption = options.find((option) => {\n        return option.value.match(selectedItem);\n      });\n      return matchedOption && matchedOption.label;\n    });\n\n    setSelectedOptions(selected);\n    setInputValue(selectedValue);\n  }, []);\n\n  const textField = (\n    <Autocomplete.TextField\n      onChange={updateText}\n      label=\"Tags\"\n      value={inputValue}\n      prefix={<Icon source={SearchMinor} color=\"inkLighter\" />}\n      placeholder=\"Search\"\n    />\n  );\n\n  return (\n    <div style={{height: '225px'}}>\n      <Autocomplete\n        options={options}\n        selected={selectedOptions}\n        onSelect={updateSelection}\n        textField={textField}\n      />\n    </div>\n  );\n}",
    "description": "Use to help merchants complete text input quickly from a list of options."
  },
  "MultipleTagsAutocomplete": {
    "prefix": [
      "PEMultipleTagsAutocomplete"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Tag, Autocomplete, TextContainer, Stack} from '../src';\n\nexport function MultiAutocompleteExample() {\n  const deselectedOptions = [\n    {value: 'rustic', label: 'Rustic'},\n    {value: 'antique', label: 'Antique'},\n    {value: 'vinyl', label: 'Vinyl'},\n    {value: 'vintage', label: 'Vintage'},\n    {value: 'refurbished', label: 'Refurbished'},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (value === '') {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, 'i');\n      const resultOptions = deselectedOptions.filter((option) =>\n        option.label.match(filterRegex),\n      );\n      let endIndex = resultOptions.length - 1;\n      if (resultOptions.length === 0) {\n        endIndex = 0;\n      }\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const removeTag = useCallback(\n    (tag) => () => {\n      const options = [...selectedOptions];\n      options.splice(options.indexOf(tag), 1);\n      setSelectedOptions(options);\n    },\n    [selectedOptions],\n  );\n\n  const tagsMarkup = selectedOptions.map((option) => {\n    let tagLabel = '';\n    tagLabel = option.replace('_', ' ');\n    tagLabel = titleCase(tagLabel);\n    return (\n      <Tag key={`option${option}`} onRemove={removeTag(option)}>\n        {tagLabel}\n      </Tag>\n    );\n  });\n\n  const textField = (\n    <Autocomplete.TextField\n      onChange={updateText}\n      label=\"Tags\"\n      value={inputValue}\n      placeholder=\"Vintage, cotton, summer\"\n    />\n  );\n\n  return (\n    <div style={{height: '325px'}}>\n      <TextContainer>\n        <Stack>{tagsMarkup}</Stack>\n      </TextContainer>\n      <br />\n      <Autocomplete\n        allowMultiple\n        options={options}\n        selected={selectedOptions}\n        textField={textField}\n        onSelect={setSelectedOptions}\n        listTitle=\"Suggested Tags\"\n      />\n    </div>\n  );\n\n  function titleCase(string) {\n    return string\n      .toLowerCase()\n      .split(' ')\n      .map(function(word) {\n        return word.replace(word[0], word[0].toUpperCase());\n      })\n      .join('');\n  }\n}",
    "description": "Use to help merchants select multiple options from a list curated by the text input."
  },
  "AutocompleteWithLoading": {
    "prefix": [
      "PEAutocompleteWithLoading"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Autocomplete, Icon} from '../src';\n\nexport function AutocompleteExample() {\n  const deselectedOptions = [\n    {value: 'rustic', label: 'Rustic'},\n    {value: 'antique', label: 'Antique'},\n    {value: 'vinyl', label: 'Vinyl'},\n    {value: 'vintage', label: 'Vintage'},\n    {value: 'refurbished', label: 'Refurbished'},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n  const [loading, setLoading] = useState(false);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (!loading) {\n        setLoading(true);\n      }\n\n      setTimeout(() => {\n        if (value === '') {\n          setOptions(deselectedOptions);\n          setLoading(true);\n          return;\n        }\n        const filterRegex = new RegExp(value, 'i');\n        const resultOptions = options.filter((option) =>\n          option.label.match(filterRegex),\n        );\n        setOptions(resultOptions);\n        setLoading(false);\n      }, 300);\n    },\n    [deselectedOptions],\n  );\n\n  const updateSelection = useCallback((selected) => {\n    const selectedText = selected.map((selectedItem) => {\n      const matchedOption = options.find((option) => {\n        return option.value.match(selectedItem);\n      });\n      return matchedOption && matchedOption.label;\n    });\n    setSelectedOptions(selected);\n    setInputValue(selectedText);\n  }, []);\n\n  const textField = (\n    <Autocomplete.TextField\n      onChange={updateText}\n      label=\"Tags\"\n      value={inputValue}\n      prefix={<Icon source={SearchMinor} color=\"inkLighter\" />}\n      placeholder=\"Search\"\n    />\n  );\n\n  return (\n    <div style={{height: '225px'}}>\n      <Autocomplete\n        options={options}\n        selected={selectedOptions}\n        onSelect={updateSelection}\n        loading={loading}\n        textField={textField}\n      />\n    </div>\n  );\n}",
    "description": "Use to indicate loading state to merchants while option data is processing."
  },
  "AutocompleteWithLazyLoading": {
    "prefix": [
      "PEAutocompleteWithLazyLoading"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Autocomplete, Tag, Stack} from '../src';\n\nexport function AutoCompleteLazyLoadExample() {\n  const paginationInterval = 25;\n  const deselectedOptions = Array.from(Array(100)).map((_, index) => ({\n    value: `rustic ${index}`,\n    label: `Rustic ${index}`,\n  }));\n\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n  const [visibleOptionIndex, setVisibleOptionIndex] = useState(\n    paginationInterval,\n  );\n\n  const handleLoadMoreResults = useCallback(() => {\n    const nextVisibleOptionIndex = visibleOptionIndex + paginationInterval;\n    if (nextVisibleOptionIndex <= options.length - 1) {\n      setVisibleOptionIndex(nextVisibleOptionIndex);\n    }\n  }, [visibleOptionIndex]);\n\n  const removeTag = useCallback(\n    (tag) => () => {\n      const options = [...selectedOptions];\n      options.splice(options.indexOf(tag), 1);\n      setSelectedOptions(options);\n    },\n    [selectedOptions],\n  );\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (value === '') {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, 'i');\n      const resultOptions = options.filter((option) =>\n        option.label.match(filterRegex),\n      );\n\n      let endIndex = resultOptions.length - 1;\n      if (resultOptions.length === 0) {\n        endIndex = 0;\n      }\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const textField = (\n    <Autocomplete.TextField\n      onChange={updateText}\n      label=\"Tags\"\n      value={inputValue}\n      placeholder=\"Vintage, cotton, summer\"\n    />\n  );\n\n  const hasSelectedOptions = selectedOptions.length > 0;\n\n  const tagsMarkup = hasSelectedOptions\n    ? selectedOptions.map((option) => {\n        let tagLabel = '';\n        tagLabel = option.replace('_', ' ');\n        tagLabel = titleCase(tagLabel);\n        return (\n          <Tag key={`option${option}`} onRemove={removeTag(option)}>\n            {tagLabel}\n          </Tag>\n        );\n      })\n    : null;\n  const optionList = options.slice(0, visibleOptionIndex);\n  const selectedTagMarkup = hasSelectedOptions ? (\n    <Stack spacing=\"extraTight\">{tagsMarkup}</Stack>\n  ) : null;\n\n  return (\n    <Stack vertical>\n      {selectedTagMarkup}\n      <Autocomplete\n        allowMultiple\n        options={optionList}\n        selected={selectedOptions}\n        textField={textField}\n        onSelect={setSelectedOptions}\n        listTitle=\"Suggested Tags\"\n        onLoadMoreResults={handleLoadMoreResults}\n      />\n    </Stack>\n  );\n\n  function titleCase(string) {\n    return string\n      .toLowerCase()\n      .split(' ')\n      .map((word) => {\n        return word.replace(word[0], word[0].toUpperCase());\n      })\n      .join(' ');\n  }\n}",
    "description": ""
  },
  "AutocompleteWithEmptyState": {
    "prefix": [
      "PEAutocompleteWithEmptyState"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Autocomplete, Icon, TextContainer} from '../src';\n\nexport function AutocompleteExample() {\n  const deselectedOptions = [\n    {value: 'rustic', label: 'Rustic'},\n    {value: 'antique', label: 'Antique'},\n    {value: 'vinyl', label: 'Vinyl'},\n    {value: 'vintage', label: 'Vintage'},\n    {value: 'refurbished', label: 'Refurbished'},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n  const [loading, setLoading] = useState(false);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (!loading) {\n        setLoading(true);\n      }\n\n      setTimeout(() => {\n        if (value === '') {\n          setOptions(deselectedOptions);\n          setLoading(false);\n          return;\n        }\n        const filterRegex = new RegExp(value, 'i');\n        const resultOptions = options.filter((option) =>\n          option.label.match(filterRegex),\n        );\n        setOptions(resultOptions);\n        setLoading(false);\n      }, 300);\n    },\n    [deselectedOptions, loading, options],\n  );\n\n  const updateSelection = useCallback(\n    (selected) => {\n      const selectedText = selected.map((selectedItem) => {\n        const matchedOption = options.find((option) => {\n          return option.value.match(selectedItem);\n        });\n        return matchedOption && matchedOption.label;\n      });\n      setSelectedOptions(selected);\n      setInputValue(selectedText);\n    },\n    [options],\n  );\n\n  const textField = (\n    <Autocomplete.TextField\n      onChange={updateText}\n      label=\"Tags\"\n      value={inputValue}\n      prefix={<Icon source={SearchMinor} color=\"inkLighter\" />}\n      placeholder=\"Search\"\n    />\n  );\n\n  const emptyState = (\n    <React.Fragment>\n      <Icon source={SearchMinor} />\n      <div style={{textAlign: 'center'}}>\n        <TextContainer>Could not find any results</TextContainer>\n      </div>\n    </React.Fragment>\n  );\n\n  return (\n    <div style={{height: '225px'}}>\n      <Autocomplete\n        options={options}\n        selected={selectedOptions}\n        onSelect={updateSelection}\n        emptyState={emptyState}\n        loading={loading}\n        textField={textField}\n      />\n    </div>\n  );\n}",
    "description": "Use to indicate there are no search results."
  },
  "DefaultAvatar": {
    "prefix": [
      "PEDefaultAvatar"
    ],
    "body": "import React from 'react';\nimport {Avatar} from '../src';\n\nexport function Playground() {\n  return (\n    <Avatar customer name=\"Farrah\" />\n  );\n}",
    "description": "Use to present an avatar for a merchant, customer, or business."
  },
  "DefaultBadge": {
    "prefix": [
      "PEDefaultBadge"
    ],
    "body": "import React from 'react';\nimport {Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Badge>Fulfilled</Badge>\n  );\n}",
    "description": "Use to give a non-critical status update on a piece of information or action."
  },
  "InformationalBadge": {
    "prefix": [
      "PEInformationalBadge"
    ],
    "body": "import React from 'react';\nimport {Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Badge status=\"info\">Published</Badge>\n  );\n}",
    "description": "Use to call out an object or action as having an important attribute. For example, marking an option as “Recommended” or marking a theme as “Published”."
  },
  "SuccessBadge": {
    "prefix": [
      "PESuccessBadge"
    ],
    "body": "import React from 'react';\nimport {Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Badge status=\"success\">Funds recovered</Badge>\n  );\n}",
    "description": "Use to indicate a successful, completed, or desirable state when it’s important to provide positive reinforcement to merchants. For example, when merchants successfully dispute a chargeback, a success badge shows that says “Funds recovered”."
  },
  "AttentionBadge": {
    "prefix": [
      "PEAttentionBadge"
    ],
    "body": "import React from 'react';\nimport {Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Badge status=\"attention\">Unfulfilled</Badge>\n  );\n}",
    "description": "Use when something requires merchants’ attention but the issue isn’t critical. For example, this badge would show next to an order that needs to be reviewed by merchants."
  },
  "WarningBadge": {
    "prefix": [
      "PEWarningBadge"
    ],
    "body": "import React from 'react';\nimport {Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Badge status=\"warning\">SSL unavailable</Badge>\n  );\n}",
    "description": "Use for critical and time-sensitive issues that require merchants’ attention and potential action. Warning events are often reversible.\n\nKeep in mind that seeing this badge can feel stressful for merchants so it should only be used when absolutely necessary."
  },
  "CriticalBadge": {
    "prefix": [
      "PECriticalBadge"
    ],
    "body": "import React from 'react';\nimport {Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Badge progress=\"incomplete\">Unfulfilled</Badge>\n  );\n}",
    "description": "<!-- example-for: android, ios -->\n\nUse for critical and irreversible issues that require merchants’ attention and potential action.\n\nKeep in mind that seeing this badge can feel stressful for merchants so it should only be used when absolutely necessary.\n\n<!-- content-for: android -->\n\n![Critical badge with red background](/public_images/components/Badge/android/critical@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Critical badge with red background](/public_images/components/Badge/ios/critical@2x.png)\n\n<!-- /content-for -->\n\n### Incomplete badge\n\nUse to indicate when a given task has not yet been completed. For example, when merchants haven’t fulfilled an order."
  },
  "PartiallyCompleteBadge": {
    "prefix": [
      "PEPartiallyCompleteBadge"
    ],
    "body": "import React from 'react';\nimport {Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Badge progress=\"partiallyComplete\">Partially fulfilled</Badge>\n  );\n}",
    "description": "Use to indicate when a given task has been partially completed. For example, when merchants have partially fulfilled an order."
  },
  "CompleteBadge": {
    "prefix": [
      "PECompleteBadge"
    ],
    "body": "import React from 'react';\nimport {Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Badge progress=\"complete\">Fulfilled</Badge>\n  );\n}",
    "description": "Use to indicate when a given task has been completed. For example, when merchants have fulfilled an order."
  },
  "DefaultBanners": {
    "prefix": [
      "PEDefaultBanners"
    ],
    "body": "import React from 'react';\nimport {Banner} from '../src';\n\nexport function Playground() {\n  return (\n    <Banner title=\"Order archived\" onDismiss={() => {}}>\n  <p>This order was archived on March 7, 2017 at 3:12pm EDT.</p>\n</Banner>\n  );\n}",
    "description": "- Use to convey general information or actions that aren’t critical. For example, you might show a banner that asks for merchant feedback.\n- Default banners contain lower priority information and should always be dismissible."
  },
  "DismissibleBanner": {
    "prefix": [
      "PEDismissibleBanner"
    ],
    "body": "import React from 'react';\nimport {Banner, Link} from '../src';\n\nexport function Playground() {\n  return (\n    <Banner onDismiss={() => {}}>\n  <p>\n    Use your finance report to get detailed information about your business.{' '}\n    <Link url=\"\">Let us know what you think</Link>\n  </p>\n</Banner>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nMake all banners dismissible, unless they contain critical information or an important action that merchants are required to take."
  },
  "BannerWithFooterCall-to-action": {
    "prefix": [
      "PEBannerWithFooterCall-to-action"
    ],
    "body": "import React from 'react';\nimport {Banner} from '../src';\n\nexport function Playground() {\n  return (\n    <Banner\n  title=\"Some of your product variants are missing weights\"\n  status=\"warning\"\n  action={{content: 'Edit variant weights'}}\n  onDismiss={() => {}}\n>\n  <p>\n    Add weights to show accurate rates at checkout and when buying shipping\n    labels in Shopify.\n  </p>\n</Banner>\n  );\n}",
    "description": "Use when you want merchants to take an action after reading the banner."
  },
  "InformationalBanners": {
    "prefix": [
      "PEInformationalBanners"
    ],
    "body": "import React from 'react';\nimport {Banner} from '../src';\n\nexport function Playground() {\n  return (\n    <Banner\n  title=\"USPS has updated their rates\"\n  action={{content: 'Learn more'}}\n  status=\"info\"\n  onDismiss={() => {}}\n>\n  <p>Make sure you know how these changes affect your store.</p>\n</Banner>\n  );\n}",
    "description": "Use to update merchants about a change or give them advice."
  },
  "SuccessBanner": {
    "prefix": [
      "PESuccessBanner"
    ],
    "body": "import React from 'react';\nimport {Banner} from '../src';\n\nexport function Playground() {\n  return (\n    <Banner\n  title=\"Your shipping label is ready to print.\"\n  status=\"success\"\n  action={{content: 'Print label'}}\n  onDismiss={() => {}}\n/>\n  );\n}",
    "description": "- Default to using toasts for success messages, unless the feedback is delayed, persistent, or has a call to action\n- Include next steps if applicable"
  },
  "WarningBanners": {
    "prefix": [
      "PEWarningBanners"
    ],
    "body": "import React from 'react';\nimport {Banner, List} from '../src';\n\nexport function Playground() {\n  return (\n    <Banner\n  title=\"Before you can purchase a shipping label, this change needs to be made:\"\n  action={{content: 'Edit address'}}\n  status=\"warning\"\n>\n  <List>\n    <List.Item>\n      The name of the city you’re shipping to has characters that aren’t\n      allowed. City name can only include spaces and hyphens.\n    </List.Item>\n  </List>\n</Banner>\n  );\n}",
    "description": "- Use to display information that needs attention or that merchants need to take action on\n- Seeing these banners can be stressful for merchants so be cautious about using them"
  },
  "CriticalBanners": {
    "prefix": [
      "PECriticalBanners"
    ],
    "body": "import React from 'react';\nimport {Banner, Link} from '../src';\n\nexport function Playground() {\n  return (\n    <Banner\n  title=\"High risk of fraud detected\"\n  action={{content: 'Review risk analysis'}}\n  status=\"critical\"\n>\n  <p>\n    Before fulfilling this order or capturing payment, please{' '}\n    <Link url=\"\">review the Risk Analysis</Link> and determine if this order is\n    fraudulent.\n  </p>\n</Banner>\n  );\n}",
    "description": "- Use to communicate problems that have to be resolved immediately for merchants to complete a task\n- For example, you will show this banner for orders with high fraud risk\n- Seeing these banners can be stressful for merchants so be cautious about using them"
  },
  "BannerInAModal": {
    "prefix": [
      "PEBannerInAModal"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Button, Modal, TextContainer, Banner} from '../src';\n\nexport function BannerInModalExample() {\n  const [active, setActive] = useState(false);\n\n  const handleChange = useCallback(() => setActive(!active), [active]);\n\n  return (\n    <div style={{height: '500px'}}>\n      <Button onClick={handleChange}>Open</Button>\n      <Modal\n        open={active}\n        onClose={handleChange}\n        title=\"Reach more shoppers with Instagram product tags\"\n        primaryAction={{\n          content: 'Add Instagram',\n          onAction: handleChange,\n        }}\n        secondaryActions={[\n          {\n            content: 'Learn more',\n            onAction: handleChange,\n          },\n        ]}\n      >\n        <Modal.Section>\n          <TextContainer>\n            <Banner action={{content: 'Connect account'}} status=\"warning\">\n              <p>\n                Connect your instagram account to your shop before proceeding.\n              </p>\n            </Banner>\n            <p>\n              Use Instagram posts to share your products with millions of\n              people. Let shoppers buy from your store without leaving\n              Instagram.\n            </p>\n          </TextContainer>\n        </Modal.Section>\n      </Modal>\n    </div>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nBanners inside of modals render with less spacing and a pared-back design to fit within a content context."
  },
  "BannerWithFocus": {
    "prefix": [
      "PEBannerWithFocus"
    ],
    "body": "import React, {useRef, useEffect} from 'react';\nimport {Banner} from '../src';\n\nexport function BannerWithFocusExample() {\n  const banner = useRef();\n\n  useEffect(() => banner.current.focus(), []);\n\n  return (\n    <Banner\n      title=\"High risk of fraud detected\"\n      onDismiss={() => {}}\n      status=\"critical\"\n      ref={banner}\n    >\n      <p>\n        Before fulfilling this order or capturing payment, please review the\n        fraud analysis and determine if this order is fraudulent\n      </p>\n    </Banner>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nBanner can programmatically receive focus. Use this functionality to draw the merchant's attention to the banner."
  },
  "BannerInACard": {
    "prefix": [
      "PEBannerInACard"
    ],
    "body": "import React from 'react';\nimport {Card, TextContainer, Banner, Link} from '../src';\n\nexport function Playground() {\n  return (\n    <Card title=\"Online store dashboard\" sectioned>\n  <TextContainer>\n    <Banner onDismiss={() => {}}>\n      <p>\n        Use your finance report to get detailed information about your business.{' '}\n        <Link url=\"\">Let us know what you think</Link>\n      </p>\n    </Banner>\n\n    <p>View a summary of your online store’s performance.</p>\n  </TextContainer>\n</Card>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nBanners inside of cards render with less spacing and a pared-back design to fit within a content context."
  },
  "BannerInNavigation": {
    "prefix": [
      "PEBannerInNavigation"
    ],
    "body": "import React, {version} from 'react';\nimport {Navigation, Banner} from '../src';\n\nexport function Playground() {\n  return (\n    <Navigation location=\"/\">\n  <Navigation.Section\n    items={[\n      {\n        url: '/path/to/place',\n        label: 'Home',\n        icon: HomeMajorMonotone,\n      },\n    ]}\n  />\n  <Banner status=\"info\">\n    <p>Preview version: 2019-07</p>\n  </Banner>\n</Navigation>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nBanners inside of the navigation render with less spacing and a pared-back design to fit within a content context."
  },
  "BasicButton": {
    "prefix": [
      "PEBasicButton"
    ],
    "body": "import React from 'react';\nimport {Button} from '../src';\n\nexport function Playground() {\n  return (\n    <Button>Add product</Button>\n  );\n}",
    "description": "Used most in the interface. Only use another style if a button requires more or less visual weight."
  },
  "OutlineButton": {
    "prefix": [
      "PEOutlineButton"
    ],
    "body": "import React from 'react';\nimport {Button} from '../src';\n\nexport function Playground() {\n  return (\n    <Button outline>Add product</Button>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse against shaded or colorful backgrounds. An outline button will maintain the appropriate visual weight and won’t clash with the background color."
  },
  "OutlineMonochromeButton": {
    "prefix": [
      "PEOutlineMonochromeButton"
    ],
    "body": "import React from 'react';\nimport {Button} from '../src';\n\nexport function Playground() {\n  return (\n    <div style={{color: '#bf0711'}}>\n  <Button monochrome outline>\n    Retry\n  </Button>\n</div>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse against shaded or colorful backgrounds where matching the current text colors is more appropriate than the current outline theme."
  },
  "PlainButton": {
    "prefix": [
      "PEPlainButton"
    ],
    "body": "import React from 'react';\nimport {Button} from '../src';\n\nexport function Playground() {\n  return (\n    <Button plain>View shipping settings</Button>\n  );\n}",
    "description": "Use for less important or less commonly used actions since they’re less prominent. For example, plain buttons are used as actions in cards."
  },
  "PlainMonochromeButton": {
    "prefix": [
      "PEPlainMonochromeButton"
    ],
    "body": "import React from 'react';\nimport {Button} from '../src';\n\nexport function Playground() {\n  return (\n    <div style={{color: '#bf0711'}}>\n  Could not retrieve data.{' '}\n  <Button plain monochrome>\n    Try again\n  </Button>\n</div>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse for less important or less commonly used actions where matching the current text color is desired. For example in the InlineError component."
  },
  "PlainDestructiveButton": {
    "prefix": [
      "PEPlainDestructiveButton"
    ],
    "body": "import React from 'react';\nimport {Button} from '../src';\n\nexport function Playground() {\n  return (\n    <Button plain destructive>\n  Remove\n</Button>\n  );\n}",
    "description": "<!-- example-for: online-store-ui -->\n\nUse for actions that will delete merchant data or be otherwise difficult to recover from. Since they’re less prominent, use for less important or less commonly used destructive actions. For example, plain buttons are used as actions in cards."
  },
  "PrimaryButton": {
    "prefix": [
      "PEPrimaryButton"
    ],
    "body": "import React from 'react';\nimport {Button} from '../src';\n\nexport function Playground() {\n  return (\n    <Button primary>Save theme</Button>\n  );\n}",
    "description": "Use to highlight the most important actions in any experience. Don’t use more than one primary button in a section or screen to avoid overwhelming merchants."
  },
  "DestructiveButton": {
    "prefix": [
      "PEDestructiveButton"
    ],
    "body": "import React from 'react';\nimport {Button} from '../src';\n\nexport function Playground() {\n  return (\n    <Button destructive>Delete theme</Button>\n  );\n}",
    "description": "Use when the action will delete merchant data or be otherwise difficult to recover from. Destructive buttons should trigger a confirmation dialog before the action is completed. Be thoughtful about using destructive buttons because they can feel stressful for merchants."
  },
  "SlimButton": {
    "prefix": [
      "PESlimButton"
    ],
    "body": "import React from 'react';\nimport {Button} from '../src';\n\nexport function Playground() {\n  return (\n    <Button size=\"slim\">Save variant</Button>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when a table or list has a set of actions on each item to avoid making items taller than they need to be. Don’t use slim buttons for primary actions."
  },
  "LargeButton": {
    "prefix": [
      "PELargeButton"
    ],
    "body": "import React from 'react';\nimport {Button} from '../src';\n\nexport function Playground() {\n  return (\n    <Button size=\"large\">Create store</Button>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse for the main call to action in empty states or for calls to action shown with large illustrations."
  },
  "Full-widthButton": {
    "prefix": [
      "PEFull-widthButton"
    ],
    "body": "import React from 'react';\nimport {Button} from '../src';\n\nexport function Playground() {\n  return (\n    <Button fullWidth>Add customer</Button>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse for buttons placed in a narrow column (especially when stacking multiple buttons) or for creating a set of buttons of equal width. Full-width buttons should rarely exceed 320 px wide."
  },
  "Text-alignedButton": {
    "prefix": [
      "PEText-alignedButton"
    ],
    "body": "import React from 'react';\nimport {Button} from '../src';\n\nexport function Playground() {\n  return (\n    <Button plain textAlign=\"left\">\n  This is a really long string of text that overflows onto the next line we need\n  to put in a lot of words now you can see the alignment. It is very long but a\n  customer could potentially name something this long.\n</Button>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse for plain or monochrome buttons that could have a long length and should be aligned when they potentially overflow onto the next line."
  },
  "DisabledState": {
    "prefix": [
      "PEDisabledState"
    ],
    "body": "import React from 'react';\nimport {Button} from '../src';\n\nexport function Playground() {\n  return (\n    <Button disabled>Buy shipping label</Button>\n  );\n}",
    "description": "Use for actions that aren’t currently available. The surrounding interface should make it clear why the button is disabled and what needs to be done to enable it."
  },
  "LoadingState": {
    "prefix": [
      "PELoadingState"
    ],
    "body": "import React from 'react';\nimport {Button} from '../src';\n\nexport function Playground() {\n  return (\n    <Button loading>Save product</Button>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when a button has been pressed and the associated action is in progress."
  },
  "DefaultButtonGroup": {
    "prefix": [
      "PEDefaultButtonGroup"
    ],
    "body": "import React from 'react';\nimport {ButtonGroup, Button} from '../src';\n\nexport function Playground() {\n  return (\n    <ButtonGroup>\n  <Button>Cancel</Button>\n  <Button primary>Save</Button>\n</ButtonGroup>\n  );\n}",
    "description": "Use when you have multiple buttons to space them out evenly."
  },
  "ButtonGroupWithSegmentedButtons": {
    "prefix": [
      "PEButtonGroupWithSegmentedButtons"
    ],
    "body": "import React from 'react';\nimport {ButtonGroup, Button} from '../src';\n\nexport function Playground() {\n  return (\n    <ButtonGroup segmented>\n  <Button>Bold</Button>\n  <Button>Italic</Button>\n  <Button>Underline</Button>\n</ButtonGroup>\n  );\n}",
    "description": "Use to emphasize several buttons as a thematically-related set among other controls."
  },
  "DefaultCalloutCard": {
    "prefix": [
      "PEDefaultCalloutCard"
    ],
    "body": "import React from 'react';\nimport {CalloutCard} from '../src';\n\nexport function Playground() {\n  return (\n    <CalloutCard\n  title=\"Customize the style of your checkout\"\n  illustration=\"https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg\"\n  primaryAction={{\n    content: 'Customize checkout',\n    url: 'https://www.shopify.com',\n  }}\n>\n  <p>Upload your store’s logo, change colors and fonts, and more.</p>\n</CalloutCard>\n  );\n}",
    "description": "Use to let merchants know about a feature or opportunity where there is a clear, single action they need to take to move to the next step."
  },
  "CalloutCardWithSecondaryAction": {
    "prefix": [
      "PECalloutCardWithSecondaryAction"
    ],
    "body": "import React from 'react';\nimport {CalloutCard} from '../src';\n\nexport function Playground() {\n  return (\n    <CalloutCard\n  title=\"Customize the style of your checkout\"\n  illustration=\"https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg\"\n  primaryAction={{content: 'Customize checkout'}}\n  secondaryAction={{content: 'Learn more about customizing checkout'}}\n>\n  <p>Upload your store’s logo, change colors and fonts, and more.</p>\n</CalloutCard>\n  );\n}",
    "description": "Use to let merchants know about a feature or opportunity where there are two distinct actions they can take on the information."
  },
  "DismissableCalloutCard": {
    "prefix": [
      "PEDismissableCalloutCard"
    ],
    "body": "import React from 'react';\nimport {CalloutCard} from '../src';\n\nexport function Playground() {\n  return (\n    <CalloutCard\n  title=\"Customize the style of your checkout\"\n  illustration=\"https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg\"\n  primaryAction={{content: 'Customize checkout'}}\n  onDismiss={() => {}}\n>\n  <p>Upload your store’s logo, change colors and fonts, and more.</p>\n</CalloutCard>\n  );\n}",
    "description": "Make all callout cards dismissible so merchants can get rid of cards about features they’re not interested in."
  },
  "DefaultCaption": {
    "prefix": [
      "PEDefaultCaption"
    ],
    "body": "import React from 'react';\nimport {List, Caption} from '../src';\n\nexport function Playground() {\n  return (\n    <List>\n  <List.Item>\n    Order #1001 <Caption>Received April 21, 2017</Caption>\n  </List.Item>\n  <List.Item>\n    Order #1002 <Caption>Received April 22, 2017</Caption>\n  </List.Item>\n</List>\n  );\n}",
    "description": "Use to provide details in situations where content is compact and space is tight."
  },
  "DefaultCard": {
    "prefix": [
      "PEDefaultCard"
    ],
    "body": "import React from 'react';\nimport {Card} from '../src';\n\nexport function Playground() {\n  return (\n    <Card title=\"Online store dashboard\" sectioned>\n  <p>View a summary of your online store’s performance.</p>\n</Card>\n  );\n}",
    "description": "Use when you have a simple message to communicate to merchants that doesn’t require any secondary steps."
  },
  "CardWithHeaderActions": {
    "prefix": [
      "PECardWithHeaderActions"
    ],
    "body": "import React, {version} from 'react';\nimport {Card} from '../src';\n\nexport function Playground() {\n  return (\n    <Card sectioned title=\"Variants\" actions={[{content: 'Add variant'}]}>\n  <p>\n    Add variants if this product comes in multiple versions, like different\n    sizes or colors.\n  </p>\n</Card>\n  );\n}",
    "description": "<!-- content-for: web -->\n\nUse for less important card actions, or actions merchants may do before reviewing the contents of the card. For example, merchants may want to add items to a card containing a long list, or enter a customer’s new address.\n\n<!-- /content-for -->"
  },
  "CardWithFooterActions": {
    "prefix": [
      "PECardWithFooterActions"
    ],
    "body": "import React from 'react';\nimport {Card, List} from '../src';\n\nexport function Playground() {\n  return (\n    <Card\n  title=\"Shipment 1234\"\n  secondaryFooterActions={[{content: 'Edit shipment'}]}\n  primaryFooterAction={{content: 'Add tracking number'}}\n>\n  <Card.Section title=\"Items\">\n    <List>\n      <List.Item>1 × Isis Glass, 4-Pack</List.Item>\n      <List.Item>1 × Anubis Cup, 2-Pack</List.Item>\n    </List>\n  </Card.Section>\n</Card>\n  );\n}",
    "description": "<!-- content-for: web -->\n\nUse footer actions for a card’s most important actions, or actions merchants should do after reviewing the contents of the card. For example, merchants should review the contents of a shipment before an important action like adding tracking information.\n\n<!-- /content-for -->"
  },
  "CardWithMultipleFooterActions": {
    "prefix": [
      "PECardWithMultipleFooterActions"
    ],
    "body": "import React from 'react';\nimport {Card, List} from '../src';\n\nexport function Playground() {\n  return (\n    <Card\n  title=\"Shipment 1234\"\n  secondaryFooterActions={[\n    {content: 'Cancel shipment', destructive: true},\n    {content: 'Add another shipment', disabled: true},\n  ]}\n  primaryFooterAction={{content: 'Add tracking number'}}\n>\n  <Card.Section title=\"Items\">\n    <List>\n      <List.Item>1 × Isis Glass, 4-Pack</List.Item>\n      <List.Item>1 × Anubis Cup, 2-Pack</List.Item>\n    </List>\n  </Card.Section>\n</Card>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nWhen multiple secondary footer actions are provided, they will render in an action list popover activated by a disclosure button. The disclosure button text can be customized with the `secondaryFooterActionsDisclosureText` prop."
  },
  "CardWithCustomFooterActions": {
    "prefix": [
      "PECardWithCustomFooterActions"
    ],
    "body": "import React from 'react';\nimport {Card, Stack, ButtonGroup, Button} from '../src';\n\nexport function Playground() {\n  return (\n    <Card title=\"Secure your account with 2-step authentication\">\n  <Card.Section>\n    <Stack spacing=\"loose\" vertical>\n      <p>\n        Two-step authentication adds an extra layer of security when logging in\n        to your account. A special code will be required each time you log in,\n        ensuring only you can access your account.\n      </p>\n      <ButtonGroup>\n        <Button>Enable two-step authentication</Button>\n        <Button plain>Learn more</Button>\n      </ButtonGroup>\n    </Stack>\n  </Card.Section>\n</Card>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse to present actionable content that is optional or not the primary purpose of the page."
  },
  "CardWithDestructiveFooterAction": {
    "prefix": [
      "PECardWithDestructiveFooterAction"
    ],
    "body": "import React from 'react';\nimport {Card, List} from '../src';\n\nexport function Playground() {\n  return (\n    <Card\n  title=\"Shipment 1234\"\n  secondaryFooterActions={[{content: 'Cancel shipment', destructive: true}]}\n  primaryFooterAction={{content: 'Add tracking number'}}\n>\n  <Card.Section title=\"Items\">\n    <List>\n      <List.Item>1 × Isis Glass, 4-Pack</List.Item>\n      <List.Item>1 × Anubis Cup, 2-Pack</List.Item>\n    </List>\n  </Card.Section>\n</Card>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when a card action will delete merchant data or be otherwise difficult to recover from."
  },
  "CardWithMultipleSections": {
    "prefix": [
      "PECardWithMultipleSections"
    ],
    "body": "import React from 'react';\nimport {Card} from '../src';\n\nexport function Playground() {\n  return (\n    <Card title=\"Online store dashboard\">\n  <Card.Section>\n    <p>View a summary of your online store’s performance.</p>\n  </Card.Section>\n\n  <Card.Section>\n    <p>\n      View a summary of your online store’s performance, including sales,\n      visitors, top products, and referrals.\n    </p>\n  </Card.Section>\n</Card>\n  );\n}",
    "description": "Use when you have two related but distinct pieces of information to communicate to merchants. Multiple sections can help break up complicated concepts to make them easier to scan and understand."
  },
  "CardWithMultipleTitledSections": {
    "prefix": [
      "PECardWithMultipleTitledSections"
    ],
    "body": "import React from 'react';\nimport {Card} from '../src';\n\nexport function Playground() {\n  return (\n    <Card title=\"Online store dashboard\">\n  <Card.Section title=\"Reports\">\n    <p>View a summary of your online store’s performance.</p>\n  </Card.Section>\n\n  <Card.Section title=\"Summary\">\n    <p>\n      View a summary of your online store’s performance, including sales,\n      visitors, top products, and referrals.\n    </p>\n  </Card.Section>\n</Card>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when you have two related but distinct pieces of information to communicate to merchants that are complex enough to require a title to introduce them."
  },
  "CardSectionWithAction": {
    "prefix": [
      "PECardSectionWithAction"
    ],
    "body": "import React from 'react';\nimport {Card} from '../src';\n\nexport function Playground() {\n  return (\n    <Card title=\"Customer\">\n  <Card.Section>\n    <p>John Smith</p>\n  </Card.Section>\n  <Card.Section title=\"Contact Information\" actions={[{content: 'Edit'}]}>\n    <p>john.smith@example.com</p>\n  </Card.Section>\n</Card>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when your card section has actions that apply only to that section."
  },
  "CardWithSubsection": {
    "prefix": [
      "PECardWithSubsection"
    ],
    "body": "import React from 'react';\nimport {Card} from '../src';\n\nexport function Playground() {\n  return (\n    <Card title=\"Customer\">\n  <Card.Section>\n    <p>John Smith</p>\n  </Card.Section>\n  <Card.Section title=\"Addresses\">\n    <Card.Subsection>\n      123 First St\n      <br />\n      Somewhere\n      <br />\n      The Universe\n    </Card.Subsection>\n    <Card.Subsection>\n      123 Second St\n      <br />\n      Somewhere\n      <br />\n      The Universe\n    </Card.Subsection>\n  </Card.Section>\n  <Card.Section>\n    <Card.Subsection>\n      A single subsection without a sibling has no visual appearance\n    </Card.Subsection>\n  </Card.Section>\n</Card>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when your card sections need further categorization."
  },
  "CardSectionWithDestructiveAction": {
    "prefix": [
      "PECardSectionWithDestructiveAction"
    ],
    "body": "import React from 'react';\nimport {Card} from '../src';\n\nexport function Playground() {\n  return (\n    <Card title=\"Customer\">\n  <Card.Section>\n    <p>John Smith</p>\n  </Card.Section>\n  <Card.Section\n    title=\"Contact Information\"\n    actions={[{content: 'Delete', destructive: true}, {content: 'Edit'}]}\n  >\n    <p>john.smith@example.com</p>\n  </Card.Section>\n</Card>\n  );\n}",
    "description": "<!-- content-for: web -->\n\nUse when a card action applies only to one section and will delete merchant data or be otherwise difficult to recover from.\n\n<!-- /content-for -->"
  },
  "CardWithASubduedSection": {
    "prefix": [
      "PECardWithASubduedSection"
    ],
    "body": "import React from 'react';\nimport {Card, List} from '../src';\n\nexport function Playground() {\n  return (\n    <Card title=\"Staff accounts\">\n  <Card.Section>\n    <List>\n      <List.Item>Felix Crafford</List.Item>\n      <List.Item>Ezequiel Manno</List.Item>\n    </List>\n  </Card.Section>\n\n  <Card.Section subdued title=\"Deactivated staff accounts\">\n    <List>\n      <List.Item>Felix Crafford</List.Item>\n      <List.Item>Ezequiel Manno</List.Item>\n    </List>\n  </Card.Section>\n</Card>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse to indicate when one of the sections in your card contains inactive or disabled content."
  },
  "SubduedCardForSecondaryContent": {
    "prefix": [
      "PESubduedCardForSecondaryContent"
    ],
    "body": "import React from 'react';\nimport {Card, List} from '../src';\n\nexport function Playground() {\n  return (\n    <Card title=\"Deactivated staff accounts\" sectioned subdued>\n  <List>\n    <List.Item>Felix Crafford</List.Item>\n    <List.Item>Ezequiel Manno</List.Item>\n  </List>\n</Card>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse for content that you want to deprioritize. Subdued cards don’t stand out as much as cards with white backgrounds so don’t use them for information or actions that are critical to merchants."
  },
  "CardWithSeparateHeader": {
    "prefix": [
      "PECardWithSeparateHeader"
    ],
    "body": "import React from 'react';\nimport {Card, Popover, Button, ActionList, List} from '../src';\n\nexport function Playground() {\n  return (\n    <Card>\n  <Card.Header\n    actions={[\n      {\n        content: 'Preview',\n      },\n    ]}\n    title=\"Staff accounts\"\n  >\n    <Popover\n      active\n      activator={\n        <Button disclosure plain>\n          Add account\n        </Button>\n      }\n      onClose={() => {}}\n    >\n      <ActionList items={[{content: 'Member'}, {content: 'Admin'}]} />\n    </Popover>\n  </Card.Header>\n  <Card.Section>\n    <List>\n      <List.Item>Felix Crafford</List.Item>\n      <List.Item>Ezequiel Manno</List.Item>\n    </List>\n  </Card.Section>\n</Card>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse to be able to use custom React elements as header content."
  },
  "CardSectionWithCustomReactNodeTitle": {
    "prefix": [
      "PECardSectionWithCustomReactNodeTitle"
    ],
    "body": "import React from 'react';\nimport {Card, Stack, Icon, Subheading, List} from '../src';\n\nexport function Playground() {\n  return (\n    <Card title=\"Products\">\n  <Card.Section\n    title={\n      <Stack>\n        <Icon source={ProductsMajorTwotone} />\n        <Subheading>New Products</Subheading>\n      </Stack>\n    }\n  >\n    <List>\n      <List.Item>Socks</List.Item>\n      <List.Item>Super Shoes</List.Item>\n    </List>\n  </Card.Section>\n</Card>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse to render custom content such as icons, links, or buttons in a card section’s header."
  },
  "CardWithAllOfItsElements": {
    "prefix": [
      "PECardWithAllOfItsElements"
    ],
    "body": "import React from 'react';\nimport {Card, Popover, Button, ActionList, TextContainer, ResourceList, Stack, List} from '../src';\n\nexport function Playground() {\n  return (\n    <Card\n  secondaryFooterActions={[{content: 'Dismiss'}]}\n  primaryFooterAction={{content: 'Export Report'}}\n>\n  <Card.Header\n    actions={[\n      {\n        content: 'Total Sales',\n      },\n    ]}\n    title=\"Sales\"\n  >\n    <Popover\n      active={false}\n      activator={\n        <Button disclosure plain>\n          View Sales\n        </Button>\n      }\n      onClose={() => {}}\n    >\n      <ActionList items={[{content: 'Gross Sales'}, {content: 'Net Sales'}]} />\n    </Popover>\n  </Card.Header>\n  <Card.Section>\n    <TextContainer>\n      You can use sales reports to see information about your customers’ orders\n      based on criteria such as sales over time, by channel, or by staff.\n    </TextContainer>\n  </Card.Section>\n  <Card.Section title=\"Total Sales Breakdown\">\n    <ResourceList\n      resourceName={{singular: 'sale', plural: 'sales'}}\n      items={[\n        {\n          sales: 'Orders',\n          amount: 'USD$0.00',\n          url: 'reports/orders',\n        },\n        {\n          sales: 'Returns',\n          amount: '-USD$250.00',\n          url: 'reports/returns',\n        },\n      ]}\n      renderItem={(item) => {\n        const {sales, amount, url} = item;\n        return (\n          <ResourceList.Item\n            url={url}\n            accessibilityLabel={`View Sales for ${sales}`}\n          >\n            <Stack>\n              <Stack.Item fill>{sales}</Stack.Item>\n              <Stack.Item>{amount}</Stack.Item>\n            </Stack>\n          </ResourceList.Item>\n        );\n      }}\n    />\n  </Card.Section>\n  <Card.Section title=\"Deactivated reports\" subdued>\n    <List>\n      <List.Item>Payouts</List.Item>\n      <List.Item>Total Sales By Channel</List.Item>\n    </List>\n  </Card.Section>\n  <Card.Section title=\"Note\">\n    <TextContainer>\n      The sales reports are available only if your store is on the Shopify plan\n      or higher.\n    </TextContainer>\n  </Card.Section>\n</Card>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse as a broad example that includes most props available to card."
  },
  "DefaultCheckboxes": {
    "prefix": [
      "PEDefaultCheckboxes"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Checkbox} from '../src';\n\nexport function CheckboxExample() {\n  const [checked, setChecked] = useState(false);\n  const handleChange = useCallback((newChecked) => setChecked(newChecked), []);\n\n  return (\n    <Checkbox\n      label=\"Basic checkbox\"\n      checked={checked}\n      onChange={handleChange}\n    />\n  );\n}",
    "description": "Use in forms to toggle the state of something on or off. Default checkboxes can appear in two states: selected and disabled, or unselected."
  },
  "SingleChoiceList": {
    "prefix": [
      "PESingleChoiceList"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {ChoiceList} from '../src';\n\nexport function SingleChoiceListExample() {\n  const [selected, setSelected] = useState(['hidden']);\n\n  const handleChange = useCallback((value) => setSelected(value), []);\n\n  return (\n    <ChoiceList\n      title=\"Company name\"\n      choices={[\n        {label: 'Hidden', value: 'hidden'},\n        {label: 'Optional', value: 'optional'},\n        {label: 'Required', value: 'required'},\n      ]}\n      selected={selected}\n      onChange={handleChange}\n    />\n  );\n}",
    "description": "Allows merchants to select one option from a list.\n\n- Make sure all options are an either/or choice."
  },
  "SingleChoiceListWithError": {
    "prefix": [
      "PESingleChoiceListWithError"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {ChoiceList} from '../src';\n\nexport function ChoiceListWithErrorExample() {\n  const [selected, setSelected] = useState('hidden');\n\n  const handleChange = useCallback((value) => setSelected(value), []);\n\n  return (\n    <ChoiceList\n      title=\"Company name\"\n      choices={[\n        {label: 'Hidden', value: 'hidden', describedByError: true},\n        {label: 'Optional', value: 'optional'},\n        {label: 'Required', value: 'required'},\n      ]}\n      selected={selected}\n      onChange={handleChange}\n      error=\"Company name cannot be hidden at this time\"\n    />\n  );\n}",
    "description": "Allows for accessible error handling by connecting the error message to the field with the error."
  },
  "Multi-choiceList": {
    "prefix": [
      "PEMulti-choiceList"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {ChoiceList} from '../src';\n\nexport function MultiChoiceListExample() {\n  const [selected, setSelected] = useState(['hidden']);\n\n  const handleChange = useCallback((value) => setSelected(value), []);\n\n  return (\n    <ChoiceList\n      allowMultiple\n      title=\"While the customer is checking out\"\n      choices={[\n        {\n          label: 'Use the shipping address as the billing address by default',\n          value: 'shipping',\n          helpText:\n            'Reduces the number of fields required to check out. The billing address can still be edited.',\n        },\n        {\n          label: 'Require a confirmation step',\n          value: 'confirmation',\n          helpText:\n            'Customers must review their order details before purchasing.',\n        },\n      ]}\n      selected={selected}\n      onChange={handleChange}\n    />\n  );\n}",
    "description": "Allows merchants to select multiple options from a list.\n\n- Avoid options that are an either/or choice."
  },
  "Single-choiceOrMulti-choiceListWithChildrenContent(alwaysRendered)": {
    "prefix": [
      "PESingle-choiceOrMulti-choiceListWithChildrenContent(alwaysRendered)"
    ],
    "body": "import React, {Children, useState, useCallback} from 'react';\nimport {TextField, ChoiceList} from '../src';\n\nexport function SingleOrMultiChoiceListWithChildrenContextExample() {\n  const [selected, setSelected] = useState(['none']);\n  const [textFieldValue, setTextFieldValue] = useState('');\n\n  const handleChoiceListChange = useCallback((value) => setSelected(value), []);\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  const renderChildren = useCallback(\n    () => (\n      <TextField\n        label=\"Minimum Quantity\"\n        labelHidden\n        onChange={handleTextFieldChange}\n        value={textFieldValue}\n      />\n    ),\n    [handleTextFieldChange, textFieldValue],\n  );\n\n  return (\n    <ChoiceList\n      title=\"Discount minimum requirements\"\n      choices={[\n        {label: 'None', value: 'none'},\n        {label: 'Minimum purchase', value: 'minimum_purchase'},\n        {\n          label: 'Minimum quantity',\n          value: 'minimum_quantity',\n          renderChildren,\n        },\n      ]}\n      selected={selected}\n      onChange={handleChoiceListChange}\n    />\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when you need merchants to view and/or interact with additional content under a choice. The content will always be rendered. Works for both single-choice and multi-choice list."
  },
  "Single-choiceOrMulti-choiceListWithChildrenContent(onlyRenderedWhenChoiceIsSelected)": {
    "prefix": [
      "PESingle-choiceOrMulti-choiceListWithChildrenContent(onlyRenderedWhenChoiceIsSelected)"
    ],
    "body": "import React, {Children, useState, useCallback} from 'react';\nimport {TextField, ChoiceList} from '../src';\n\nexport function SingleOrMultuChoiceListWithChildrenContextWhenSelectedExample() {\n  const [selected, setSelected] = useState(['none']);\n  const [textFieldValue, setTextFieldValue] = useState('');\n\n  const handleChoiceListChange = useCallback((value) => setSelected(value), []);\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  const renderChildren = useCallback(\n    (isSelected) =>\n      isSelected && (\n        <TextField\n          label=\"Minimum Quantity\"\n          labelHidden\n          onChange={handleTextFieldChange}\n          value={textFieldValue}\n        />\n      ),\n    [handleTextFieldChange, textFieldValue],\n  );\n\n  return (\n    <div style={{height: '150px'}}>\n      <ChoiceList\n        title=\"Discount minimum requirements\"\n        choices={[\n          {label: 'None', value: 'none'},\n          {label: 'Minimum purchase', value: 'minimum_purchase'},\n          {\n            label: 'Minimum quantity',\n            value: 'minimum_quantity',\n            renderChildren,\n          },\n        ]}\n        selected={selected}\n        onChange={handleChoiceListChange}\n      />\n    </div>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when you need merchants to view and/or interact with additional content under a choice. The content is only rendered when the choice is selected. Works for both single-choice and multi-choice list."
  },
  "DefaultCollapsibleComponent": {
    "prefix": [
      "PEDefaultCollapsibleComponent"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Card, Stack, Button, Collapsible, TextContainer} from '../src';\n\nexport function CollapsibleExample() {\n  const [active, setActive] = useState(true);\n\n  const handleToggle = useCallback(() => setActive((active) => !active), []);\n\n  return (\n    <div style={{height: '200px'}}>\n      <Card sectioned>\n        <Stack vertical>\n          <Button\n            onClick={handleToggle}\n            ariaExpanded={active}\n            ariaControls=\"basic-collapsible\"\n          >\n            Toggle\n          </Button>\n          <Collapsible open={active} id=\"basic-collapsible\">\n            <TextContainer>\n              Your mailing list lets you contact customers or visitors who have\n              shown an interest in your store. Reach out to them with exclusive\n              offers or updates about your products.\n            </TextContainer>\n          </Collapsible>\n        </Stack>\n      </Card>\n    </div>\n  );\n}",
    "description": "Use for a basic “show more” interaction when you need to display more content."
  },
  "DefaultContextualSaveBar": {
    "prefix": [
      "PEDefaultContextualSaveBar"
    ],
    "body": "import React from 'react';\nimport {AppProvider, Frame, ContextualSaveBar} from '../src';\n\nexport function Playground() {\n  return (\n    <div style={{height: '250px'}}>\n  <AppProvider\n    theme={{\n      logo: {\n        width: 124,\n        contextualSaveBarSource:\n          'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999',\n      },\n    }}\n    i18n={{\n      Polaris: {\n        Frame: {\n          skipToContent: 'Skip to content',\n        },\n        ContextualSaveBar: {\n          save: 'Save',\n          discard: 'Discard',\n        },\n      },\n    }}\n  >\n    <Frame>\n      <ContextualSaveBar\n        message=\"Unsaved changes\"\n        saveAction={{\n          onAction: () => console.log('add form submit logic'),\n          loading: false,\n          disabled: false,\n        }}\n        discardAction={{\n          onAction: () => console.log('add clear form logic'),\n        }}\n      />\n    </Frame>\n  </AppProvider>\n</div>\n  );\n}",
    "description": "Use the save action to provide an opportunity to save changes. Use the discard action to allow merchants the option to discard their changes. Use the message to provide helpful context on the nature of those changes."
  },
  "ContextualSaveBarDuringCreation": {
    "prefix": [
      "PEContextualSaveBarDuringCreation"
    ],
    "body": "import React from 'react';\nimport {AppProvider, Frame, ContextualSaveBar} from '../src';\n\nexport function Playground() {\n  return (\n    <div style={{height: '250px'}}>\n  <AppProvider\n    theme={{\n      logo: {\n        width: 124,\n        contextualSaveBarSource:\n          'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999',\n      },\n    }}\n    i18n={{\n      Polaris: {\n        Frame: {\n          skipToContent: 'Skip to content',\n        },\n        ContextualSaveBar: {\n          save: 'Save',\n          discard: 'Discard',\n        },\n      },\n    }}\n  >\n    <Frame>\n      <ContextualSaveBar\n        message=\"Unsaved product\"\n        saveAction={{\n          onAction: () => console.log('add form submit logic'),\n          loading: false,\n          disabled: false,\n        }}\n        discardAction={{\n          onAction: () => console.log('add clear form logic'),\n        }}\n      />\n    </Frame>\n  </AppProvider>\n</div>\n  );\n}",
    "description": "Use the save action to provide an opportunity to save a newly-created resource. Use the discard action to allow merchants the option to discard a new resource. Use the message to provide helpful context on the nature of the new resource."
  },
  "ContextualSaveBarWithFlushContents": {
    "prefix": [
      "PEContextualSaveBarWithFlushContents"
    ],
    "body": "import React from 'react';\nimport {AppProvider, Frame, ContextualSaveBar} from '../src';\n\nexport function Playground() {\n  return (\n    <div style={{height: '250px'}}>\n  <AppProvider\n    theme={{\n      logo: {\n        width: 124,\n        contextualSaveBarSource:\n          'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999',\n      },\n    }}\n    i18n={{\n      Polaris: {\n        Frame: {\n          skipToContent: 'Skip to content',\n        },\n        ContextualSaveBar: {\n          save: 'Save',\n          discard: 'Discard',\n        },\n      },\n    }}\n  >\n    <Frame>\n      <ContextualSaveBar\n        alignContentFlush\n        message=\"Unsaved changes\"\n        saveAction={{\n          onAction: () => console.log('add form submit logic'),\n        }}\n        discardAction={{\n          onAction: () => console.log('add clear form logic'),\n        }}\n      />\n    </Frame>\n  </AppProvider>\n</div>\n  );\n}",
    "description": "Use the alignContentFlush flag when you want to omit the logo from the contextual save bar and\nrepurpose that space to extend the message contents fully to the left side of the container."
  },
  "DefaultDataTable": {
    "prefix": [
      "PEDefaultDataTable"
    ],
    "body": "import React from 'react';\nimport {Page, Card, DataTable} from '../src';\n\nexport function DataTableExample() {\n  const rows = [\n    ['Emerald Silk Gown', '$875.00', 124689, 140, '$122,500.00'],\n    ['Mauve Cashmere Scarf', '$230.00', 124533, 83, '$19,090.00'],\n    [\n      'Navy Merino Wool Blazer with khaki chinos and yellow belt',\n      '$445.00',\n      124518,\n      32,\n      '$14,240.00',\n    ],\n  ];\n\n  return (\n    <Page title=\"Sales by product\">\n      <Card>\n        <DataTable\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={[\n            'Product',\n            'Price',\n            'SKU Number',\n            'Net quantity',\n            'Net sales',\n          ]}\n          rows={rows}\n          totals={['', '', '', 255, '$155,830.00']}\n        />\n      </Card>\n    </Page>\n  );\n}",
    "description": "Use to present small amounts of data for merchants to view statically."
  },
  "SortableDataTable": {
    "prefix": [
      "PESortableDataTable"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Page, Card, DataTable} from '../src';\n\nexport function SortableDataTableExample() {\n  const [sortedRows, setSortedRows] = useState(null);\n\n  const initiallySortedRows = [\n    ['Emerald Silk Gown', '$875.00', 124689, 140, '$122,500.00'],\n    ['Mauve Cashmere Scarf', '$230.00', 124533, 83, '$19,090.00'],\n    [\n      'Navy Merino Wool Blazer with khaki chinos and yellow belt',\n      '$445.00',\n      124518,\n      32,\n      '$14,240.00',\n    ],\n  ];\n  const rows = sortedRows ? sortedRows : initiallySortedRows;\n\n  const handleSort = useCallback(\n    (index, direction) => setSortedRows(sortCurrency(rows, index, direction)),\n    [rows],\n  );\n\n  return (\n    <Page title=\"Sales by product\">\n      <Card>\n        <DataTable\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={[\n            'Product',\n            'Price',\n            'SKU Number',\n            'Net quantity',\n            'Net sales',\n          ]}\n          rows={rows}\n          totals={['', '', '', 255, '$155,830.00']}\n          sortable={[false, true, false, false, true]}\n          defaultSortDirection=\"descending\"\n          initialSortColumnIndex={4}\n          onSort={handleSort}\n        />\n      </Card>\n    </Page>\n  );\n\n  function sortCurrency(rows, index, direction) {\n    return [...rows].sort((rowA, rowB) => {\n      const amountA = parseFloat(rowA[index].substring(1));\n      const amountB = parseFloat(rowB[index].substring(1));\n\n      return direction === 'descending' ? amountB - amountA : amountA - amountB;\n    });\n  }\n}",
    "description": "Use when clarity of the table’s content is needed. For example, to note the number of rows currently shown in a data table with pagination."
  },
  "DataTableWithFooter": {
    "prefix": [
      "PEDataTableWithFooter"
    ],
    "body": "import React from 'react';\nimport {Page, Card, DataTable} from '../src';\n\nexport function DataTableFooterExample() {\n  const rows = [\n    ['Emerald Silk Gown', '$875.00', 124689, 140, '$122,500.00'],\n    ['Mauve Cashmere Scarf', '$230.00', 124533, 83, '$19,090.00'],\n    [\n      'Navy Merino Wool Blazer with khaki chinos and yellow belt',\n      '$445.00',\n      124518,\n      32,\n      '$14,240.00',\n    ],\n  ];\n\n  return (\n    <Page title=\"Sales by product\">\n      <Card>\n        <DataTable\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={[\n            'Product',\n            'Price',\n            'SKU Number',\n            'Net quantity',\n            'Net sales',\n          ]}\n          rows={rows}\n          totals={['', '', '', 255, '$155,830.00']}\n          footerContent={`Showing ${rows.length} of ${rows.length} results`}\n        />\n      </Card>\n    </Page>\n  );\n}",
    "description": "Use when clarity of the table’s content is needed. For example, to note the number of rows currently shown in a data table with pagination."
  },
  "DataTableWithRowHeadingLinks": {
    "prefix": [
      "PEDataTableWithRowHeadingLinks"
    ],
    "body": "import React from 'react';\nimport {Link, Page, Card, DataTable} from '../src';\n\nexport function DataTableLinkExample() {\n  const rows = [\n    [\n      <Link url=\"https://www.example.com\" key=\"emerald-silk-gown\">\n        Emerald Silk Gown\n      </Link>,\n      '$875.00',\n      124689,\n      140,\n      '$122,500.00',\n    ],\n    [\n      <Link url=\"https://www.example.com\" key=\"mauve-cashmere-scarf\">\n        Mauve Cashmere Scarf\n      </Link>,\n      '$230.00',\n      124533,\n      83,\n      '$19,090.00',\n    ],\n    [\n      <Link url=\"https://www.example.com\" key=\"navy-merino-wool\">\n        Navy Merino Wool Blazer with khaki chinos and yellow belt\n      </Link>,\n      '$445.00',\n      124518,\n      32,\n      '$14,240.00',\n    ],\n  ];\n\n  return (\n    <Page title=\"Sales by product\">\n      <Card>\n        <DataTable\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={['Product', 'Price', 'SKU Number', 'Quantity', 'Net sales']}\n          rows={rows}\n          totals={['', '', '', 255, '$155,830.00']}\n        />\n      </Card>\n    </Page>\n  );\n}",
    "description": "Use to help merchants find relevant, finer grained data sets."
  },
  "DataTableWithAllOfItsElements": {
    "prefix": [
      "PEDataTableWithAllOfItsElements"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Link, Page, Card, DataTable} from '../src';\n\nexport function FullDataTableExample() {\n  const [sortedRows, setSortedRows] = useState(null);\n\n  const initiallySortedRows = [\n    [\n      <Link url=\"https://www.example.com\" key=\"emerald-silk-gown\">\n        Emerald Silk Gown\n      </Link>,\n      '$875.00',\n      124689,\n      140,\n      '$121,500.00',\n    ],\n    [\n      <Link url=\"https://www.example.com\" key=\"mauve-cashmere-scarf\">\n        Mauve Cashmere Scarf\n      </Link>,\n      '$230.00',\n      124533,\n      83,\n      '$19,090.00',\n    ],\n    [\n      <Link url=\"https://www.example.com\" key=\"navy-merino-wool\">\n        Navy Merino Wool Blazer with khaki chinos and yellow belt\n      </Link>,\n      '$445.00',\n      124518,\n      32,\n      '$14,240.00',\n    ],\n  ];\n\n  const rows = sortedRows ? sortedRows : initiallySortedRows;\n  const handleSort = useCallback(\n    (index, direction) => setSortedRows(sortCurrency(rows, index, direction)),\n    [rows],\n  );\n\n  return (\n    <Page title=\"Sales by product\">\n      <Card>\n        <DataTable\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={[\n            'Product',\n            'Price',\n            'SKU Number',\n            'Net quantity',\n            'Net sales',\n          ]}\n          rows={rows}\n          totals={['', '', '', 255, '$155,830.00']}\n          sortable={[false, true, false, false, true]}\n          defaultSortDirection=\"descending\"\n          initialSortColumnIndex={4}\n          onSort={handleSort}\n          footerContent={`Showing ${rows.length} of ${rows.length} results`}\n        />\n      </Card>\n    </Page>\n  );\n\n  function sortCurrency(rows, index, direction) {\n    return [...rows].sort((rowA, rowB) => {\n      const amountA = parseFloat(rowA[index].substring(1));\n      const amountB = parseFloat(rowB[index].substring(1));\n\n      return direction === 'descending' ? amountB - amountA : amountA - amountB;\n    });\n  }\n}",
    "description": "Use as a broad example that includes most props available to data table."
  },
  "DefaultDescriptionList": {
    "prefix": [
      "PEDefaultDescriptionList"
    ],
    "body": "import React from 'react';\nimport {DescriptionList} from '../src';\n\nexport function Playground() {\n  return (\n    <DescriptionList\n  items={[\n    {\n      term: 'Logistics',\n      description:\n        'The management of products or other resources as they travel between a point of origin and a destination.',\n    },\n    {\n      term: 'Sole proprietorship',\n      description:\n        'A business structure where a single individual both owns and runs the company.',\n    },\n    {\n      term: 'Discount code',\n      description:\n        'A series of numbers and/or letters that an online shopper may enter at checkout to get a discount or special offer.',\n    },\n  ]}\n/>\n  );\n}",
    "description": "Use when you need to present merchants with a list of items or terms alongside descriptions and explanations."
  },
  "ExtraLarge": {
    "prefix": [
      "PEExtraLarge"
    ],
    "body": "import React from 'react';\nimport {DisplayText} from '../src';\n\nexport function Playground() {\n  return (\n    <DisplayText size=\"extraLarge\">Good evening, Dominic.</DisplayText>\n  );\n}",
    "description": "Use this size sparingly and never multiple times on the same page."
  },
  "Large": {
    "prefix": [
      "PELarge"
    ],
    "body": "import React from 'react';\nimport {DisplayText} from '../src';\n\nexport function Playground() {\n  return (\n    <DisplayText size=\"large\">Good evening, Dominic.</DisplayText>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse for display text that’s more important than the medium size, but less important than extra large."
  },
  "Medium": {
    "prefix": [
      "PEMedium"
    ],
    "body": "import React from 'react';\nimport {DisplayText} from '../src';\n\nexport function Playground() {\n  return (\n    <DisplayText size=\"medium\">Good evening, Dominic.</DisplayText>\n  );\n}",
    "description": "Use for display text that’s more important than the small size, but less important than large."
  },
  "Small": {
    "prefix": [
      "PESmall"
    ],
    "body": "import React from 'react';\nimport {DisplayText} from '../src';\n\nexport function Playground() {\n  return (\n    <DisplayText size=\"small\">Good evening, Dominic.</DisplayText>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse for text that would otherwise use body text, but that needs to scale with other display text."
  },
  "DropZoneWithFileUpload": {
    "prefix": [
      "PEDropZoneWithFileUpload"
    ],
    "body": "import React from 'react';\nimport {DropZone, Stack, Thumbnail, Caption} from '../src';\n\nexport function Playground() {\n  return (\n    class DropZoneExample extends React.Component {\n  state = {\n    files: [],\n  };\n\n  render() {\n    const {files} = this.state;\n    const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n    const fileUpload = !files.length && <DropZone.FileUpload />;\n    const uploadedFiles = files.length > 0 && (\n      <Stack vertical>\n        {files.map((file, index) => (\n          <Stack alignment=\"center\" key={index}>\n            <Thumbnail\n              size=\"small\"\n              alt={file.name}\n              source={\n                validImageTypes.indexOf(file.type) > 0\n                  ? window.URL.createObjectURL(file)\n                  : 'https://cdn.shopify.com/s/files/1/0757/9955/files/New_Post.png?12678548500147524304'\n              }\n            />\n            <div>\n              {file.name} <Caption>{file.size} bytes</Caption>\n            </div>\n          </Stack>\n        ))}\n      </Stack>\n    );\n\n    return (\n      <DropZone\n        onDrop={(files, acceptedFiles, rejectedFiles) => {\n          this.setState({files: [...this.state.files, ...acceptedFiles]});\n        }}\n      >\n        {uploadedFiles}\n        {fileUpload}\n      </DropZone>\n    );\n  }\n}\n  );\n}",
    "description": "Use to allow merchants to upload files. They can drag and drop files into the dashed area, or upload traditionally by clicking the “Add file” button or anywhere inside the dashed area."
  },
  "DropZoneWithALabel": {
    "prefix": [
      "PEDropZoneWithALabel"
    ],
    "body": "import React from 'react';\nimport {DropZone} from '../src';\n\nexport function Playground() {\n  return (\n    <DropZone label=\"Theme files\">\n  <DropZone.FileUpload />\n</DropZone>\n  );\n}",
    "description": "Use to pair with a label for better accessibility."
  },
  "DropZoneWithImageFileUpload": {
    "prefix": [
      "PEDropZoneWithImageFileUpload"
    ],
    "body": "import React from 'react';\nimport {DropZone, Stack, Thumbnail, Caption, Banner, List} from '../src';\n\nexport function Playground() {\n  return (\n    class DropZoneExample extends React.Component {\n  state = {\n    files: [],\n    rejectedFiles: [],\n    hasError: false,\n  };\n\n  render() {\n    const {files, hasError, rejectedFiles} = this.state;\n\n    const fileUpload = !files.length && <DropZone.FileUpload />;\n    const uploadedFiles = files.length > 0 && (\n      <Stack vertical>\n        {files.map((file, index) => (\n          <Stack alignment=\"center\" key={index}>\n            <Thumbnail\n              size=\"small\"\n              alt={file.name}\n              source={window.URL.createObjectURL(file)}\n            />\n            <div>\n              {file.name} <Caption>{file.size} bytes</Caption>\n            </div>\n          </Stack>\n        ))}\n      </Stack>\n    );\n\n    const errorMessage = hasError && (\n      <Banner\n        title=\"The following images couldn’t be uploaded:\"\n        status=\"critical\"\n      >\n        <List type=\"bullet\">\n          {rejectedFiles.map((file, index) => (\n            <List.Item key={index}>\n              {`\"${file.name}\" is not supported. File type must be .gif, .jpg, .png or .svg.`}\n            </List.Item>\n          ))}\n        </List>\n      </Banner>\n    );\n\n    return (\n      <Stack vertical>\n        {errorMessage}\n        <DropZone\n          accept=\"image/*\"\n          type=\"image\"\n          onDrop={(files, acceptedFiles, rejectedFiles) => {\n            this.setState({\n              files: [...this.state.files, ...acceptedFiles],\n              rejectedFiles: rejectedFiles,\n              hasError: rejectedFiles.length > 0,\n            });\n          }}\n        >\n          {uploadedFiles}\n          {fileUpload}\n        </DropZone>\n      </Stack>\n    );\n  }\n}\n  );\n}",
    "description": "Use for cases that accept image file formats."
  },
  "DropZoneWithDropOnPage": {
    "prefix": [
      "PEDropZoneWithDropOnPage"
    ],
    "body": "import React from 'react';\nimport {Stack, Thumbnail, Caption, Page, DropZone} from '../src';\n\nexport function Playground() {\n  return (\n    class DropZoneExample extends React.Component {\n  state = {\n    files: [],\n  };\n\n  render() {\n    const {files} = this.state;\n    const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n    const uploadedFiles = files.length > 0 && (\n      <Stack vertical>\n        {files.map((file, index) => (\n          <Stack alignment=\"center\" key={index}>\n            <Thumbnail\n              size=\"small\"\n              alt={file.name}\n              source={\n                validImageTypes.indexOf(file.type) > 0\n                  ? window.URL.createObjectURL(file)\n                  : 'https://cdn.shopify.com/s/files/1/0757/9955/files/New_Post.png?12678548500147524304'\n              }\n            />\n            <div>\n              {file.name} <Caption>{file.size} bytes</Caption>\n            </div>\n          </Stack>\n        ))}\n      </Stack>\n    );\n\n    return (\n      <Page\n        breadcrumbs={[{content: 'Products'}]}\n        title=\"Jar With Lock-Lid\"\n        primaryAction={{content: 'Save', disabled: true}}\n        secondaryActions={[\n          {content: 'Duplicate'},\n          {content: 'View on your store'},\n        ]}\n        pagination={{\n          hasPrevious: true,\n          hasNext: true,\n        }}\n      >\n        <DropZone\n          dropOnPage\n          onDrop={(files) => {\n            this.setState({files: [...this.state.files, ...files]});\n          }}\n        >\n          {uploadedFiles}\n        </DropZone>\n      </Page>\n    );\n  }\n}\n  );\n}",
    "description": "Use to accept files for upload when dropped anywhere on the page."
  },
  "DropZoneAcceptsOnlySVGFiles": {
    "prefix": [
      "PEDropZoneAcceptsOnlySVGFiles"
    ],
    "body": "import React from 'react';\nimport {Stack, Thumbnail, Caption, Banner, List, DropZone} from '../src';\n\nexport function Playground() {\n  return (\n    class DropZoneExample extends React.Component {\n  state = {\n    files: [],\n    rejectedFiles: [],\n    hasError: false,\n  };\n\n  render() {\n    const {files, hasError, rejectedFiles} = this.state;\n\n    const uploadedFiles = files.length > 0 && (\n      <Stack vertical>\n        {files.map((file, index) => (\n          <Stack alignment=\"center\" key={index}>\n            <Thumbnail\n              size=\"small\"\n              alt={file.name}\n              source={window.URL.createObjectURL(file)}\n            />\n            <div>\n              {file.name} <Caption>{file.size} bytes</Caption>\n            </div>\n          </Stack>\n        ))}\n      </Stack>\n    );\n\n    const errorMessage = hasError && (\n      <Banner\n        title=\"The following images couldn’t be uploaded:\"\n        status=\"critical\"\n      >\n        <List type=\"bullet\">\n          {rejectedFiles.map((file, index) => (\n            <List.Item key={index}>\n              {`\"${file.name}\" is not supported. File type must be .svg.`}\n            </List.Item>\n          ))}\n        </List>\n      </Banner>\n    );\n\n    return (\n      <Stack vertical>\n        {errorMessage}\n        <DropZone\n          accept=\"image/svg+xml\"\n          type=\"image\"\n          errorOverlayText=\"File type must be .svg\"\n          onDrop={(files, acceptedFiles, rejectedFiles) => {\n            this.setState({\n              files: [...this.state.files, ...acceptedFiles],\n              rejectedFiles: rejectedFiles,\n              hasError: rejectedFiles.length > 0,\n            });\n          }}\n        >\n          {uploadedFiles}\n        </DropZone>\n      </Stack>\n    );\n  }\n}\n  );\n}",
    "description": "Use to accept only SVG files."
  },
  "NestedDropZone": {
    "prefix": [
      "PENestedDropZone"
    ],
    "body": "import React from 'react';\nimport {DropZone, Stack, Thumbnail, Caption, Card} from '../src';\n\nexport function Playground() {\n  return (\n    class DropZoneExample extends React.Component {\n  state = {\n    files: [],\n  };\n\n  render() {\n    const {files} = this.state;\n    const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n    const fileUpload = !files.length && <DropZone.FileUpload />;\n    const uploadedFiles = files.length > 0 && (\n      <Stack vertical>\n        {files.map((file, index) => (\n          <Stack alignment=\"center\" key={index}>\n            <Thumbnail\n              size=\"small\"\n              alt={file.name}\n              source={\n                validImageTypes.indexOf(file.type) > 0\n                  ? window.URL.createObjectURL(file)\n                  : 'https://cdn.shopify.com/s/files/1/0757/9955/files/New_Post.png?12678548500147524304'\n              }\n            />\n            <div>\n              {file.name} <Caption>{file.size} bytes</Caption>\n            </div>\n          </Stack>\n        ))}\n      </Stack>\n    );\n\n    return (\n      <DropZone\n        outline={false}\n        onDrop={(files) => {\n          this.setState({files: [...this.state.files, ...files]});\n        }}\n      >\n        <Card sectioned>\n          <DropZone onClick={() => {}}>\n            {uploadedFiles}\n            {fileUpload}\n          </DropZone>\n        </Card>\n      </DropZone>\n    );\n  }\n}\n  );\n}",
    "description": "Use to allow merchants to upload files in a wider area than the visible drop zone."
  },
  "Medium-sizedDropZone": {
    "prefix": [
      "PEMedium-sizedDropZone"
    ],
    "body": "import React from 'react';\nimport {DropZone} from '../src';\n\nexport function Playground() {\n  return (\n    <div style={{width: 114, height: 114}}>\n  <DropZone>\n    <DropZone.FileUpload />\n  </DropZone>\n</div>\n  );\n}",
    "description": "Use for cases with limited space. To improve usability, nest medium-sized drop zone in a larger drop zone with no outline. See the nested dropzone example."
  },
  "Small-sizedDropZone": {
    "prefix": [
      "PESmall-sizedDropZone"
    ],
    "body": "import React from 'react';\nimport {DropZone} from '../src';\n\nexport function Playground() {\n  return (\n    <div style={{width: 50, height: 50}}>\n  <DropZone>\n    <DropZone.FileUpload />\n  </DropZone>\n</div>\n  );\n}",
    "description": "Use for cases with tight space constraints, such as variant thumbnails on the Product details page. To improve usability, nest small-sized drop zone in a larger drop zone with no outline. See the nested dropzone example."
  },
  "DropZoneWithCustomFileDialogTrigger": {
    "prefix": [
      "PEDropZoneWithCustomFileDialogTrigger"
    ],
    "body": "import React from 'react';\nimport {Stack, Thumbnail, Caption, Card, DropZone} from '../src';\n\nexport function Playground() {\n  return (\n    class DropZoneExample extends React.Component {\n  state = {\n    openFileDialog: false,\n    files: [],\n  };\n\n  render() {\n    const {files, openFileDialog} = this.state;\n    const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n    const uploadedFiles = files.length > 0 && (\n      <Stack vertical>\n        {files.map((file, index) => (\n          <Stack alignment=\"center\" key={index}>\n            <Thumbnail\n              size=\"small\"\n              alt={file.name}\n              source={\n                validImageTypes.indexOf(file.type) > 0\n                  ? window.URL.createObjectURL(file)\n                  : 'https://cdn.shopify.com/s/files/1/0757/9955/files/New_Post.png?12678548500147524304'\n              }\n            />\n            <div>\n              {file.name} <Caption>{file.size} bytes</Caption>\n            </div>\n          </Stack>\n        ))}\n      </Stack>\n    );\n\n    return (\n      <Card\n        sectioned\n        title=\"Product Images\"\n        actions={[\n          {\n            content: 'Upload Image',\n            onAction: () => {\n              this.setState({openFileDialog: true});\n            },\n          },\n        ]}\n      >\n        <DropZone\n          openFileDialog={openFileDialog}\n          onDrop={(files) => {\n            this.setState({files: [...this.state.files, ...files]});\n          }}\n          onFileDialogClose={() => {\n            this.setState({openFileDialog: false});\n          }}\n        >\n          {uploadedFiles}\n        </DropZone>\n      </Card>\n    );\n  }\n}\n  );\n}",
    "description": "Use to trigger the file dialog from an action somewhere else on the page."
  },
  "DefaultEmptyState": {
    "prefix": [
      "PEDefaultEmptyState"
    ],
    "body": "import React from 'react';\nimport {EmptyState} from '../src';\n\nexport function Playground() {\n  return (\n    <EmptyState\n  heading=\"Manage your inventory transfers\"\n  action={{content: 'Add transfer'}}\n  secondaryAction={{content: 'Learn more', url: 'https://help.shopify.com'}}\n  image=\"https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg\"\n>\n  <p>Track and receive your incoming inventory from suppliers.</p>\n</EmptyState>\n  );\n}",
    "description": "Use to explain a single feature before merchants have used it."
  },
  "EmptyStateWithSubduedFooterContext": {
    "prefix": [
      "PEEmptyStateWithSubduedFooterContext"
    ],
    "body": "import React from 'react';\nimport {EmptyState, Link} from '../src';\n\nexport function Playground() {\n  return (\n    <EmptyState\n  heading=\"Manage your inventory transfers\"\n  action={{content: 'Add transfer'}}\n  secondaryAction={{content: 'Learn more', url: 'https://help.shopify.com'}}\n  footerContent={\n    <p>\n      If you don’t want to add a transfer, you can import your inventory from{' '}\n      <Link monochrome url=\"/settings\">\n        settings\n      </Link>\n      .\n    </p>\n  }\n  image=\"https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg\"\n>\n  <p>Track and receive your incoming inventory from suppliers.</p>\n</EmptyState>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse to provide additional but non-critical context for a new product or feature. Can also be used to include a subdued call to action for secondary or tertiary actions."
  },
  "ExceptionListWithIcon": {
    "prefix": [
      "PEExceptionListWithIcon"
    ],
    "body": "import React from 'react';\nimport {ExceptionList} from '../src';\n\nexport function Playground() {\n  return (\n    <ExceptionList\n  items={[\n    {\n      icon: NoteMinor,\n      description: 'This customer is awesome. Make sure to treat them right!',\n    },\n  ]}\n/>\n  );\n}",
    "description": "Use icons to add clarity or assist in visualizing the meaning"
  },
  "FooterHelpBox": {
    "prefix": [
      "PEFooterHelpBox"
    ],
    "body": "import React from 'react';\nimport {FooterHelp, Link} from '../src';\n\nexport function Playground() {\n  return (\n    <FooterHelp>\n  Learn more about{' '}\n  <Link url=\"https://help.shopify.com/manual/orders/fulfill-orders\">\n    fulfilling orders\n  </Link>\n</FooterHelp>\n  );\n}",
    "description": "Use to direct merchants to more information related to the product or feature they’re working on."
  },
  "CustomOnSubmit": {
    "prefix": [
      "PECustomOnSubmit"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Form, FormLayout, Checkbox, TextField, Button} from '../src';\n\nexport function FormOnSubmitExample() {\n  const [newsletter, setNewsletter] = useState(false);\n  const [email, setEmail] = useState('');\n\n  const handleSubmit = useCallback((_event) => {\n    setEmail('');\n    setNewsletter(false);\n  }, []);\n\n  const handleNewsLetterChange = useCallback(\n    (value) => setNewsletter(value),\n    [],\n  );\n\n  const handleEmailChange = useCallback((value) => setEmail(value), []);\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormLayout>\n        <Checkbox\n          label=\"Sign up for the Polaris newsletter\"\n          checked={newsletter}\n          onChange={handleNewsLetterChange}\n        />\n\n        <TextField\n          value={email}\n          onChange={handleEmailChange}\n          label=\"Email\"\n          type=\"email\"\n          helpText={\n            <span>\n              We’ll use this email address to inform you on future changes to\n              Polaris.\n            </span>\n          }\n        />\n\n        <Button submit>Submit</Button>\n      </FormLayout>\n    </Form>\n  );\n}",
    "description": "Use onSubmit as a callback for when your form is submitted."
  },
  "FormWithoutNativeValidation": {
    "prefix": [
      "PEFormWithoutNativeValidation"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Form, FormLayout, TextField, Button} from '../src';\n\nexport function FormWithoutNativeValidationExample() {\n  const [url, setUrl] = useState('');\n\n  const handleSubmit = useCallback((_event) => setUrl(''), []);\n\n  const handleUrlChange = useCallback((value) => setUrl(value), []);\n\n  return (\n    <Form noValidate onSubmit={handleSubmit}>\n      <FormLayout>\n        <TextField\n          value={url}\n          onChange={handleUrlChange}\n          label=\"App URL\"\n          type=\"url\"\n        />\n\n        <Button submit>Submit</Button>\n      </FormLayout>\n    </Form>\n  );\n}",
    "description": "Use in forms to toggle native form validation."
  },
  "DefaultFormLayout": {
    "prefix": [
      "PEDefaultFormLayout"
    ],
    "body": "import React from 'react';\nimport {FormLayout, TextField} from '../src';\n\nexport function Playground() {\n  return (\n    <FormLayout>\n  <TextField label=\"Store name\" onChange={() => {}} />\n  <TextField type=\"email\" label=\"Account email\" onChange={() => {}} />\n</FormLayout>\n  );\n}",
    "description": "Use to stack form fields vertically, which makes them easier to scan and complete."
  },
  "FieldGroup": {
    "prefix": [
      "PEFieldGroup"
    ],
    "body": "import React from 'react';\nimport {FormLayout, TextField} from '../src';\n\nexport function Playground() {\n  return (\n    <FormLayout>\n  <FormLayout.Group>\n    <TextField type=\"number\" label=\"Minimum order\" onChange={() => {}} />\n    <TextField type=\"number\" label=\"Maximum order\" onChange={() => {}} />\n  </FormLayout.Group>\n</FormLayout>\n  );\n}",
    "description": "Use field groups to arrange multiple fields in a row.\n\nWorks best for familiar layouts such as a row of city, state, and zip code fields. Use caution when arranging unrelated fields next to each other as this makes fields easier to miss.\n\nField groups will wrap automatically on smaller screens."
  },
  "CondensedFieldGroup": {
    "prefix": [
      "PECondensedFieldGroup"
    ],
    "body": "import React from 'react';\nimport {FormLayout, TextField} from '../src';\n\nexport function Playground() {\n  return (\n    <FormLayout>\n  <FormLayout.Group condensed>\n    <TextField label=\"Length\" onChange={() => {}} />\n    <TextField label=\"Width\" onChange={() => {}} />\n    <TextField label=\"Height\" onChange={() => {}} />\n    <TextField label=\"Unit\" onChange={() => {}} />\n  </FormLayout.Group>\n</FormLayout>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nFor very short inputs, the width of the inputs may be reduced in order to fit more fields in the row."
  },
  "FrameInAStand-aloneApplication": {
    "prefix": [
      "PEFrameInAStand-aloneApplication"
    ],
    "body": "import React, {useRef, useState, useCallback} from 'react';\nimport {Toast, ContextualSaveBar, TopBar, Card, ActionList, Navigation, Loading, Page, Layout, FormLayout, TextField, SkeletonPage, TextContainer, SkeletonDisplayText, SkeletonBodyText, Modal, AppProvider, Frame} from '../src';\n\nexport function FrameExample() {\n  const defaultState = useRef({\n    emailFieldValue: 'dharma@jadedpixel.com',\n    nameFieldValue: 'Jaded Pixel',\n  });\n  const skipToContentRef = useRef(null);\n\n  const [toastActive, setToastActive] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDirty, setIsDirty] = useState(false);\n  const [searchActive, setSearchActive] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n  const [userMenuActive, setUserMenuActive] = useState(false);\n  const [mobileNavigationActive, setMobileNavigationActive] = useState(false);\n  const [modalActive, setModalActive] = useState(false);\n  const [nameFieldValue, setNameFieldValue] = useState(\n    defaultState.current.nameFieldValue,\n  );\n  const [emailFieldValue, setEmailFieldValue] = useState(\n    defaultState.current.emailFieldValue,\n  );\n  const [storeName, setStoreName] = useState(\n    defaultState.current.nameFieldValue,\n  );\n  const [supportSubject, setSupportSubject] = useState('');\n  const [supportMessage, setSupportMessage] = useState('');\n\n  const handleSubjectChange = useCallback(\n    (value) => setSupportSubject(value),\n    [],\n  );\n  const handleMessageChange = useCallback(\n    (value) => setSupportMessage(value),\n    [],\n  );\n  const handleDiscard = useCallback(() => {\n    setEmailFieldValue(defaultState.current.emailFieldValue);\n    setNameFieldValue(defaultState.current.nameFieldValue);\n    setIsDirty(false);\n  }, []);\n  const handleSave = useCallback(() => {\n    defaultState.current.nameFieldValue = nameFieldValue;\n    defaultState.current.emailFieldValue = emailFieldValue;\n\n    setIsDirty(false);\n    setToastActive(true);\n    setStoreName(defaultState.current.nameFieldValue);\n  }, [emailFieldValue, nameFieldValue]);\n  const handleNameFieldChange = useCallback((value) => {\n    setNameFieldValue(value);\n    value && setIsDirty(true);\n  }, []);\n  const handleEmailFieldChange = useCallback((value) => {\n    setEmailFieldValue(value);\n    value && setIsDirty(true);\n  }, []);\n  const handleSearchResultsDismiss = useCallback(() => {\n    setSearchActive(false);\n    setSearchValue('');\n  }, []);\n  const handleSearchFieldChange = useCallback((value) => {\n    setSearchValue(value);\n    setSearchActive(value.length > 0);\n  }, []);\n  const toggleToastActive = useCallback(\n    () => setToastActive((toastActive) => !toastActive),\n    [],\n  );\n  const toggleUserMenuActive = useCallback(\n    () => setUserMenuActive((userMenuActive) => !userMenuActive),\n    [],\n  );\n  const toggleMobileNavigationActive = useCallback(\n    () =>\n      setMobileNavigationActive(\n        (mobileNavigationActive) => !mobileNavigationActive,\n      ),\n    [],\n  );\n  const toggleIsLoading = useCallback(\n    () => setIsLoading((isLoading) => !isLoading),\n    [],\n  );\n  const toggleModalActive = useCallback(\n    () => setModalActive((modalActive) => !modalActive),\n    [],\n  );\n\n  const toastMarkup = toastActive ? (\n    <Toast onDismiss={toggleToastActive} content=\"Changes saved\" />\n  ) : null;\n\n  const userMenuActions = [\n    {\n      items: [{content: 'Community forums'}],\n    },\n  ];\n\n  const contextualSaveBarMarkup = isDirty ? (\n    <ContextualSaveBar\n      message=\"Unsaved changes\"\n      saveAction={{\n        onAction: handleSave,\n      }}\n      discardAction={{\n        onAction: handleDiscard,\n      }}\n    />\n  ) : null;\n\n  const userMenuMarkup = (\n    <TopBar.UserMenu\n      actions={userMenuActions}\n      name=\"Dharma\"\n      detail={storeName}\n      initials=\"D\"\n      open={userMenuActive}\n      onToggle={toggleUserMenuActive}\n    />\n  );\n\n  const searchResultsMarkup = (\n    <Card>\n      <ActionList\n        items={[\n          {content: 'Shopify help center'},\n          {content: 'Community forums'},\n        ]}\n      />\n    </Card>\n  );\n\n  const searchFieldMarkup = (\n    <TopBar.SearchField\n      onChange={handleSearchFieldChange}\n      value={searchValue}\n      placeholder=\"Search\"\n    />\n  );\n  console.log(mobileNavigationActive);\n  const topBarMarkup = (\n    <TopBar\n      showNavigationToggle\n      userMenu={userMenuMarkup}\n      searchResultsVisible={searchActive}\n      searchField={searchFieldMarkup}\n      searchResults={searchResultsMarkup}\n      onSearchResultsDismiss={handleSearchResultsDismiss}\n      onNavigationToggle={toggleMobileNavigationActive}\n    />\n  );\n\n  const navigationMarkup = (\n    <Navigation location=\"/\">\n      <Navigation.Section\n        items={[\n          {\n            label: 'Back to Shopify',\n            icon: ArrowLeftMinor,\n          },\n        ]}\n      />\n      <Navigation.Section\n        separator\n        title=\"Jaded Pixel App\"\n        items={[\n          {\n            label: 'Dashboard',\n            icon: HomeMajorMonotone,\n            onClick: toggleIsLoading,\n          },\n          {\n            label: 'Jaded Pixel Orders',\n            icon: OrdersMajorTwotone,\n            onClick: toggleIsLoading,\n          },\n        ]}\n        action={{\n          icon: ConversationMinor,\n          accessibilityLabel: 'Contact support',\n          onClick: toggleModalActive,\n        }}\n      />\n    </Navigation>\n  );\n\n  const loadingMarkup = isLoading ? <Loading /> : null;\n\n  const skipToContentTarget = (\n    <a id=\"SkipToContentTarget\" ref={skipToContentRef} tabIndex={-1} />\n  );\n\n  const actualPageMarkup = (\n    <Page title=\"Account\">\n      <Layout>\n        {skipToContentTarget}\n        <Layout.AnnotatedSection\n          title=\"Account details\"\n          description=\"Jaded Pixel will use this as your account information.\"\n        >\n          <Card sectioned>\n            <FormLayout>\n              <TextField\n                label=\"Full name\"\n                value={nameFieldValue}\n                onChange={handleNameFieldChange}\n              />\n              <TextField\n                type=\"email\"\n                label=\"Email\"\n                value={emailFieldValue}\n                onChange={handleEmailFieldChange}\n              />\n            </FormLayout>\n          </Card>\n        </Layout.AnnotatedSection>\n      </Layout>\n    </Page>\n  );\n\n  const loadingPageMarkup = (\n    <SkeletonPage>\n      <Layout>\n        <Layout.Section>\n          <Card sectioned>\n            <TextContainer>\n              <SkeletonDisplayText size=\"small\" />\n              <SkeletonBodyText lines={9} />\n            </TextContainer>\n          </Card>\n        </Layout.Section>\n      </Layout>\n    </SkeletonPage>\n  );\n\n  const pageMarkup = isLoading ? loadingPageMarkup : actualPageMarkup;\n\n  const modalMarkup = (\n    <Modal\n      open={modalActive}\n      onClose={toggleModalActive}\n      title=\"Contact support\"\n      primaryAction={{\n        content: 'Send',\n        onAction: toggleModalActive,\n      }}\n    >\n      <Modal.Section>\n        <FormLayout>\n          <TextField\n            label=\"Subject\"\n            value={supportSubject}\n            onChange={handleSubjectChange}\n          />\n          <TextField\n            label=\"Message\"\n            value={supportMessage}\n            onChange={handleMessageChange}\n            multiline\n          />\n        </FormLayout>\n      </Modal.Section>\n    </Modal>\n  );\n\n  const theme = {\n    colors: {\n      topBar: {\n        background: '#357997',\n      },\n    },\n    logo: {\n      width: 124,\n      topBarSource:\n        'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999',\n      contextualSaveBarSource:\n        'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999',\n      url: 'http://jadedpixel.com',\n      accessibilityLabel: 'Jaded Pixel',\n    },\n  };\n\n  return (\n    <div style={{height: '500px'}}>\n      <AppProvider\n        theme={theme}\n        i18n={{\n          Polaris: {\n            Avatar: {\n              label: 'Avatar',\n              labelWithInitials: 'Avatar with initials {initials}',\n            },\n            ContextualSaveBar: {\n              save: 'Save',\n              discard: 'Discard',\n            },\n            TextField: {\n              characterCount: '{count} characters',\n            },\n            TopBar: {\n              toggleMenuLabel: 'Toggle menu',\n\n              SearchField: {\n                clearButtonLabel: 'Clear',\n                search: 'Search',\n              },\n            },\n            Modal: {\n              iFrameTitle: 'body markup',\n            },\n            Frame: {\n              skipToContent: 'Skip to content',\n              Navigation: {\n                closeMobileNavigationLabel: 'Close navigation',\n              },\n            },\n          },\n        }}\n      >\n        <Frame\n          topBar={topBarMarkup}\n          navigation={navigationMarkup}\n          showMobileNavigation={mobileNavigationActive}\n          onNavigationDismiss={toggleMobileNavigationActive}\n          skipToContentTarget={skipToContentRef.current}\n        >\n          {contextualSaveBarMarkup}\n          {loadingMarkup}\n          {pageMarkup}\n          {toastMarkup}\n          {modalMarkup}\n        </Frame>\n      </AppProvider>\n    </div>\n  );\n}",
    "description": "Use to present the frame structure and all of its elements."
  },
  "TypographicHeading": {
    "prefix": [
      "PETypographicHeading"
    ],
    "body": "import React from 'react';\nimport {Heading} from '../src';\n\nexport function Playground() {\n  return (\n    <Heading>Online store dashboard</Heading>\n  );\n}",
    "description": "Use for the title of each top-level page section."
  },
  "DefaultIcon": {
    "prefix": [
      "PEDefaultIcon"
    ],
    "body": "import React from 'react';\nimport {Icon} from '../src';\n\nexport function Playground() {\n  return (\n    <Icon source={CirclePlusMinor} />\n  );\n}",
    "description": "Use to visually communicate core parts of the product and available actions."
  },
  "UserProvidedIcon": {
    "prefix": [
      "PEUserProvidedIcon"
    ],
    "body": "import React from 'react';\nimport {Icon} from '../src';\n\nexport function Playground() {\n  return (\n    <Icon source=\"<svg viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'><path d='M10.707 17.707l5-5a.999.999 0 1 0-1.414-1.414L11 14.586V3a1 1 0 1 0-2 0v11.586l-3.293-3.293a.999.999 0 1 0-1.414 1.414l5 5a.999.999 0 0 0 1.414 0' /></svg>\" />\n  );\n}",
    "description": "Specify an SVG as a string to render it in an image tag, instead of an inline SVG to prevent script injection."
  },
  "Do": {
    "prefix": [
      "PEDo"
    ],
    "body": "import React from 'react';\nimport {Icon} from '../src';\n\nexport function Playground() {\n  return (\n    <Icon source={OrdersMajorTwotone} />\n<p>No orders yet</p>\n  );\n}",
    "description": "- Pair text and icons for clarity\n- Give the icon a text equivalent if its purpose isn’t conveyed in another way\n- Review our [alternative text](https://polaris.shopify.com/content/alternative-text) guidelines to make sure your use of icon works for all merchants"
  },
  "Don’t": {
    "prefix": [
      "PEDon’t"
    ],
    "body": "import React from 'react';\nimport {Icon} from '../src';\n\nexport function Playground() {\n  return (\n    <Icon source={CirclePlusMinor} accessibilityLabel=\"Circle plus icon\" />\n  );\n}",
    "description": "- Describe what the icon looks like\n- Include “icon” in the text equivalent\n- Duplicate adjacent text in the alternative text\n- Duplicate information provided programmatically"
  },
  "BasicInlineError": {
    "prefix": [
      "PEBasicInlineError"
    ],
    "body": "import React from 'react';\nimport {InlineError} from '../src';\n\nexport function Playground() {\n  return (\n    <InlineError message=\"Store name is required\" fieldID=\"myFieldID\" />\n  );\n}",
    "description": "Use when the merchant has entered invalid information into multiple fields inside of a form, or needs to be displayed in a non-standard position in the form layout."
  },
  "ListOfKeyboardShortcuts": {
    "prefix": [
      "PEListOfKeyboardShortcuts"
    ],
    "body": "import React from 'react';\nimport {KeyboardKey} from '../src';\n\nexport function Playground() {\n  return (\n    <KeyboardKey>Ctrl</KeyboardKey>\n  );\n}",
    "description": "Use to list a related set of keyboard shortcuts."
  },
  "One-columnLayout": {
    "prefix": [
      "PEOne-columnLayout"
    ],
    "body": "import React from 'react';\nimport {Layout, Card} from '../src';\n\nexport function Playground() {\n  return (\n    <Layout>\n  <Layout.Section>\n    <Card title=\"Online store dashboard\" sectioned>\n      <p>View a summary of your online store’s performance.</p>\n    </Card>\n  </Layout.Section>\n</Layout>\n  );\n}",
    "description": "Use to have a single section on its own in a full-width container. Use for simple pages and as a container for banners and other full-width content."
  },
  "TwoColumnsWithPrimaryAndSecondaryWidths": {
    "prefix": [
      "PETwoColumnsWithPrimaryAndSecondaryWidths"
    ],
    "body": "import React from 'react';\nimport {Layout, Card} from '../src';\n\nexport function Playground() {\n  return (\n    <Layout>\n  <Layout.Section>\n    <Card title=\"Order details\" sectioned>\n      <p>View a summary of your order.</p>\n    </Card>\n  </Layout.Section>\n  <Layout.Section secondary>\n    <Card title=\"Tags\" sectioned>\n      <p>Add tags to your order.</p>\n    </Card>\n  </Layout.Section>\n</Layout>\n  );\n}",
    "description": "Use to follow a normal section with a secondary section to create a 2/3 + 1/3 layout on detail pages (such as individual product or order pages). Can also be used on any page that needs to structure a lot of content. This layout stacks the columns on small screens."
  },
  "TwoColumnsWithEqualWidth": {
    "prefix": [
      "PETwoColumnsWithEqualWidth"
    ],
    "body": "import React from 'react';\nimport {Layout, Card, TextStyle, ResourceList, Thumbnail} from '../src';\n\nexport function Playground() {\n  return (\n    <Layout>\n  <Layout.Section oneHalf>\n    <Card title=\"Florida\" actions={[{content: 'Manage'}]}>\n      <Card.Section>\n        <TextStyle variation=\"subdued\">455 units available</TextStyle>\n      </Card.Section>\n      <Card.Section title=\"Items\">\n        <ResourceList\n          resourceName={{singular: 'product', plural: 'products'}}\n          items={[\n            {\n              id: 341,\n              url: 'produdcts/341',\n              name: 'Black & orange scarf',\n              sku: '9234194023',\n              quantity: '254',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg\"\n                  alt=\"Black orange scarf\"\n                />\n              ),\n            },\n            {\n              id: 256,\n              url: 'produdcts/256',\n              name: 'Tucan scarf',\n              sku: '9234194010',\n              quantity: '201',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/tucan-scarf_373x@2x.jpg\"\n                  alt=\"Tucan scarf\"\n                />\n              ),\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, sku, media, quantity} = item;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>SKU: {sku}</div>\n                <div>{quantity} available</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card.Section>\n    </Card>\n  </Layout.Section>\n  <Layout.Section oneHalf>\n    <Card title=\"Nevada\" actions={[{content: 'Manage'}]}>\n      <Card.Section>\n        <TextStyle variation=\"subdued\">301 units available</TextStyle>\n      </Card.Section>\n      <Card.Section title=\"Items\">\n        <ResourceList\n          resourceName={{singular: 'product', plural: 'products'}}\n          items={[\n            {\n              id: 342,\n              url: 'produdcts/342',\n              name: 'Black & orange scarf',\n              sku: '9234194023',\n              quantity: '100',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg\"\n                  alt=\"Black orange scarf\"\n                />\n              ),\n            },\n            {\n              id: 257,\n              url: 'produdcts/257',\n              name: 'Tucan scarf',\n              sku: '9234194010',\n              quantity: '201',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/tucan-scarf_373x@2x.jpg\"\n                  alt=\"Tucan scarf\"\n                />\n              ),\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, sku, media, quantity} = item;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>SKU: {sku}</div>\n                <div>{quantity} available</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card.Section>\n    </Card>\n  </Layout.Section>\n</Layout>\n  );\n}",
    "description": "Use to create a ½ + ½ layout. Can be used to display content of equal importance. This layout will stack the columns on small screens."
  },
  "ThreeColumnsWithEqualWidth": {
    "prefix": [
      "PEThreeColumnsWithEqualWidth"
    ],
    "body": "import React from 'react';\nimport {Layout, Card, TextStyle, ResourceList, Thumbnail} from '../src';\n\nexport function Playground() {\n  return (\n    <Layout>\n  <Layout.Section oneThird>\n    <Card title=\"Florida\" actions={[{content: 'Manage'}]}>\n      <Card.Section>\n        <TextStyle variation=\"subdued\">455 units available</TextStyle>\n      </Card.Section>\n      <Card.Section title=\"Items\">\n        <ResourceList\n          resourceName={{singular: 'product', plural: 'products'}}\n          items={[\n            {\n              id: 343,\n              url: 'produdcts/343',\n              name: 'Black & orange scarf',\n              sku: '9234194023',\n              quantity: '254',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg\"\n                  alt=\"Black orange scarf\"\n                />\n              ),\n            },\n            {\n              id: 258,\n              url: 'produdcts/258',\n              name: 'Tucan scarf',\n              sku: '9234194010',\n              quantity: '201',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/tucan-scarf_373x@2x.jpg\"\n                  alt=\"Tucan scarf\"\n                />\n              ),\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, sku, media, quantity} = item;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>SKU: {sku}</div>\n                <div>{quantity} available</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card.Section>\n    </Card>\n  </Layout.Section>\n  <Layout.Section oneThird>\n    <Card title=\"Nevada\" actions={[{content: 'Manage'}]}>\n      <Card.Section>\n        <TextStyle variation=\"subdued\">301 units available</TextStyle>\n      </Card.Section>\n      <Card.Section title=\"Items\">\n        <ResourceList\n          resourceName={{singular: 'product', plural: 'products'}}\n          items={[\n            {\n              id: 344,\n              url: 'produdcts/344',\n              name: 'Black & orange scarf',\n              sku: '9234194023',\n              quantity: '100',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg\"\n                  alt=\"Black orange scarf\"\n                />\n              ),\n            },\n            {\n              id: 259,\n              url: 'produdcts/259',\n              name: 'Tucan scarf',\n              sku: '9234194010',\n              quantity: '201',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/tucan-scarf_373x@2x.jpg\"\n                  alt=\"Tucan scarf\"\n                />\n              ),\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, sku, media, quantity} = item;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>SKU: {sku}</div>\n                <div>{quantity} available</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card.Section>\n    </Card>\n  </Layout.Section>\n  <Layout.Section oneThird>\n    <Card title=\"Minneapolis\" actions={[{content: 'Manage'}]}>\n      <Card.Section>\n        <TextStyle variation=\"subdued\">1931 units available</TextStyle>\n      </Card.Section>\n      <Card.Section title=\"Items\">\n        <ResourceList\n          resourceName={{singular: 'product', plural: 'products'}}\n          items={[\n            {\n              id: 345,\n              url: 'produdcts/345',\n              name: 'Black & orange scarf',\n              sku: '9234194023',\n              quantity: '1230',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg\"\n                  alt=\"Black orange scarf\"\n                />\n              ),\n            },\n            {\n              id: 260,\n              url: 'produdcts/260',\n              name: 'Tucan scarf',\n              sku: '9234194010',\n              quantity: '701',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/tucan-scarf_373x@2x.jpg\"\n                  alt=\"Tucan scarf\"\n                />\n              ),\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, sku, media, quantity} = item;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>SKU: {sku}</div>\n                <div>{quantity} available</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card.Section>\n    </Card>\n  </Layout.Section>\n</Layout>\n  );\n}",
    "description": "Use to create a ⅓ + ⅓ + ⅓ layout. Can be used to display content of equal importance. This layout will stack the columns on small screens."
  },
  "AnnotatedLayout": {
    "prefix": [
      "PEAnnotatedLayout"
    ],
    "body": "import React from 'react';\nimport {Layout, Card, FormLayout, TextField} from '../src';\n\nexport function Playground() {\n  return (\n    <Layout>\n  <Layout.AnnotatedSection\n    title=\"Store details\"\n    description=\"Shopify and your customers will use this information to contact you.\"\n  >\n    <Card sectioned>\n      <FormLayout>\n        <TextField label=\"Store name\" onChange={() => {}} />\n        <TextField type=\"email\" label=\"Account email\" onChange={() => {}} />\n      </FormLayout>\n    </Card>\n  </Layout.AnnotatedSection>\n</Layout>\n  );\n}",
    "description": "Use for settings pages. When settings are grouped thematically in annotated sections, the title and description on each section helps merchants quickly find the setting they’re looking for."
  },
  "DefaultLinks": {
    "prefix": [
      "PEDefaultLinks"
    ],
    "body": "import React from 'react';\nimport {Link} from '../src';\n\nexport function Playground() {\n  return (\n    <Link url=\"https://help.shopify.com/manual\">fulfilling orders</Link>\n  );\n}",
    "description": "Use for text links in larger spans of text."
  },
  "MonochromeLink": {
    "prefix": [
      "PEMonochromeLink"
    ],
    "body": "import React from 'react';\nimport {Link} from '../src';\n\nexport function Playground() {\n  return (\n    <Link monochrome url=\"https://help.shopify.com/manual\">\n  fulfilling orders\n</Link>\n  );\n}",
    "description": "Use for text links that are the same color as the surrounding text."
  },
  "MonochromeLinkInABanner": {
    "prefix": [
      "PEMonochromeLinkInABanner"
    ],
    "body": "import React from 'react';\nimport {Banner, Link} from '../src';\n\nexport function Playground() {\n  return (\n    <Banner>\n  Learn more about{' '}\n  <Link url=\"https://help.shopify.com/manual\">fulfilling orders</Link>\n</Banner>\n  );\n}",
    "description": "Monochrome styles will be applied to links rendered within a `Banner`."
  },
  "ExternalLink": {
    "prefix": [
      "PEExternalLink"
    ],
    "body": "import React from 'react';\nimport {Link} from '../src';\n\nexport function Playground() {\n  return (\n    <Link url=\"https://help.shopify.com/manual\" external>\n  Shopify Help Center\n</Link>\n  );\n}",
    "description": "Use for text links that should open in a new browser tab (or window, depending on the merchant’s browser settings). Use this only when opening a page in the same tab might disrupt the merchant’s workflow."
  },
  "BulletedList": {
    "prefix": [
      "PEBulletedList"
    ],
    "body": "import React from 'react';\nimport {List} from '../src';\n\nexport function Playground() {\n  return (\n    <List type=\"bullet\">\n  <List.Item>Yellow shirt</List.Item>\n  <List.Item>Red shirt</List.Item>\n  <List.Item>Green shirt</List.Item>\n</List>\n  );\n}",
    "description": "Use for a text-only list of related items that don’t need to be in a specific order and don’t require an icon or other indicator."
  },
  "NumberedList": {
    "prefix": [
      "PENumberedList"
    ],
    "body": "import React from 'react';\nimport {List} from '../src';\n\nexport function Playground() {\n  return (\n    <List type=\"number\">\n  <List.Item>First item</List.Item>\n  <List.Item>Second item</List.Item>\n  <List.Item>Third Item</List.Item>\n</List>\n  );\n}",
    "description": "Use for a text-only list of related items when an inherent order, priority, or sequence needs to be communicated."
  },
  "DefaultLoading": {
    "prefix": [
      "PEDefaultLoading"
    ],
    "body": "import React from 'react';\nimport {Frame, Loading} from '../src';\n\nexport function Playground() {\n  return (\n    <div style={{height: '100px'}}>\n  <Frame>\n    <Loading />\n  </Frame>\n</div>\n  );\n}",
    "description": "Use to indicate that the page is loading."
  },
  "BasicModal": {
    "prefix": [
      "PEBasicModal"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Button, Modal, TextContainer} from '../src';\n\nexport function ModalExample() {\n  const [active, setActive] = useState(true);\n\n  const handleChange = useCallback(() => setActive(!active), [active]);\n\n  return (\n    <div style={{height: '500px'}}>\n      <Button onClick={handleChange}>Open</Button>\n      <Modal\n        open={active}\n        onClose={handleChange}\n        title=\"Reach more shoppers with Instagram product tags\"\n        primaryAction={{\n          content: 'Add Instagram',\n          onAction: handleChange,\n        }}\n        secondaryActions={[\n          {\n            content: 'Learn more',\n            onAction: handleChange,\n          },\n        ]}\n      >\n        <Modal.Section>\n          <TextContainer>\n            <p>\n              Use Instagram posts to share your products with millions of\n              people. Let shoppers buy from your store without leaving\n              Instagram.\n            </p>\n          </TextContainer>\n        </Modal.Section>\n      </Modal>\n    </div>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse as the default option for a modal."
  },
  "ModalWithPrimaryAction": {
    "prefix": [
      "PEModalWithPrimaryAction"
    ],
    "body": "import React, {useState, useRef, useCallback} from 'react';\nimport {Button, Modal, Stack, TextContainer, TextField} from '../src';\n\nexport function ModalWithPrimaryActionExample() {\n  const DISCOUNT_LINK = 'https://polaris.shopify.com/';\n\n  const [active, setActive] = useState(true);\n  const node = useRef(null);\n\n  const handleClick = useCallback(() => {\n    node.current && node.current.input.focus();\n  }, []);\n\n  const handleFocus = useCallback(() => {\n    if (node.current == null) {\n      return;\n    }\n    node.current.input.select();\n    document.execCommand('copy');\n  }, []);\n\n  const toggleModal = useCallback(() => setActive((active) => !active), []);\n\n  return (\n    <div style={{height: '500px'}}>\n      <Button onClick={toggleModal}>Open</Button>\n      <Modal\n        open={active}\n        onClose={toggleModal}\n        title=\"Get a shareable link\"\n        primaryAction={{\n          content: 'Close',\n          onAction: toggleModal,\n        }}\n      >\n        <Modal.Section>\n          <Stack>\n            <Stack.Item>\n              <TextContainer>\n                <p>\n                  You can share this discount link with your customers via email\n                  or social media. Your discount will be automatically applied\n                  at checkout.\n                </p>\n              </TextContainer>\n            </Stack.Item>\n            <Stack.Item fill>\n              <TextField\n                ref={node}\n                label=\"Discount link\"\n                onFocus={handleFocus}\n                value={DISCOUNT_LINK}\n                onChange={() => {}}\n                connectedRight={\n                  <Button primary onClick={handleClick}>\n                    Copy link\n                  </Button>\n                }\n              />\n            </Stack.Item>\n          </Stack>\n        </Modal.Section>\n      </Modal>\n    </div>\n  );\n}",
    "description": "Use to let merchants take a key action."
  },
  "ModalWithPrimaryAndSecondaryActions": {
    "prefix": [
      "PEModalWithPrimaryAndSecondaryActions"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Button, Modal, Stack, ChoiceList} from '../src';\n\nexport function ModalWithPrimaryAndSecondaryActionsExample() {\n  const CURRENT_PAGE = 'current_page';\n  const ALL_CUSTOMERS = 'all_customers';\n  const SELECTED_CUSTOMERS = 'selected_customers';\n  const CSV_EXCEL = 'csv_excel';\n  const CSV_PLAIN = 'csv_plain';\n\n  const [active, setActive] = useState(true);\n  const [selectedExport, setSelectedExport] = useState([]);\n  const [selectedExportAs, setSelectedExportAs] = useState([]);\n\n  const handleModalChange = useCallback(() => setActive(!active), [active]);\n\n  const handleClose = () => {\n    handleModalChange();\n    handleSelectedExport([]);\n    handleSelectedExportAs([]);\n  };\n\n  const handleSelectedExport = useCallback(\n    (value) => setSelectedExport(value),\n    [],\n  );\n\n  const handleSelectedExportAs = useCallback(\n    (value) => setSelectedExportAs(value),\n    [],\n  );\n\n  return (\n    <div style={{height: '500px'}}>\n      <Button onClick={handleModalChange}>Open</Button>\n      <Modal\n        open={active}\n        onClose={handleClose}\n        title=\"Export customers\"\n        primaryAction={{\n          content: 'Export customers',\n          onAction: handleClose,\n        }}\n        secondaryActions={[\n          {\n            content: 'Cancel',\n            onAction: handleClose,\n          },\n        ]}\n      >\n        <Modal.Section>\n          <Stack vertical>\n            <Stack.Item>\n              <ChoiceList\n                title=\"Export\"\n                choices={[\n                  {label: 'Current page', value: CURRENT_PAGE},\n                  {label: 'All customers', value: ALL_CUSTOMERS},\n                  {label: 'Selected customers', value: SELECTED_CUSTOMERS},\n                ]}\n                selected={selectedExport}\n                onChange={handleSelectedExport}\n              />\n            </Stack.Item>\n            <Stack.Item>\n              <ChoiceList\n                title=\"Export as\"\n                choices={[\n                  {\n                    label:\n                      'CSV for Excel, Numbers, or other spreadsheet programs',\n                    value: CSV_EXCEL,\n                  },\n                  {label: 'Plain CSV file', value: CSV_PLAIN},\n                ]}\n                selected={selectedExportAs}\n                onChange={handleSelectedExportAs}\n              />\n            </Stack.Item>\n          </Stack>\n        </Modal.Section>\n      </Modal>\n    </div>\n  );\n}",
    "description": "Use to let merchants take key actions at the bottom of the modal."
  },
  "LargeModal": {
    "prefix": [
      "PELargeModal"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Button, Modal, Stack, DropZone, Checkbox} from '../src';\n\nexport function LargeModalExample() {\n  const [active, setActive] = useState(true);\n  const [checked, setChecked] = useState(false);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const handleCheckbox = useCallback((value) => setChecked(value), []);\n\n  return (\n    <div style={{height: '500px'}}>\n      <Button onClick={toggleActive}>Open</Button>\n      <Modal\n        large\n        open={active}\n        onClose={toggleActive}\n        title=\"Import customers by CSV\"\n        primaryAction={{\n          content: 'Import customers',\n          onAction: toggleActive,\n        }}\n        secondaryActions={[\n          {\n            content: 'Cancel',\n            onAction: toggleActive,\n          },\n        ]}\n      >\n        <Modal.Section>\n          <Stack vertical>\n            <DropZone\n              accept=\".csv\"\n              errorOverlayText=\"File type must be .csv\"\n              type=\"file\"\n              onDrop={() => {}}\n            >\n              <DropZone.FileUpload />\n            </DropZone>\n            <Checkbox\n              checked={checked}\n              label=\"Overwrite existing customers that have the same email or phone\"\n              onChange={handleCheckbox}\n            />\n          </Stack>\n        </Modal.Section>\n      </Modal>\n    </div>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when you need to increase the width of your modal."
  },
  "ModalWithoutATitle": {
    "prefix": [
      "PEModalWithoutATitle"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Button, Modal, TextContainer} from '../src';\n\nexport function ModalWithoutTitleExample() {\n  const [active, setActive] = useState(true);\n\n  const handleChange = useCallback(() => setActive(!active), [active]);\n\n  return (\n    <div style={{height: '500px'}}>\n      <Button onClick={handleChange}>Open</Button>\n      <Modal\n        open={active}\n        onClose={handleChange}\n        primaryAction={{\n          content: 'Add Instagram',\n          onAction: handleChange,\n        }}\n        secondaryActions={[\n          {\n            content: 'Learn more',\n            onAction: handleChange,\n          },\n        ]}\n      >\n        <Modal.Section>\n          <TextContainer>\n            <p>\n              Use Instagram posts to share your products with millions of\n              people. Let shoppers buy from your store without leaving\n              Instagram.\n            </p>\n          </TextContainer>\n        </Modal.Section>\n      </Modal>\n    </div>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nWe recommend you add a title to your modal, but you may leave it blank."
  },
  "ModalWithScrollListener": {
    "prefix": [
      "PEModalWithScrollListener"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Button, Modal, TextContainer} from '../src';\n\nexport function ModalWithScrollListenerExample() {\n  const [active, setActive] = useState(true);\n\n  const handleChange = useCallback(() => setActive(!active), [active]);\n\n  const handleScrollBottom = useCallback(() => alert('Scrolled to bottom'), []);\n\n  return (\n    <div style={{height: '500px'}}>\n      <Button onClick={handleChange}>Open</Button>\n      <Modal\n        open={active}\n        title=\"Scrollable content\"\n        onClose={handleChange}\n        onScrolledToBottom={handleScrollBottom}\n      >\n        {Array.from({length: 50}, (_, index) => (\n          <Modal.Section key={index}>\n            <TextContainer>\n              <p>Item #{index}</p>\n            </TextContainer>\n          </Modal.Section>\n        ))}\n      </Modal>\n    </div>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse to implement infinite scroll of modal content."
  },
  "BasicNavigation": {
    "prefix": [
      "PEBasicNavigation"
    ],
    "body": "import React from 'react';\nimport {Navigation} from '../src';\n\nexport function Playground() {\n  return (\n    <Navigation location=\"/\">\n  <Navigation.Section\n    items={[\n      {\n        url: '/path/to/place',\n        label: 'Home',\n        icon: HomeMajorMonotone,\n      },\n      {\n        url: '/path/to/place',\n        label: 'Orders',\n        icon: OrdersMajorTwotone,\n        badge: '15',\n      },\n      {\n        url: '/path/to/place',\n        label: 'Products',\n        icon: ProductsMajorTwotone,\n      },\n    ]}\n  />\n</Navigation>\n  );\n}",
    "description": "Use to present a navigation menu in the [frame](https://polaris.shopify.com/components/structure/frame)."
  },
  "NavigationWithASecondaryActionForASectionAndASectionTitle": {
    "prefix": [
      "PENavigationWithASecondaryActionForASectionAndASectionTitle"
    ],
    "body": "import React from 'react';\nimport {Navigation} from '../src';\n\nexport function Playground() {\n  return (\n    <Navigation location=\"/\">\n  <Navigation.Section\n    items={[\n      {\n        url: '/path/to/place',\n        label: 'Home',\n        icon: HomeMajorMonotone,\n      },\n      {\n        url: '/path/to/place',\n        label: 'Orders',\n        icon: OrdersMajorTwotone,\n      },\n      {\n        url: '/path/to/place',\n        label: 'Products',\n        icon: ProductsMajorTwotone,\n      },\n    ]}\n  />\n  <Navigation.Section\n    title=\"Sales channels\"\n    items={[\n      {\n        url: '/path/to/place',\n        label: 'Online Store',\n        icon: OnlineStoreMajorTwotone,\n      },\n    ]}\n    action={{\n      accessibilityLabel: 'Add sales channel',\n      icon: CirclePlusOutlineMinor,\n      onClick: () => {},\n    }}\n  />\n</Navigation>\n  );\n}",
    "description": "Use to present a secondary action, related to a section and to title the section."
  },
  "NavigationWithASecondaryActionForAnItem": {
    "prefix": [
      "PENavigationWithASecondaryActionForAnItem"
    ],
    "body": "import React from 'react';\nimport {Navigation} from '../src';\n\nexport function Playground() {\n  return (\n    <Navigation location=\"/\">\n  <Navigation.Section\n    items={[\n      {\n        url: '/path/to/place',\n        label: 'Home',\n        icon: HomeMajorMonotone,\n      },\n      {\n        url: '/path/to/place',\n        label: 'Orders',\n        icon: OrdersMajorTwotone,\n        secondaryAction: {\n          url: '/admin/orders/add',\n          accessibilityLabel: 'Add an order',\n          icon: CirclePlusOutlineMinor,\n        },\n      },\n      {\n        url: '/path/to/place',\n        label: 'Products',\n        icon: ProductsMajorTwotone,\n      },\n    ]}\n  />\n</Navigation>\n  );\n}",
    "description": "Use to add a different action for an item than the main action, like to view or add something."
  },
  "NavigationWithSectionRollup": {
    "prefix": [
      "PENavigationWithSectionRollup"
    ],
    "body": "import React from 'react';\nimport {Navigation} from '../src';\n\nexport function Playground() {\n  return (\n    <Navigation location=\"/\">\n  <Navigation.Section\n    items={[\n      {\n        url: '/path/to/place',\n        label: 'Home',\n        icon: HomeMajorMonotone,\n      },\n      {\n        url: '/path/to/place',\n        label: 'Orders',\n        icon: OrdersMajorTwotone,\n      },\n      {\n        url: '/path/to/place',\n        label: 'Products',\n        icon: ProductsMajorTwotone,\n      },\n    ]}\n    rollup={{\n      after: 2,\n      view: 'view',\n      hide: 'hide',\n      activePath: '/',\n    }}\n  />\n</Navigation>\n  );\n}",
    "description": "Use to show a limited number of items in a section with an option to expand the remaining items."
  },
  "NavigationWithSectionSeparator": {
    "prefix": [
      "PENavigationWithSectionSeparator"
    ],
    "body": "import React from 'react';\nimport {Navigation} from '../src';\n\nexport function Playground() {\n  return (\n    <Navigation location=\"/\">\n  <Navigation.Section\n    items={[\n      {\n        url: '/path/to/place',\n        label: 'Home',\n        icon: HomeMajorMonotone,\n      },\n      {\n        url: '/path/to/place',\n        label: 'Orders',\n        icon: OrdersMajorTwotone,\n      },\n      {\n        url: '/path/to/place',\n        label: 'Products',\n        icon: ProductsMajorTwotone,\n      },\n    ]}\n  />\n  <Navigation.Section\n    items={[\n      {\n        url: '/path/to/place',\n        label: 'Online Store',\n        icon: OnlineStoreMajorTwotone,\n      },\n    ]}\n    separator\n  />\n</Navigation>\n  );\n}",
    "description": "Use to add a horizontal line below the section."
  },
  "SimpleOptionList": {
    "prefix": [
      "PESimpleOptionList"
    ],
    "body": "import React, {useState} from 'react';\nimport {Card, OptionList} from '../src';\n\nexport function OptionListExample() {\n  const [selected, setSelected] = useState([]);\n\n  return (\n    <Card>\n      <OptionList\n        title=\"Inventory Location\"\n        onChange={setSelected}\n        options={[\n          {value: 'byward_market', label: 'Byward Market'},\n          {value: 'centretown', label: 'Centretown'},\n          {value: 'hintonburg', label: 'Hintonburg'},\n          {value: 'westboro', label: 'Westboro'},\n          {value: 'downtown', label: 'Downtown'},\n        ]}\n        selected={selected}\n      />\n    </Card>\n  );\n}",
    "description": "Use for a group of similar selectable items when only one should be selectable at once."
  },
  "MultipleOptionList": {
    "prefix": [
      "PEMultipleOptionList"
    ],
    "body": "import React, {useState} from 'react';\nimport {Card, OptionList} from '../src';\n\nexport function MultipleOptionListExample() {\n  const [selected, setSelected] = useState([]);\n\n  return (\n    <Card>\n      <OptionList\n        title=\"Manage sales channels availability\"\n        onChange={setSelected}\n        options={[\n          {value: 'online_store', label: 'Online Store'},\n          {value: 'messenger', label: 'Messenger'},\n          {value: 'facebook', label: 'Facebook'},\n          {value: 'wholesale', label: 'Wholesale'},\n          {value: 'buzzfeed', label: 'BuzzFeed'},\n        ]}\n        selected={selected}\n        allowMultiple\n      />\n    </Card>\n  );\n}",
    "description": "Use when you have a group of similar selectable items and more than one item can be selected at once."
  },
  "OptionListWithSections": {
    "prefix": [
      "PEOptionListWithSections"
    ],
    "body": "import React, {useState} from 'react';\nimport {Card, OptionList} from '../src';\n\nexport function OptionListWithSectionsExample() {\n  const [selected, setSelected] = useState([]);\n\n  return (\n    <Card>\n      <OptionList\n        onChange={setSelected}\n        sections={[\n          {\n            options: [\n              {value: 'type', label: 'Sale item type'},\n              {value: 'kind', label: 'Sale kind'},\n            ],\n          },\n          {\n            title: 'Traffic',\n            options: [\n              {value: 'source', label: 'Traffic referrer source'},\n              {value: 'host', label: 'Traffic referrer host'},\n              {value: 'path', label: 'Traffic referrer path'},\n            ],\n          },\n        ]}\n        selected={selected}\n        allowMultiple\n      />\n    </Card>\n  );\n}",
    "description": "Use sections when you have multiple groups of similar selectable items."
  },
  "OptionListInAPopover": {
    "prefix": [
      "PEOptionListInAPopover"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Button, Popover, OptionList} from '../src';\n\nexport function OptionListInPopoverExample() {\n  const [selected, setSelected] = useState([]);\n  const [popoverActive, setPopoverActive] = useState(true);\n\n  const togglePopoverActive = useCallback(\n    () => setPopoverActive((popoverActive) => !popoverActive),\n    [],\n  );\n\n  const activator = (\n    <Button onClick={togglePopoverActive} disclosure>\n      Options\n    </Button>\n  );\n\n  return (\n    <div style={{height: '275px'}}>\n      <Popover\n        active={popoverActive}\n        activator={activator}\n        onClose={togglePopoverActive}\n      >\n        <OptionList\n          title=\"Inventory Location\"\n          onChange={setSelected}\n          options={[\n            {value: 'byward_market', label: 'Byward Market'},\n            {value: 'centretown', label: 'Centretown'},\n            {value: 'hintonburg', label: 'Hintonburg'},\n            {value: 'westboro', label: 'Westboro'},\n            {value: 'downtown', label: 'Downtown'},\n          ]}\n          selected={selected}\n        />\n      </Popover>\n    </div>\n  );\n}",
    "description": "Use when a set of selections won’t fit in the available screen space."
  },
  "PageWithAllHeaderElements": {
    "prefix": [
      "PEPageWithAllHeaderElements"
    ],
    "body": "import React from 'react';\nimport {Page, Badge, Thumbnail} from '../src';\n\nexport function Playground() {\n  return (\n    <Page\n  breadcrumbs={[{content: 'Products', url: '/products'}]}\n  title=\"3/4 inch Leather pet collar\"\n  titleMetadata={<Badge status=\"success\">Paid</Badge>}\n  subtitle=\"Perfect for any pet\"\n  thumbnail={\n    <Thumbnail\n      source=\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\"\n      alt=\"Black leather pet collar\"\n    />\n  }\n  primaryAction={{content: 'Save', disabled: true}}\n  secondaryActions={[\n    {\n      content: 'Duplicate',\n      accessibilityLabel: 'Secondary action label',\n    },\n    {content: 'View on your store'},\n  ]}\n  actionGroups={[\n    {\n      title: 'Promote',\n      accessibilityLabel: 'Action group label',\n      actions: [\n        {\n          content: 'Share on Facebook',\n          accessibilityLabel: 'Individual action label',\n          onAction: () => {},\n        },\n      ],\n    },\n  ]}\n  pagination={{\n    hasPrevious: true,\n    hasNext: true,\n  }}\n  separator\n>\n  <p>Page content</p>\n</Page>\n  );\n}",
    "description": "<!-- content-for: web -->\n\nUse for detail pages, which should have pagination and breadcrumbs, and also often have several actions."
  },
  "PageWithoutPrimaryActionInHeader": {
    "prefix": [
      "PEPageWithoutPrimaryActionInHeader"
    ],
    "body": "import React from 'react';\nimport {Page, Card, Stack, Button} from '../src';\n\nexport function Playground() {\n  return (\n    <Page\n  breadcrumbs={[{content: 'Orders', url: '/orders'}]}\n  title=\"#1085\"\n  secondaryActions={[\n    {content: 'Print'},\n    {content: 'Unarchive'},\n    {content: 'Cancel order'},\n  ]}\n  pagination={{\n    hasPrevious: true,\n    hasNext: true,\n  }}\n>\n  <Card sectioned title=\"Fulfill order\">\n    <Stack alignment=\"center\">\n      <Stack.Item fill>\n        <p>Buy postage and ship remaining 2 items</p>\n      </Stack.Item>\n      <Button primary>Continue</Button>\n    </Stack>\n  </Card>\n</Page>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when a primary action functions better as part of the page content instead of in the page header."
  },
  "PageWithSubtitle": {
    "prefix": [
      "PEPageWithSubtitle"
    ],
    "body": "import React from 'react';\nimport {Page} from '../src';\n\nexport function Playground() {\n  return (\n    <Page\n  breadcrumbs={[{content: 'Products', url: '/products'}]}\n  title=\"Invoice\"\n  subtitle=\"Statement period: May 3, 2019 to June 2, 2019\"\n  secondaryActions={[{content: 'Download', icon: ArrowDownMinor}]}\n>\n  <p>Page content</p>\n</Page>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when the page title benefits from secondary content."
  },
  "PageWithTitleThumbnail": {
    "prefix": [
      "PEPageWithTitleThumbnail"
    ],
    "body": "import React from 'react';\nimport {Page, Badge, Thumbnail} from '../src';\n\nexport function Playground() {\n  return (\n    <Page\n  breadcrumbs={[{content: 'Products', url: '/products/31'}]}\n  title=\"3/4 inch Leather pet collar\"\n  titleMetadata={<Badge status=\"success\">Paid</Badge>}\n  thumbnail={\n    <Thumbnail\n      source=\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\"\n      alt=\"Black leather pet collar\"\n    />\n  }\n  secondaryActions={[\n    {\n      content: 'Duplicate',\n      icon: DuplicateMinor,\n    },\n    {\n      content: 'View',\n      icon: ViewMinor,\n    },\n  ]}\n  actionGroups={[\n    {\n      title: 'Promote',\n      actions: [{content: 'Share on Facebook'}],\n    },\n    {\n      title: 'More actions',\n      actions: [{content: 'Embed on a website'}],\n    },\n  ]}\n  pagination={{\n    hasPrevious: true,\n    hasNext: true,\n  }}\n>\n  <p>Page content</p>\n</Page>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when an image will help merchants identify the purpose of the page."
  },
  "PageWithExternalLink": {
    "prefix": [
      "PEPageWithExternalLink"
    ],
    "body": "import React from 'react';\nimport {Page} from '../src';\n\nexport function Playground() {\n  return (\n    <Page\n  title=\"Jar With Lock-Lid\"\n  primaryAction={{content: 'Save', disabled: true}}\n  secondaryActions={[\n    {\n      content: 'Promote',\n      external: true,\n      icon: ExternalMinor,\n      url:\n        'https://www.facebook.com/business/learn/facebook-page-build-audience',\n    },\n  ]}\n>\n  <p>Page Content</p>\n</Page>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when a secondary action links to another website. Actions marked external open in a new browser tab."
  },
  "PageWithoutPagination": {
    "prefix": [
      "PEPageWithoutPagination"
    ],
    "body": "import React from 'react';\nimport {Page} from '../src';\n\nexport function Playground() {\n  return (\n    <Page\n  breadcrumbs={[{content: 'Settings', url: '/settings'}]}\n  title=\"General\"\n  primaryAction={{content: 'Save'}}\n>\n  <p>Page content</p>\n</Page>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when the page doesn’t represent a list of objects or a detail view for an object."
  },
  "Full-widthPage": {
    "prefix": [
      "PEFull-widthPage"
    ],
    "body": "import React from 'react';\nimport {Page} from '../src';\n\nexport function Playground() {\n  return (\n    <Page\n  fullWidth\n  title=\"Orders\"\n  primaryAction={{content: 'Create order'}}\n  secondaryActions={[{content: 'Export'}]}\n  pagination={{\n    hasNext: true,\n  }}\n>\n  <p>Wide page content</p>\n</Page>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse for layouts that benefit from more screen width, such as wide tables or lists."
  },
  "NarrowWidthPage": {
    "prefix": [
      "PENarrowWidthPage"
    ],
    "body": "import React from 'react';\nimport {Page, Card, PageActions} from '../src';\n\nexport function Playground() {\n  return (\n    <Page\n  narrowWidth\n  breadcrumbs={[{content: 'Orders', url: '/orders'}]}\n  title=\"Add payment method\"\n  primaryAction={{content: 'Save', disabled: true}}\n>\n  <Card title=\"Credit card\" sectioned>\n    <p>Credit card information</p>\n  </Card>\n  <PageActions\n    primaryAction={{content: 'Save', disabled: true}}\n    secondaryActions={[{content: 'Delete'}]}\n  />\n</Page>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse a narrow width layout if the page supports a single unified task. When merchants must review the entire page contents to complete their goal, this layout helps focus their attention in a single path from top to bottom."
  },
  "PageWithActionGroups": {
    "prefix": [
      "PEPageWithActionGroups"
    ],
    "body": "import React from 'react';\nimport {Page} from '../src';\n\nexport function Playground() {\n  return (\n    <Page\n  title=\"Products\"\n  actionGroups={[\n    {\n      title: 'Promote',\n      actions: [\n        {\n          content: 'Share on Facebook',\n          onAction: () => {},\n        },\n      ],\n    },\n  ]}\n>\n  <p>Page content</p>\n</Page>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse action groups for sets of actions that relate to one another, particularly when there are too many to display as secondary actions. Note that these groups will be further rolled up into a single action for smaller displays so that actions do not wrap or overflow the page bounds."
  },
  "PageWithSeparator": {
    "prefix": [
      "PEPageWithSeparator"
    ],
    "body": "import React from 'react';\nimport {Page, Layout} from '../src';\n\nexport function Playground() {\n  return (\n    <Page title=\"Settings\" separator>\n  <Layout>\n    <Layout.AnnotatedSection title=\"Store details\">\n      <p>Annotated section content</p>\n    </Layout.AnnotatedSection>\n  </Layout>\n</Page>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse a separator for pages that have an [empty state](https://polaris.shopify.com/components/structure/empty-state) as their only content, or that have an [annotated section](https://polaris.shopify.com/components/structure/layout) as the first component on the page."
  },
  "PageWithContentAfterTitle(titleMetadata)": {
    "prefix": [
      "PEPageWithContentAfterTitle(titleMetadata)"
    ],
    "body": "import React from 'react';\nimport {Page, Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Page\n  breadcrumbs={[{content: 'Products', url: '/products'}]}\n  title=\"Jar With Lock-Lid\"\n  titleMetadata={<Badge status=\"attention\">Verified</Badge>}\n  primaryAction={{content: 'Save', disabled: true}}\n  secondaryActions={[{content: 'Duplicate'}, {content: 'View on your store'}]}\n  pagination={{\n    hasPrevious: true,\n    hasNext: true,\n  }}\n>\n  <p>Page content</p>\n</Page>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nTitle metadata appears immediately after the page’s title. Use it to communicate brief, important and non-interactive status information about an entire page."
  },
  "DefaultPageActions": {
    "prefix": [
      "PEDefaultPageActions"
    ],
    "body": "import React from 'react';\nimport {PageActions} from '../src';\n\nexport function Playground() {\n  return (\n    <PageActions\n  primaryAction={{\n    content: 'Save',\n  }}\n  secondaryActions={[\n    {\n      content: 'Delete',\n    },\n  ]}\n/>\n  );\n}",
    "description": "Used on a resource page (such as an individual order or product page) to let merchants take key actions at the bottom of the page. Usually, the primary action is Save and the secondary action is Delete."
  },
  "PrimaryActionOnly": {
    "prefix": [
      "PEPrimaryActionOnly"
    ],
    "body": "import React from 'react';\nimport {PageActions} from '../src';\n\nexport function Playground() {\n  return (\n    <PageActions\n  primaryAction={{\n    content: 'Save',\n  }}\n/>\n  );\n}",
    "description": "Not all page actions require a secondary action."
  },
  "DefaultPagination": {
    "prefix": [
      "PEDefaultPagination"
    ],
    "body": "import React from 'react';\nimport {Pagination} from '../src';\n\nexport function Playground() {\n  return (\n    <Pagination\n  hasPrevious\n  onPrevious={() => {\n    console.log('Previous');\n  }}\n  hasNext\n  onNext={() => {\n    console.log('Next');\n  }}\n/>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse for pagination at the bottom of lists."
  },
  "PaginationWithKeyboardNavigation": {
    "prefix": [
      "PEPaginationWithKeyboardNavigation"
    ],
    "body": "import React from 'react';\nimport {Pagination} from '../src';\n\nexport function Playground() {\n  return (\n    <div style={{height: '100px'}}>\n  <Pagination\n    hasPrevious\n    previousKeys={[74]}\n    previousTooltip=\"j\"\n    onPrevious={() => {\n      console.log('Previous');\n    }}\n    hasNext\n    nextKeys={[75]}\n    nextTooltip=\"k\"\n    onNext={() => {\n      console.log('Next');\n    }}\n  />\n</div>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nAttach standard keyboard shortcuts to important pagination controls."
  },
  "PaginationWithLabel": {
    "prefix": [
      "PEPaginationWithLabel"
    ],
    "body": "import React from 'react';\nimport {Pagination} from '../src';\n\nexport function Playground() {\n  return (\n    <Pagination\n  label=\"Results\"\n  hasPrevious\n  onPrevious={() => {\n    console.log('Previous');\n  }}\n  hasNext\n  onNext={() => {\n    console.log('Next');\n  }}\n/>\n  );\n}",
    "description": "Add a label between navigation buttons to provide more context of the content being viewed by the user."
  },
  "PopoverWithActionList": {
    "prefix": [
      "PEPopoverWithActionList"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Button, Popover, ActionList} from '../src';\n\nexport function PopoverWithActionListExample() {\n  const [popoverActive, setPopoverActive] = useState(true);\n\n  const togglePopoverActive = useCallback(\n    () => setPopoverActive((popoverActive) => !popoverActive),\n    [],\n  );\n\n  const activator = (\n    <Button onClick={togglePopoverActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover\n        active={popoverActive}\n        activator={activator}\n        onClose={togglePopoverActive}\n      >\n        <ActionList items={[{content: 'Import'}, {content: 'Export'}]} />\n      </Popover>\n    </div>\n  );\n}",
    "description": "Use when presenting a set of actions in a disclosable menu."
  },
  "PopoverWithContentAndActions": {
    "prefix": [
      "PEPopoverWithContentAndActions"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Button, Popover, ActionList} from '../src';\n\nexport function PopoverContentExample() {\n  const [popoverActive, setPopoverActive] = useState(true);\n\n  const togglePopoverActive = useCallback(\n    () => setPopoverActive((popoverActive) => !popoverActive),\n    [],\n  );\n\n  const activator = (\n    <Button onClick={togglePopoverActive} disclosure>\n      Sales channels\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover\n        active={popoverActive}\n        activator={activator}\n        onClose={togglePopoverActive}\n      >\n        <Popover.Pane fixed>\n          <Popover.Section>\n            <p>Available sales channels</p>\n          </Popover.Section>\n        </Popover.Pane>\n        <Popover.Pane>\n          <ActionList\n            items={[\n              {content: 'Online store'},\n              {content: 'Facebook'},\n              {content: 'Shopify POS'},\n            ]}\n          />\n        </Popover.Pane>\n      </Popover>\n    </div>\n  );\n}",
    "description": "Use to present a combination of content, instructions, and actions in a panel for tasks that are of low or secondary importance to the current page. When used this way, popovers provide useful entry points to related features without overwhelming merchants."
  },
  "PopoverWithFormComponents": {
    "prefix": [
      "PEPopoverWithFormComponents"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Button, Popover, FormLayout, Select, TextField} from '../src';\n\nexport function PopoverFormExample() {\n  const [popoverActive, setPopoverActive] = useState(true);\n  const [tagValue, setTagValue] = useState('');\n\n  const togglePopoverActive = useCallback(\n    () => setPopoverActive((popoverActive) => !popoverActive),\n    [],\n  );\n\n  const handleTagValueChange = useCallback((value) => setTagValue(value), []);\n\n  const activator = (\n    <Button onClick={togglePopoverActive} disclosure>\n      Filter\n    </Button>\n  );\n\n  return (\n    <div style={{height: '280px'}}>\n      <Popover\n        active={popoverActive}\n        activator={activator}\n        onClose={togglePopoverActive}\n        sectioned\n      >\n        <FormLayout>\n          <Select label=\"Show all customers where:\" options={['Tagged with']} />\n          <TextField\n            label=\"Tags\"\n            value={tagValue}\n            onChange={handleTagValueChange}\n          />\n          <Button size=\"slim\">Add filter</Button>\n        </FormLayout>\n      </Popover>\n    </div>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse to present secondary input tasks on demand."
  },
  "PopoverWithLazyLoadedList": {
    "prefix": [
      "PEPopoverWithLazyLoadedList"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport { totalIndexes, Button, Card, Popover, ResourceList, Avatar} from '../src';\n\nexport function PopoverLazyLoadExample() {\n  const [popoverActive, setPopoverActive] = useState(true);\n  const [visibleStaffIndex, setVisibleStaffIndex] = useState(5);\n  const staff = [\n    'Abbey Mayert',\n    'Abbi Senger',\n    'Abdul Goodwin',\n    'Abdullah Borer',\n    'Abe Nader',\n    'Abigayle Smith',\n    'Abner Torphy',\n    'Abraham Towne',\n    'Abraham Vik',\n    'Ada Fisher',\n    'Adah Pouros',\n    'Adam Waelchi',\n    'Adan Zemlak',\n    'Addie Wehner',\n    'Addison Wexler',\n    'Alex Hernandez',\n  ];\n\n  const togglePopoverActive = useCallback(\n    () => setPopoverActive((popoverActive) => !popoverActive),\n    [],\n  );\n\n  const handleScrolledToBottom = useCallback(() => {\n    const totalIndexes = staff.length;\n    const interval =\n      visibleStaffIndex + 3 < totalIndexes\n        ? 3\n        : totalIndexes - visibleStaffIndex;\n\n    if (interval > 0) {\n      setVisibleStaffIndex(visibleStaffIndex + interval);\n    }\n  }, [staff.length, visibleStaffIndex]);\n\n  const handleResourceListItemClick = useCallback(() => {}, []);\n\n  const activator = (\n    <Button onClick={togglePopoverActive} disclosure>\n      View staff\n    </Button>\n  );\n\n  const staffList = staff.slice(0, visibleStaffIndex).map((name) => ({\n    name,\n    initials: getInitials(name),\n  }));\n\n  return (\n    <Card sectioned>\n      <div style={{height: '280px'}}>\n        <Popover\n          sectioned\n          active={popoverActive}\n          activator={activator}\n          onClose={togglePopoverActive}\n        >\n          <Popover.Pane onScrolledToBottom={handleScrolledToBottom}>\n            <ResourceList items={staffList} renderItem={renderItem} />\n          </Popover.Pane>\n        </Popover>\n      </div>\n    </Card>\n  );\n\n  function renderItem({name, initials}) {\n    return (\n      <ResourceList.Item\n        id={name}\n        media={<Avatar size=\"medium\" name={name} initials={initials} />}\n        onClick={handleResourceListItemClick}\n      >\n        {name}\n      </ResourceList.Item>\n    );\n  }\n\n  function getInitials(name) {\n    return name\n      .split(' ')\n      .map((surnameOrFamilyName) => {\n        return surnameOrFamilyName.slice(0, 1);\n      })\n      .join('');\n  }\n}",
    "description": "<!-- example-for: web -->\n\nUse to present merchants with a list that dynamically loads more items on scroll or arrow down."
  },
  "SmallProgressBar": {
    "prefix": [
      "PESmallProgressBar"
    ],
    "body": "import React from 'react';\nimport {ProgressBar} from '../src';\n\nexport function Playground() {\n  return (\n    <ProgressBar progress={40} size=\"small\" />\n  );\n}",
    "description": "Use the size option when you need to increase or decrease the visual weight of the progress bar."
  },
  "DefaultRadioButton": {
    "prefix": [
      "PEDefaultRadioButton"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Stack, RadioButton} from '../src';\n\nexport function RadioButtonExample() {\n  const [value, setValue] = useState('disabled');\n\n  const handleChange = useCallback(\n    (_checked, newValue) => setValue(newValue),\n    [],\n  );\n\n  return (\n    <Stack vertical>\n      <RadioButton\n        label=\"Accounts are disabled\"\n        helpText=\"Customers will only be able to check out as guests.\"\n        checked={value === 'disabled'}\n        id=\"disabled\"\n        name=\"accounts\"\n        onChange={handleChange}\n      />\n      <RadioButton\n        label=\"Accounts are optional\"\n        helpText=\"Customers will be able to check out with a customer account or as a guest.\"\n        id=\"optional\"\n        name=\"accounts\"\n        checked={value === 'optional'}\n        onChange={handleChange}\n      />\n    </Stack>\n  );\n}",
    "description": "Use radio buttons where merchants must make a single selection."
  },
  "DefaultRangeSlider": {
    "prefix": [
      "PEDefaultRangeSlider"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Card, RangeSlider} from '../src';\n\nexport function RangeSliderExample() {\n  const [rangeValue, setRangeValue] = useState(32);\n\n  const handleRangeSliderChange = useCallback(\n    (value) => setRangeValue(value),\n    [],\n  );\n\n  return (\n    <Card sectioned>\n      <RangeSlider\n        label=\"Opacity percentage\"\n        value={rangeValue}\n        onChange={handleRangeSliderChange}\n        output\n      />\n    </Card>\n  );\n}",
    "description": "Use range sliders where merchants may need to select a percentage between `0 — 100`."
  },
  "MorePreciseRangeControl": {
    "prefix": [
      "PEMorePreciseRangeControl"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Card, RangeSlider} from '../src';\n\nexport function RangeSliderWithPreciseRangeControlExample() {\n  const [rangeValue, setRangeValue] = useState(5);\n\n  const handleRangeSliderChange = useCallback(\n    (value) => setRangeValue(value),\n    [],\n  );\n\n  return (\n    <Card sectioned>\n      <RangeSlider\n        label=\"Logo offset\"\n        min={-10}\n        max={10}\n        step={5}\n        value={rangeValue}\n        onChange={handleRangeSliderChange}\n      />\n    </Card>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nFor a more precise value, you can define a `min` and `max` range, as well as the amount with which the slider will be incremented."
  },
  "PrefixAndSuffixElements": {
    "prefix": [
      "PEPrefixAndSuffixElements"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Card, RangeSlider} from '../src';\n\nexport function RangeSliderWithPrefixAndSuffixExample() {\n  const [rangeValue, setRangeValue] = useState(100);\n\n  const handleRangeSliderChange = useCallback(\n    (value) => setRangeValue(value),\n    [],\n  );\n\n  const suffixStyles = {\n    minWidth: '24px',\n    textAlign: 'right',\n  };\n\n  return (\n    <Card sectioned>\n      <RangeSlider\n        label=\"Hue color mix\"\n        min={0}\n        max={360}\n        value={rangeValue}\n        onChange={handleRangeSliderChange}\n        prefix={<p>Hue</p>}\n        suffix={<p style={suffixStyles}>{rangeValue}</p>}\n      />\n    </Card>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nBecause a range slider can also output a `label` and `helpText`, the height of the overall component can vary. `prefix` and `suffix` props allow you to pass in a React element to be placed before or after the rendered `input`, allowing for perfect vertical alignment and easier stylistic control."
  },
  "DualThumbRangeSlider": {
    "prefix": [
      "PEDualThumbRangeSlider"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Card, RangeSlider, Stack, TextField} from '../src';\n\nexport function DualThumbRangeSliderExample() {\n  const initialValue = [900, 1000];\n  const prefix = '$';\n  const min = 0;\n  const max = 2000;\n  const step = 10;\n\n  const [intermediateTextFieldValue, setIntermediateTextFieldValue] = useState(\n    initialValue,\n  );\n  const [rangeValue, setRangeValue] = useState(initialValue);\n\n  const handleRangeSliderChange = useCallback((value) => {\n    setRangeValue(value);\n    setIntermediateTextFieldValue(value);\n  }, []);\n\n  const handleLowerTextFieldChange = useCallback(\n    (value) => {\n      const upperValue = rangeValue[1];\n      setIntermediateTextFieldValue([parseInt(value, 10), upperValue]);\n    },\n    [rangeValue],\n  );\n\n  const handleUpperTextFieldChange = useCallback(\n    (value) => {\n      const lowerValue = rangeValue[0];\n      setIntermediateTextFieldValue([lowerValue, parseInt(value, 10)]);\n    },\n    [rangeValue],\n  );\n\n  const handleLowerTextFieldBlur = useCallback(() => {\n    const upperValue = rangeValue[1];\n    const value = intermediateTextFieldValue[0];\n\n    setRangeValue([parseInt(value, 10), upperValue]);\n  }, [intermediateTextFieldValue, rangeValue]);\n\n  const handleUpperTextFieldBlur = useCallback(() => {\n    const lowerValue = rangeValue[0];\n    const value = intermediateTextFieldValue[1];\n\n    setRangeValue([lowerValue, parseInt(value, 10)]);\n  }, [intermediateTextFieldValue, rangeValue]);\n\n  const handleEnterKeyPress = useCallback(\n    (event) => {\n      const newValue = intermediateTextFieldValue;\n      const oldValue = rangeValue;\n\n      if (event.keyCode === Key.Enter && newValue !== oldValue) {\n        setRangeValue(newValue);\n      }\n    },\n    [intermediateTextFieldValue, rangeValue],\n  );\n\n  const lowerTextFieldValue =\n    intermediateTextFieldValue[0] === rangeValue[0]\n      ? rangeValue[0]\n      : intermediateTextFieldValue[0];\n  const upperTextFieldValue =\n    intermediateTextFieldValue[1] === rangeValue[1]\n      ? rangeValue[1]\n      : intermediateTextFieldValue[1];\n\n  return (\n    <Card sectioned>\n      <div style={{marginTop: '20px'}} onKeyDown={handleEnterKeyPress}>\n        <RangeSlider\n          label=\"Money spent is between\"\n          value={rangeValue}\n          prefix={prefix}\n          output\n          min={min}\n          max={max}\n          step={step}\n          onChange={handleRangeSliderChange}\n        />\n        <Stack distribution=\"equalSpacing\" spacing=\"extraLoose\">\n          <TextField\n            label=\"Min money spent\"\n            type=\"number\"\n            value={`${lowerTextFieldValue}`}\n            prefix={prefix}\n            min={min}\n            max={max}\n            step={step}\n            onChange={handleLowerTextFieldChange}\n            onBlur={handleLowerTextFieldBlur}\n          />\n          <TextField\n            label=\"Max money spent\"\n            type=\"number\"\n            value={`${upperTextFieldValue}`}\n            prefix={prefix}\n            min={min}\n            max={max}\n            step={step}\n            onChange={handleUpperTextFieldChange}\n            onBlur={handleUpperTextFieldBlur}\n          />\n        </Stack>\n      </div>\n    </Card>\n  );\n}",
    "description": "Use a dual thumb range slider when merchants need to select a range of values."
  },
  "SimpleResourceItem": {
    "prefix": [
      "PESimpleResourceItem"
    ],
    "body": "import React, {useState} from 'react';\nimport {Card, ResourceList, ResourceItem, TextStyle} from '../src';\n\nexport function ResourceItemExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={{singular: 'blog post', plural: 'blog posts'}}\n        items={[\n          {\n            id: 6,\n            url: 'posts/6',\n            title: 'How To Get Value From Wireframes',\n            author: 'Jonathan Mangrove',\n          },\n        ]}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        selectable\n        renderItem={(item) => {\n          const {id, url, title, author} = item;\n          const authorMarkup = author ? <div>by {author}</div> : null;\n          return (\n            <ResourceItem\n              id={id}\n              url={url}\n              accessibilityLabel={`View details for ${title}`}\n              name={title}\n            >\n              <h3>\n                <TextStyle variation=\"strong\">{title}</TextStyle>\n              </h3>\n              {authorMarkup}\n            </ResourceItem>\n          );\n        }}\n      />\n    </Card>\n  );\n}",
    "description": "A basic resource item with its details filled in at the point of use."
  },
  "ItemWithMedia": {
    "prefix": [
      "PEItemWithMedia"
    ],
    "body": "import React from 'react';\nimport {Card, ResourceList, ResourceItem, Avatar, TextStyle} from '../src';\n\nexport function Playground() {\n  return (\n    <Card>\n  <ResourceList\n    resourceName={{singular: 'customer', plural: 'customers'}}\n    items={[\n      {\n        id: 145,\n        url: 'customers/145',\n        avatarSource:\n          'https://burst.shopifycdn.com/photos/freelance-designer-working-on-laptop.jpg?width=746',\n        name: 'Yi So-Yeon',\n        location: 'Gwangju, South Korea',\n      },\n    ]}\n    renderItem={(item) => {\n      const {id, url, avatarSource, name, location} = item;\n\n      return (\n        <ResourceItem\n          id={id}\n          url={url}\n          media={\n            <Avatar customer size=\"medium\" name={name} source={avatarSource} />\n          }\n          accessibilityLabel={`View details for ${name}`}\n          name={name}\n        >\n          <h3>\n            <TextStyle variation=\"strong\">{name}</TextStyle>\n          </h3>\n          <div>{location}</div>\n        </ResourceItem>\n      );\n    }}\n  />\n</Card>\n  );\n}",
    "description": "The media element can hold an [avatar](https://polaris.shopify.com/components/images-and-icons/avatar), [thumbnail](https://polaris.shopify.com/components/images-and-icons/thumbnail), or other small-format graphic."
  },
  "ItemWithShortcutActions": {
    "prefix": [
      "PEItemWithShortcutActions"
    ],
    "body": "import React from 'react';\nimport {Card, ResourceList, ResourceItem, Avatar, TextStyle} from '../src';\n\nexport function Playground() {\n  return (\n    <Card>\n  <ResourceList\n    resourceName={{singular: 'customer', plural: 'customers'}}\n    items={[\n      {\n        id: 145,\n        url: 'customers/145',\n        avatarSource:\n          'https://burst.shopifycdn.com/photos/freelance-designer-working-on-laptop.jpg?width=746',\n        name: 'Yi So-Yeon',\n        location: 'Gwangju, South Korea',\n        latestOrderUrl: 'orders/1456',\n      },\n    ]}\n    renderItem={(item) => {\n      const {id, url, avatarSource, name, location, latestOrderUrl} = item;\n      const shortcutActions = latestOrderUrl\n        ? [{content: 'View latest order', url: latestOrderUrl}]\n        : null;\n\n      return (\n        <ResourceItem\n          id={id}\n          url={url}\n          media={\n            <Avatar customer size=\"medium\" name={name} source={avatarSource} />\n          }\n          shortcutActions={shortcutActions}\n          accessibilityLabel={`View details for ${name}`}\n          name={name}\n        >\n          <h3>\n            <TextStyle variation=\"strong\">{name}</TextStyle>\n          </h3>\n          <div>{location}</div>\n        </ResourceItem>\n      );\n    }}\n  />\n</Card>\n  );\n}",
    "description": "Shortcut actions present popular actions from the resource’s details page for easy access. A shortcut action should be available on every item in the list."
  },
  "SimpleResourceList": {
    "prefix": [
      "PESimpleResourceList"
    ],
    "body": "import React from 'react';\nimport {Card, ResourceList, Avatar, ResourceItem, TextStyle} from '../src';\n\nexport function Playground() {\n  return (\n    <Card>\n  <ResourceList\n    resourceName={{singular: 'customer', plural: 'customers'}}\n    items={[\n      {\n        id: 341,\n        url: 'customers/341',\n        name: 'Mae Jemison',\n        location: 'Decatur, USA',\n      },\n      {\n        id: 256,\n        url: 'customers/256',\n        name: 'Ellen Ochoa',\n        location: 'Los Angeles, USA',\n      },\n    ]}\n    renderItem={(item) => {\n      const {id, url, name, location} = item;\n      const media = <Avatar customer size=\"medium\" name={name} />;\n\n      return (\n        <ResourceItem\n          id={id}\n          url={url}\n          media={media}\n          accessibilityLabel={`View details for ${name}`}\n        >\n          <h3>\n            <TextStyle variation=\"strong\">{name}</TextStyle>\n          </h3>\n          <div>{location}</div>\n        </ResourceItem>\n      );\n    }}\n  />\n</Card>\n  );\n}",
    "description": "A resource list with simple items and no bulk actions, sorting, or filtering."
  },
  "ResourceListWithSelectionAndNoBulkActions": {
    "prefix": [
      "PEResourceListWithSelectionAndNoBulkActions"
    ],
    "body": "import React, {useState} from 'react';\nimport {Card, ResourceList, Avatar, ResourceItem, TextStyle} from '../src';\n\nexport function ResourceListWithSelectionExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const items = [\n    {\n      id: 341,\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 256,\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n    },\n  ];\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        selectable\n      />\n    </Card>\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n\n    return (\n      <ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n      >\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n}",
    "description": "A resource list with simple items and selection."
  },
  "ResourceListWithBulkActions": {
    "prefix": [
      "PEResourceListWithBulkActions"
    ],
    "body": "import React, {useState} from 'react';\nimport {Card, ResourceList, Avatar, ResourceItem, TextStyle} from '../src';\n\nexport function ResourceListWithBulkActionsExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const items = [\n    {\n      id: 341,\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 256,\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n    },\n  ];\n\n  const promotedBulkActions = [\n    {\n      content: 'Edit customers',\n      onAction: () => console.log('Todo: implement bulk edit'),\n    },\n  ];\n\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        promotedBulkActions={promotedBulkActions}\n        bulkActions={bulkActions}\n      />\n    </Card>\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n\n    return (\n      <ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n      >\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n}",
    "description": "Allows merchants to select items and perform an action on the selection."
  },
  "ResourceListWithLoadingState": {
    "prefix": [
      "PEResourceListWithLoadingState"
    ],
    "body": "import React, {useState} from 'react';\nimport {Card, ResourceList, Avatar, ResourceItem, TextStyle} from '../src';\n\nexport function ResourceListWithLoadingExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const items = [\n    {\n      id: 341,\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 256,\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n    },\n  ];\n\n  const promotedBulkActions = [\n    {\n      content: 'Edit customers',\n      onAction: () => console.log('Todo: implement bulk edit'),\n    },\n  ];\n\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        promotedBulkActions={promotedBulkActions}\n        bulkActions={bulkActions}\n        loading\n      />\n    </Card>\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n\n    return (\n      <ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n      >\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n}",
    "description": "Notifies merchants that list items are being processed."
  },
  "ResourceListWithSorting": {
    "prefix": [
      "PEResourceListWithSorting"
    ],
    "body": "import React, {useState} from 'react';\nimport {Card, ResourceList, Avatar, ResourceItem, TextStyle} from '../src';\n\nexport function ResourceListWithSortingExample() {\n  const [sortValue, setSortValue] = useState('DATE_MODIFIED_DESC');\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const items = [\n    {\n      id: 341,\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 256,\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n    },\n  ];\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        sortValue={sortValue}\n        sortOptions={[\n          {label: 'Newest update', value: 'DATE_MODIFIED_DESC'},\n          {label: 'Oldest update', value: 'DATE_MODIFIED_ASC'},\n        ]}\n        onSortChange={(selected) => {\n          setSortValue(selected);\n          console.log(`Sort option changed to ${selected}.`);\n        }}\n      />\n    </Card>\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n\n    return (\n      <ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n      >\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n}",
    "description": "Allows merchants to change the way the list is sorted by selecting one of several options from a [Select](https://polaris.shopify.com/components/forms/select) control."
  },
  "ResourceListWithAlternateTool": {
    "prefix": [
      "PEResourceListWithAlternateTool"
    ],
    "body": "import React from 'react';\nimport {Card, ResourceList, Button, Avatar, ResourceItem, TextStyle} from '../src';\n\nexport function ResourceListWithAlternateToolExample() {\n  const resourceName = {\n    singular: 'Customer',\n    plural: 'Customers',\n  };\n\n  const items = [\n    {\n      id: 341,\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 256,\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n    },\n  ];\n\n  return (\n    <Card>\n      <ResourceList\n        items={items}\n        renderItem={renderItem}\n        resourceName={resourceName}\n        alternateTool={<Button>Email customers</Button>}\n      />\n    </Card>\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n\n    return (\n      <ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n      >\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n}",
    "description": "Allows merchants to add an alternate tool in the current sort option location when sort may not be the most relevant action for the current list."
  },
  "ResourceListWithFiltering": {
    "prefix": [
      "PEResourceListWithFiltering"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TextField, Filters, Button, Card, ResourceList, Avatar, ResourceItem, TextStyle} from '../src';\n\nexport function ResourceListWithFilteringExample() {\n  const [taggedWith, setTaggedWith] = useState('VIP');\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value) => setQueryValue(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n  const handleClearAll = useCallback(() => {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const items = [\n    {\n      id: 341,\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 256,\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n    },\n  ];\n\n  const filters = [\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: 'taggedWith',\n          label: disambiguateLabel('taggedWith', taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  const filterControl = (\n    <Filters\n      queryValue={queryValue}\n      filters={filters}\n      appliedFilters={appliedFilters}\n      onQueryChange={handleQueryValueChange}\n      onQueryClear={handleQueryValueRemove}\n      onClearAll={handleClearAll}\n    >\n      <div style={{paddingLeft: '8px'}}>\n        <Button onClick={() => console.log('New filter saved')}>Save</Button>\n      </div>\n    </Filters>\n  );\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        filterControl={filterControl}\n      />\n    </Card>\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n\n    return (\n      <ResourceItem id={id} url={url} media={media}>\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}",
    "description": "Allows merchants to narrow the resource list to a subset of the original items."
  },
  "ResourceListWithItemShortcutActions": {
    "prefix": [
      "PEResourceListWithItemShortcutActions"
    ],
    "body": "import React from 'react';\nimport {Card, ResourceList, Avatar, ResourceItem, TextStyle} from '../src';\n\nexport function Playground() {\n  return (\n    <Card>\n  <ResourceList\n    resourceName={{singular: 'customer', plural: 'customers'}}\n    items={[\n      {\n        id: 341,\n        url: 'customers/341',\n        name: 'Mae Jemison',\n        location: 'Decatur, USA',\n        latestOrderUrl: 'orders/1456',\n      },\n      {\n        id: 256,\n        url: 'customers/256',\n        name: 'Ellen Ochoa',\n        location: 'Los Angeles, USA',\n        latestOrderUrl: 'orders/1457',\n      },\n    ]}\n    renderItem={(item) => {\n      const {id, url, name, location, latestOrderUrl} = item;\n      const media = <Avatar customer size=\"medium\" name={name} />;\n      const shortcutActions = latestOrderUrl\n        ? [\n            {\n              content: 'View latest order',\n              accessibilityLabel: `View ${name}'s latest order`,\n              url: latestOrderUrl,\n            },\n          ]\n        : null;\n\n      return (\n        <ResourceItem\n          id={id}\n          url={url}\n          media={media}\n          accessibilityLabel={`View details for ${name}`}\n          shortcutActions={shortcutActions}\n        >\n          <h3>\n            <TextStyle variation=\"strong\">{name}</TextStyle>\n          </h3>\n          <div>{location}</div>\n        </ResourceItem>\n      );\n    }}\n  />\n</Card>\n  );\n}",
    "description": "Shortcut actions are intended to provide quick access to popular actions from the resource’s details page. They are shown when the mouse is hovered over the list item, and are not shown on small screen devices, so the action must also be accessible in another way."
  },
  "ResourceListWithPersistentItemShortcutActions": {
    "prefix": [
      "PEResourceListWithPersistentItemShortcutActions"
    ],
    "body": "import React from 'react';\nimport {Card, ResourceList, Avatar, ResourceItem, TextStyle} from '../src';\n\nexport function Playground() {\n  return (\n    <Card>\n  <ResourceList\n    resourceName={{singular: 'customer', plural: 'customers'}}\n    items={[\n      {\n        id: 341,\n        url: 'customers/341',\n        name: 'Mae Jemison',\n        location: 'Decatur, USA',\n        latestOrderUrl: 'orders/1456',\n      },\n      {\n        id: 256,\n        url: 'customers/256',\n        name: 'Ellen Ochoa',\n        location: 'Los Angeles, USA',\n        latestOrderUrl: 'orders/1457',\n      },\n    ]}\n    renderItem={(item) => {\n      const {id, url, name, location, latestOrderUrl} = item;\n      const media = <Avatar customer size=\"medium\" name={name} />;\n      const shortcutActions = latestOrderUrl\n        ? [\n            {\n              content: 'View latest order',\n              accessibilityLabel: `View ${name}'s latest order`,\n              url: latestOrderUrl,\n            },\n          ]\n        : null;\n\n      return (\n        <ResourceItem\n          id={id}\n          url={url}\n          media={media}\n          accessibilityLabel={`View details for ${name}`}\n          shortcutActions={shortcutActions}\n          persistActions\n        >\n          <h3>\n            <TextStyle variation=\"strong\">{name}</TextStyle>\n          </h3>\n          <div>{location}</div>\n        </ResourceItem>\n      );\n    }}\n  />\n</Card>\n  );\n}",
    "description": "Use persistent shortcut actions in rare cases when the action cannot be made available on the item’s details page. Persistent shortcut actions roll up into an overflow menu on small screens."
  },
  "ResourceListWithMultiselect": {
    "prefix": [
      "PEResourceListWithMultiselect"
    ],
    "body": "import React, {useState} from 'react';\nimport {Card, ResourceList, Avatar, ResourceItem, TextStyle} from '../src';\n\nexport function ResourceListExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const items = [\n    {\n      id: 231,\n      url: 'customers/231',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 246,\n      url: 'customers/246',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n    },\n    {\n      id: 276,\n      url: 'customers/276',\n      name: 'Joe Smith',\n      location: 'Arizona, USA',\n    },\n    {\n      id: 349,\n      url: 'customers/349',\n      name: 'Haden Jerado',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 419,\n      url: 'customers/419',\n      name: 'Tom Thommas',\n      location: 'Florida, USA',\n    },\n    {\n      id: 516,\n      url: 'customers/516',\n      name: 'Emily Amrak',\n      location: 'Texas, USA',\n    },\n  ];\n\n  const promotedBulkActions = [\n    {\n      content: 'Edit customers',\n      onAction: () => console.log('Todo: implement bulk edit'),\n    },\n  ];\n\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        promotedBulkActions={promotedBulkActions}\n        bulkActions={bulkActions}\n        resolveItemId={resolveItemIds}\n      />\n    </Card>\n  );\n\n  function renderItem(item, _, index) {\n    const {id, url, name, location} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n\n    return (\n      <ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        sortOrder={index}\n        accessibilityLabel={`View details for ${name}`}\n      >\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n\n  function resolveItemIds({id}) {\n    return id;\n  }\n}",
    "description": "Allows merchants to select or deselect multiple items at once."
  },
  "ResourceListWithAllOfItsElements": {
    "prefix": [
      "PEResourceListWithAllOfItsElements"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TextField, Filters, Button, Card, ResourceList, Avatar, ResourceItem, TextStyle} from '../src';\n\nexport function ResourceListExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [sortValue, setSortValue] = useState('DATE_MODIFIED_DESC');\n  const [taggedWith, setTaggedWith] = useState('VIP');\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value) => setQueryValue(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n  const handleClearAll = useCallback(() => {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const items = [\n    {\n      id: 341,\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      latestOrderUrl: 'orders/1456',\n    },\n    {\n      id: 256,\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      latestOrderUrl: 'orders/1457',\n    },\n  ];\n\n  const promotedBulkActions = [\n    {\n      content: 'Edit customers',\n      onAction: () => console.log('Todo: implement bulk edit'),\n    },\n  ];\n\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  const filters = [\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: 'taggedWith',\n          label: disambiguateLabel('taggedWith', taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  const filterControl = (\n    <Filters\n      queryValue={queryValue}\n      filters={filters}\n      appliedFilters={appliedFilters}\n      onQueryChange={handleQueryValueChange}\n      onQueryClear={handleQueryValueRemove}\n      onClearAll={handleClearAll}\n    >\n      <div style={{paddingLeft: '8px'}}>\n        <Button onClick={() => console.log('New filter saved')}>Save</Button>\n      </div>\n    </Filters>\n  );\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        promotedBulkActions={promotedBulkActions}\n        bulkActions={bulkActions}\n        sortValue={sortValue}\n        sortOptions={[\n          {label: 'Newest update', value: 'DATE_MODIFIED_DESC'},\n          {label: 'Oldest update', value: 'DATE_MODIFIED_ASC'},\n        ]}\n        onSortChange={(selected) => {\n          setSortValue(selected);\n          console.log(`Sort option changed to ${selected}.`);\n        }}\n        filterControl={filterControl}\n      />\n    </Card>\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location, latestOrderUrl} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n    const shortcutActions = latestOrderUrl\n      ? [{content: 'View latest order', url: latestOrderUrl}]\n      : null;\n    return (\n      <ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n        shortcutActions={shortcutActions}\n        persistActions\n      >\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}",
    "description": "Use as a broad example that includes most props available to resource list."
  },
  "DefaultScrollableContainer": {
    "prefix": [
      "PEDefaultScrollableContainer"
    ],
    "body": "import React, {version} from 'react';\nimport {Card, Scrollable} from '../src';\n\nexport function Playground() {\n  return (\n    <Card title=\"Terms of service\" sectioned>\n  <Scrollable shadow style={{height: '100px'}}>\n    <p>\n      By signing up for the Shopify service (“Service”) or any of the services\n      of Shopify Inc. (“Shopify”) you are agreeing to be bound by the following\n      terms and conditions (“Terms of Service”). The Services offered by Shopify\n      under the Terms of Service include various products and services to help\n      you create and manage a retail store, whether an online store (“Online\n      Services”), a physical retail store (“POS Services”), or both. Any new\n      features or tools which are added to the current Service shall be also\n      subject to the Terms of Service. You can review the current version of the\n      Terms of Service at any time at https://www.shopify.com/legal/terms.\n      Shopify reserves the right to update and change the Terms of Service by\n      posting updates and changes to the Shopify website. You are advised to\n      check the Terms of Service from time to time for any updates or changes\n      that may impact you.\n    </p>\n  </Scrollable>\n</Card>\n  );\n}",
    "description": "Use when you need to make a region within the page independently scrollable. It’s often used in modals and other panes where it’s helpful to provide an extra visual cue that content exists below or above the fold."
  },
  "ScrollToChildComponent": {
    "prefix": [
      "PEScrollToChildComponent"
    ],
    "body": "import React, {version} from 'react';\nimport {Card, Scrollable} from '../src';\n\nexport <Card title=\"Terms of service\" sectioned>\n  <Scrollable shadow style={{height: '100px'}}>\n    <ol>\n      <li>Account Terms</li>\n    </ol>\n    <p>\n      You must be 18 years or older or at least the age of majority in the\n      jurisdiction where you reside or from which you use this Service.\n    </p>\n    <p>\n      To access and use the Services, you must register for a Shopify account\n      (“Account”) by providing your full legal name, current address, phone\n      number, a valid email address, and any other information indicated as\n      required. Shopify may reject your application for an Account, or cancel an\n      existing Account, for any reason, in our sole discretion.\n    </p>\n    <p>\n      You acknowledge that Shopify will use the email address you provide as the\n      primary method for communication.\n    </p>\n    <p>\n      You are responsible for keeping your password secure. Shopify cannot and\n      will not be liable for any loss or damage from your failure to maintain\n      the security of your Account and password.\n    </p>\n    <p>\n      You are responsible for all activity and content such as photos, images,\n      videos, graphics, written content, audio files, code, information, or data\n      uploaded, collected, generated, stored, displayed, distributed,\n      transmitted or exhibited on or in connection with your Account\n      (“Materials”).\n    </p>\n    <p>\n      A breach or violation of any term in the Terms of Service, including the\n      AUP, as determined in the sole discretion of Shopify will result in an\n      immediate termination of your services.\n    </p>\n    <p>Which means</p>\n    <p>\n      You are responsible for your Account and any Materials you upload to the\n      Shopify Service. Remember that with any violation of these terms we will\n      cancel your service.\n    </p>\n\n    <p>If we need to reach you, we will send you an email.</p>\n\n    <ol>\n      <li>Account Activation</li>\n    </ol>\n    <Scrollable.ScrollTo>\n      <p>2.1 Shopify Account</p>\n    </Scrollable.ScrollTo>\n\n    <p>\n      Subject to section 2.1.2, the person signing up for the Service will be\n      the contracting party (“Account Owner”) for the purposes of our Terms of\n      Service and will be the person who is authorized to use any corresponding\n      account we may provide to the Account Owner in connection with the\n      Service.\n    </p>\n    <p>\n      If you are signing up for the Service on behalf of your employer, your\n      employer shall be the Account Owner. If you are signing up for the Service\n      on behalf of your employer, then you represent and warrant that you have\n      the authority to bind your employer to our Terms of Service.\n    </p>\n    <p>2.2 PayPal Express Checkout and Shopify Payments Accounts</p>\n\n    <p>\n      Upon completion of sign up for the Service, Shopify will create a PayPal\n      Express Checkout account on your behalf, using your email address.\n      Depending on your location, Shopify may also create a Shopify Payments\n      account on your behalf.\n    </p>\n    <p>\n      You acknowledge that PayPal Express Checkout and/or Shopify Payments will\n      be your default payments gateway(s) and that it is your sole\n      responsibility as the Account Owner to activate and maintain these\n      accounts. If you do not wish to keep either of the payment accounts\n      active, it is your responsibility to deactivate them. For the avoidance of\n      doubt, PayPal Express Checkout is a Third Party Service, as defined in\n      Section 15 of these Terms of Service.\n    </p>\n    <p>2.3 Apple Pay for Safari Account</p>\n\n    <p>\n      Upon completion of sign up for the Service, Shopify will create an Apple\n      Pay for Safari (“Apple Pay”) account on your behalf, using the URL(s) and\n      business name associated with your Account. Depending on your location,\n      Shopify may activate your Apple Pay account on your behalf, otherwise you\n      will be required to activate your Apple Pay account within your Account\n      admin. If you do not wish to keep your Apple Pay account active, it is\n      your responsibility to deactivate it. For the avoidance of doubt, Apple\n      Pay is a Third Party Service, as defined in Section 15 of these Terms of\n      Service.\n    </p>\n    <p>\n      If you use an Apple Pay supported payment gateway and your customers have\n      enabled Apple Pay on their device, customers may purchase goods and\n      services from your store using Apple Pay.\n    </p>\n    <p>\n      By using Apple Pay on your store, you are agreeing to be bound by the\n      Apple Pay Platform Web Merchant Terms and Conditions, as they may be\n      amended by Apple from time to time. If Apple amends the Apple Pay Platform\n      Web Merchant Terms and Conditions, the amended and restated version will\n      be posted here:{' '}\n      <a href=\"https://www.shopify.com/legal/apple-pay\">\n        https://www.shopify.com/legal/apple-pay\n      </a>\n      . Such amendments to the Apple Pay Platform Web Merchant Terms are effective\n      as of the date of posting. Your continued use of Apple Pay on your store after\n      the amended Apple Pay Platform Web Merchant Terms are posted constitutes your\n      agreement to, and acceptance of, the amended Apple Pay Platform Web Merchant\n      Terms. If you do not agree to any changes to the Apple Pay Platform Web Merchant\n      Terms, de-activate your Apple Pay account and do not continue to use Apple\n      Pay on your store.\n    </p>\n    <p>2.4 Google Payment</p>\n\n    <p>\n      Upon completion of sign up for the Service, if you have been enrolled in\n      Shopify Payments, Shopify will also create a Google Payment account on\n      your behalf. If you do not wish to keep your Google Payment account\n      active, it is your responsibility to deactivate it. For the avoidance of\n      doubt, Google Payment is a Third Party Service, as defined in Section 15\n      of these Terms of Service.\n    </p>\n\n    <p>\n      If you use a Google Payment supported payment gateway and your customers\n      have enabled Google Payment, customers may purchase goods and services\n      from your store using Google Payment.\n    </p>\n\n    <p>\n      By using Google Payment on your store, you are agreeing to be bound by the\n      Google Payment API Terms of Service, as they may be amended by Google from\n      time to time. If Google amends the Google Payment API Terms of Service,\n      the amended and restated version will be posted here:{' '}\n      <a href=\"https://payments.developers.google.com/terms/sellertos\">\n        https://payments.developers.google.com/terms/sellertos\n      </a>\n      . Such amendments to the Google Payment API Terms of Service are effective\n      as of the date of posting. Your continued use of Google Payment on your store\n      after the amended Google Payment API Terms of Service are posted constitutes\n      your agreement to, and acceptance of, the amended Google Payment API Terms\n      of Service. If you do not agree to any changes to the Google Payment API Terms\n      of Service, de-activate your Google Payment account and do not continue to\n      use Google Payment on your store.\n    </p>\n\n    <p>2.5 Domain Names</p>\n\n    <p>\n      Upon purchasing a domain name through Shopify, domain registration will be\n      preset to automatically renew each year so long as your Shopify Account\n      remains active. You acknowledge that it is your sole responsibility to\n      deactivate the auto-renewal function should you choose to do so.\n    </p>\n    <p>Which means</p>\n    <p>\n      The person signing up for the Shopify Service is responsible for the\n      account and is bound by these Terms of Service. If you signup on behalf of\n      your employer, your employer owns the account and is also bound by our\n      Terms of Service.\n    </p>\n\n    <p>\n      We automatically create accounts for you to accept payments. You are\n      responsible for activating and deactivating these accounts.\n    </p>\n\n    <p>\n      Any domain you purchase through us will automatically renew unless you opt\n      out.\n    </p>\n\n    <ol>\n      <li>General Conditions</li>\n    </ol>\n    <p>\n      You must read, agree with and accept all of the terms and conditions\n      contained in these Terms of Service, including the AUP and the Privacy\n      Policy before you may become a member of Shopify.\n    </p>\n\n    <p>\n      Technical support is only provided to paying Account holders and is only\n      available via email.\n    </p>\n    <p>\n      The Terms of Service shall be governed by and interpreted in accordance\n      with the laws of the Province of Ontario and the laws of Canada applicable\n      therein, without regard to principles of conflicts of laws. The parties\n      irrevocably and unconditionally submit to the exclusive jurisdiction of\n      the courts of the Province of Ontario with respect to any dispute or claim\n      arising out of or in connection with the Terms of Service. The United\n      Nations Convention on Contracts for the International Sale of Goods will\n      not apply to these Terms of Service and is hereby expressly excluded.\n    </p>\n    <p>\n      You acknowledge and agree that Shopify may amend these Terms of Service at\n      any time by posting the relevant amended and restated Terms of Service on\n      Shopify’s website, available at{' '}\n      <a href=\"https://www.shopify.com/legal/terms\">\n        https://www.shopify.com/legal/terms\n      </a>{' '}\n      and such amendments to the Terms of Service are effective as of the date\n      of posting. Your continued use of the Services after the amended Terms of\n      Service are posted to Shopify’s website constitutes your agreement to, and\n      acceptance of, the amended Terms of Service. If you do not agree to any\n      changes to the Terms of Service, do not continue to use the Service.\n    </p>\n    <p>\n      You may not use the Shopify service for any illegal or unauthorized\n      purpose nor may you, in the use of the Service, violate any laws in your\n      jurisdiction (including but not limited to copyright laws), the laws\n      applicable to you in your customer’s jurisdiction, or the laws of Canada\n      and the Province of Ontario. You will comply with all applicable laws,\n      rules and regulations in your use of the Service.\n    </p>\n    <p>\n      You agree not to reproduce, duplicate, copy, sell, resell or exploit any\n      portion of the Service, use of the Service, or access to the Service\n      without the express written permission by Shopify.\n    </p>\n    <p>\n      You shall not purchase search engine or other pay per click keywords (such\n      as Google AdWords), or domain names that use Shopify or Shopify trademarks\n      and/or variations and misspellings thereof.\n    </p>\n    <p>\n      Questions about the Terms of Service should be sent to{' '}\n      <a href=\"mailto:support@shopify.com\">support@shopify.com</a>.\n    </p>\n    <p>\n      You understand that your Materials (not including credit card\n      information), may be transferred unencrypted and involve (a) transmissions\n      over various networks; and (b) changes to conform and adapt to technical\n      requirements of connecting networks or devices. Credit Card information is\n      always encrypted during transfer over networks.\n    </p>\n    <p>\n      You acknowledge and agree that your use of the Service, including\n      information transmitted to or stored by Shopify, is governed by its\n      privacy policy at{' '}\n      <a href=\"https://www.shopify.com/legal/privacy\">\n        https://www.shopify.com/legal/privacy\n      </a>\n    </p>\n    <p>\n      The Terms of Service may be available in languages other than English. To\n      the extent of any inconsistencies or conflicts between these English Terms\n      of Service and Shopify’s Terms of Service available in another language,\n      the most current English version of the Terms of Service at{' '}\n      <a href=\"https://www.shopify.com/legal/terms\">\n        https://www.shopify.com/legal/terms\n      </a>{' '}\n      will prevail.\n    </p>\n    <p>Which means</p>\n    <p>\n      The Shopify service belongs to us. You are not allowed to rip it off or\n      use it for any illegal or sketchy purpose.\n    </p>\n\n    <p>\n      If a dispute arises the issue will be dealt with in the Province of\n      Ontario.\n    </p>\n\n    <p>\n      Your Materials may be transferred unencrypted and may be altered, but\n      credit card information is always encrypted.\n    </p>\n  </Scrollable>\n</Card>",
    "description": "Use when you need to programmatically scroll a child component into view in the scrollable container."
  },
  "DefaultSelect": {
    "prefix": [
      "PEDefaultSelect"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Select} from '../src';\n\nexport function SelectExample() {\n  const [selected, setSelected] = useState('today');\n\n  const handleSelectChange = useCallback((value) => setSelected(value), []);\n\n  const options = [\n    {label: 'Today', value: 'today'},\n    {label: 'Yesterday', value: 'yesterday'},\n    {label: 'Last 7 days', value: 'lastWeek'},\n  ];\n\n  return (\n    <Select\n      label=\"Date range\"\n      options={options}\n      onChange={handleSelectChange}\n      value={selected}\n    />\n  );\n}",
    "description": "<!-- content-for: web -->\n\nPresents a classic dropdown menu or equivalent picker as determined by merchants’ browsers."
  },
  "SelectWithInlineLabel": {
    "prefix": [
      "PESelectWithInlineLabel"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Select} from '../src';\n\nexport function InlineLabelExample() {\n  const [selected, setSelected] = useState('newestUpdate');\n\n  const handleSelectChange = useCallback((value) => setSelected(value), []);\n\n  const options = [\n    {label: 'Newest update', value: 'newestUpdate'},\n    {label: 'Oldest update', value: 'oldestUpdate'},\n    {label: 'Most spent', value: 'mostSpent'},\n    {label: 'Most orders', value: 'mostOrders'},\n    {label: 'Last name A–Z', value: 'lastNameAlpha'},\n    {label: 'Last name Z–A', value: 'lastNameReverseAlpha'},\n  ];\n\n  return (\n    <Select\n      label=\"Sort by\"\n      labelInline\n      options={options}\n      onChange={handleSelectChange}\n      value={selected}\n    />\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse only for cases where the select must fit on a single line, such as in a toolbar."
  },
  "DisabledSelect": {
    "prefix": [
      "PEDisabledSelect"
    ],
    "body": "import React from 'react';\nimport {Select} from '../src';\n\nexport function Playground() {\n  return (\n    <Select\n  label=\"Date range\"\n  disabled\n  options={[\n    {label: 'Today', value: 'today'},\n    {label: 'Yesterday', value: 'yesterday'},\n    {label: 'Last 7 days', value: 'lastWeek'},\n  ]}\n/>\n  );\n}",
    "description": "Use for selections that aren’t currently available. The surrounding interface should make it clear why the select box is disabled and how to activate it."
  },
  "SelectWithValidationError": {
    "prefix": [
      "PESelectWithValidationError"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Select} from '../src';\n\nexport function ValidationErrorExample() {\n  const [selected, setSelected] = useState('');\n\n  const handleSelectChange = useCallback((value) => setSelected(value), []);\n\n  return (\n    <Select\n      label=\"Province\"\n      options={['Alberta']}\n      value={selected}\n      onChange={handleSelectChange}\n      error=\"Province is required\"\n    />\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse to let merchants know if there’s a problem with their selection. For selects, a selection is typically invalid only when using a placeholder option (“Select”) and no other selection has been made."
  },
  "SelectWithSeparateValidationError": {
    "prefix": [
      "PESelectWithSeparateValidationError"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Stack, FormLayout, TextField, Select, InlineError, Card, TextStyle, Link} from '../src';\n\nexport function SeparateValidationErrorExample() {\n  const [weight, setWeight] = useState('12');\n  const [unit, setUnit] = useState('');\n\n  const handleWeightChange = useCallback((value) => setWeight(value), []);\n  const handleUnitChange = useCallback((value) => setUnit(value), []);\n\n  const unitSelectID = 'unit';\n  const errorMessage = generateErrorMessage();\n  const formGroupMarkup = (\n    <Stack vertical spacing=\"extraTight\">\n      <FormLayout>\n        <FormLayout.Group condensed>\n          <TextField\n            label=\"Product weight\"\n            type=\"number\"\n            value={weight}\n            onChange={handleWeightChange}\n            error={Boolean(!weight && unit)}\n          />\n          <Select\n            id={unitSelectID}\n            label=\"Unit of measure\"\n            placeholder=\"Select\"\n            options={['oz', 'g', 'kg', 'lb']}\n            value={unit}\n            onChange={handleUnitChange}\n            error={Boolean(!unit && weight)}\n          />\n        </FormLayout.Group>\n      </FormLayout>\n      <InlineError message={errorMessage} fieldID={unitSelectID} />\n    </Stack>\n  );\n\n  return <Card sectioned>{formGroupMarkup}</Card>;\n\n  function generateErrorMessage() {\n    const weightError =\n      !weight && unit ? 'The numeric weight of the product ' : '';\n    const unitError =\n      !unit && weight ? 'The unit of measure for the product weight' : '';\n\n    if (!weightError && !unitError) {\n      return '';\n    }\n\n    return (\n      <span>\n        <TextStyle variation=\"negative\">\n          <p>\n            {`${weightError}${unitError} is required when weight based shipping rates are enabled. `}\n            <Link>Manage shipping</Link>\n          </p>\n        </TextStyle>\n      </span>\n    );\n  }\n}",
    "description": "<!-- example-for: web -->\n\nUse to let merchants know when their select input is invalid in the context of a group of form inputs that the select depends on.\n\nWhen the `error` prop has a boolean value of `true`, the select component indicates to merchants that their input is invalid without rendering an error message directly below it. It anticipates that an inline error component exists separately within the form.\n\nTo render an invalid select and its validation error separately:\n\n- Set a unique identifier to the select component `id` prop\n- Set a boolean to the select component `error` prop\n- Use an [inline error component](https://polaris.shopify.com/components/forms/inline-error) to describe the invalid select input and set its `fieldID` prop to the same unique identifier used for the text field `id`"
  },
  "DefaultSettingToggle": {
    "prefix": [
      "PEDefaultSettingToggle"
    ],
    "body": "import React from 'react';\nimport {SettingToggle, TextStyle} from '../src';\n\nexport function Playground() {\n  return (\n    class SettingToggleExample extends React.Component {\n  state = {\n    enabled: false,\n  };\n\n  render() {\n    const {enabled} = this.state;\n    const contentStatus = enabled ? 'Disable' : 'Enable';\n    const textStatus = enabled ? 'enabled' : 'disabled';\n\n    return (\n      <SettingToggle\n        action={{\n          content: contentStatus,\n          onAction: this.handleChange,\n        }}\n        enabled={enabled}\n      >\n        This setting is <TextStyle variation=\"strong\">{textStatus}</TextStyle>.\n      </SettingToggle>\n    );\n  }\n\n  handleChange = () => {\n    this.setState(({enabled}) => {\n      return {enabled: !enabled};\n    });\n  };\n}\n  );\n}",
    "description": "Use on settings pages to allow merchants to toggle a setting that has an enabled or a disabled state."
  },
  "BasicSheet": {
    "prefix": [
      "PEBasicSheet"
    ],
    "body": "import React from 'react';\nimport {List, Button, AppProvider, Frame, TopBar, Page, Card, FormLayout, TextField, Sheet, Heading, Scrollable, ChoiceList} from '../src';\n\nexport function Playground() {\n  return (\n    class SheetExample extends React.Component {\n  state = {\n    sheetActive: true,\n    title: 'Big yellow socks',\n    description:\n      \"They're big, yellow socks. What more could you possibly want from socks? These socks will change your life.\\n\\nThey're made from light, hand-loomed cotton that's so soft, you'll feel like you are walking on a cloud.\",\n    salesChannels: [\n      {value: 'onlineStore', label: 'Online Store'},\n      {value: 'facebook', label: 'Facebook'},\n      {value: 'googleShopping', label: 'Google shopping'},\n      {value: 'facebookMarketing', label: 'Facebook Marketing'},\n    ],\n    selected: [],\n  };\n\n  render() {\n    const {\n      state: {sheetActive, title, description, salesChannels, selected},\n      handleCloseSheet,\n      handleOpenSheet,\n      handleChange,\n      handleToggleSheet,\n      hasSelectedSalesChannels,\n      selectedSalesChannels,\n    } = this;\n\n    const theme = {\n      colors: {\n        topBar: {\n          background: '#357997',\n        },\n      },\n      logo: {\n        width: 124,\n        topBarSource:\n          'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999',\n        contextualSaveBarSource:\n          'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999',\n        url: 'http://jadedpixel.com',\n        accessibilityLabel: 'Jaded Pixel',\n      },\n    };\n\n    const salesChannelsCardMarkup = hasSelectedSalesChannels ? (\n      <List>\n        {selectedSalesChannels.map((channel, index) => (\n          <List.Item key={index}>{channel}</List.Item>\n        ))}\n      </List>\n    ) : (\n      <div\n        style={{\n          alignItems: 'center',\n          display: 'flex',\n          justifyContent: 'space-between',\n          width: '100%',\n        }}\n      >\n        <p>No sales channels selected</p>\n        <Button onClick={handleToggleSheet}>Manage sales channels</Button>\n      </div>\n    );\n\n    const salesChannelAction = hasSelectedSalesChannels\n      ? [\n          {\n            onAction: handleOpenSheet,\n            content: 'Manage sales channels',\n          },\n        ]\n      : null;\n\n    return (\n      <div style={{maxHeight: '640px', overflow: 'visible'}}>\n        <AppProvider\n          theme={theme}\n          i18n={{\n            Polaris: {\n              Frame: {\n                skipToContent: 'Skip to content',\n              },\n              TextField: {\n                characterCount: '{count} characters',\n              },\n            },\n          }}\n        >\n          <Frame topBar={<TopBar />}>\n            <Page narrowWidth title=\"Big yellow socks\">\n              <Card sectioned>\n                <FormLayout>\n                  <TextField\n                    label=\"Title\"\n                    onChange={handleChange('title')}\n                    value={title}\n                    readOnly\n                  />\n                  <TextField\n                    label=\"Description\"\n                    onChange={handleChange('description')}\n                    value={description}\n                    multiline\n                  />\n                </FormLayout>\n              </Card>\n              <Card\n                sectioned\n                subdued\n                title=\"Product availability\"\n                actions={salesChannelAction}\n              >\n                {salesChannelsCardMarkup}\n              </Card>\n              <Sheet open={sheetActive} onClose={handleCloseSheet}>\n                <div\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    height: '100%',\n                  }}\n                >\n                  <div\n                    style={{\n                      alignItems: 'center',\n                      borderBottom: '1px solid #DFE3E8',\n                      display: 'flex',\n                      justifyContent: 'space-between',\n                      padding: '1.6rem',\n                      width: '100%',\n                    }}\n                  >\n                    <Heading>Manage sales channels</Heading>\n                    <Button\n                      accessibilityLabel=\"Cancel\"\n                      icon={MobileCancelMajorMonotone}\n                      onClick={handleCloseSheet}\n                      plain\n                    />\n                  </div>\n                  <Scrollable style={{padding: '1.6rem', height: '100%'}}>\n                    <ChoiceList\n                      title=\"Select a sales channel\"\n                      name=\"salesChannelsList\"\n                      choices={salesChannels}\n                      selected={selected}\n                      titleHidden\n                      allowMultiple\n                      onChange={handleChange('selected')}\n                    />\n                  </Scrollable>\n                  <div\n                    style={{\n                      alignItems: 'center',\n                      borderTop: '1px solid #DFE3E8',\n                      display: 'flex',\n                      justifyContent: 'space-between',\n                      padding: '1.6rem',\n                      width: '100%',\n                    }}\n                  >\n                    <Button onClick={handleCloseSheet}>Cancel</Button>\n                    <Button primary onClick={handleCloseSheet}>\n                      Done\n                    </Button>\n                  </div>\n                </div>\n              </Sheet>\n            </Page>\n          </Frame>\n        </AppProvider>\n      </div>\n    );\n  }\n\n  handleOpenSheet = () => {\n    this.setState({sheetActive: true});\n  };\n\n  handleCloseSheet = () => {\n    this.setState({sheetActive: false});\n  };\n\n  handleToggleSheet = () => {\n    const {\n      state: {sheetActive},\n      handleCloseSheet,\n      handleOpenSheet,\n    } = this;\n\n    sheetActive ? handleCloseSheet() : handleOpenSheet();\n  };\n\n  handleChange = (field) => {\n    return (value) => this.setState({[field]: value});\n  };\n\n  get hasSelectedSalesChannels() {\n    return this.selectedSalesChannels.length > 0;\n  }\n\n  get selectedSalesChannels() {\n    const {salesChannels, selected} = this.state;\n\n    return selected.map((key) => {\n      return salesChannels.reduce((accumulator, current) => {\n        accumulator[current.value] = current.label;\n        return accumulator;\n      }, {})[key];\n    });\n  }\n}\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse as the default option for a sheet."
  },
  "DefaultParagraph": {
    "prefix": [
      "PEDefaultParagraph"
    ],
    "body": "import React from 'react';\nimport {SkeletonBodyText} from '../src';\n\nexport function Playground() {\n  return (\n    <SkeletonBodyText />\n  );\n}",
    "description": "Use this component to represent a block of content being loaded. For example, you could use it to represent an entire product description card on the product page."
  },
  "SingleLineContent": {
    "prefix": [
      "PESingleLineContent"
    ],
    "body": "import React from 'react';\nimport {SkeletonBodyText} from '../src';\n\nexport function Playground() {\n  return (\n    <SkeletonBodyText lines={1} />\n  );\n}",
    "description": "Use this component to represent a short, single line of text, like a timestamp."
  },
  "MediumAndLargeDisplayText": {
    "prefix": [
      "PEMediumAndLargeDisplayText"
    ],
    "body": "import React from 'react';\nimport {SkeletonDisplayText} from '../src';\n\nexport function Playground() {\n  return (\n    <SkeletonDisplayText size=\"medium\" />\n  );\n}",
    "description": "Use this component to represent medium and large display text such as large metrics on the reports list page, or for page titles."
  },
  "ExtraLargeDisplayText": {
    "prefix": [
      "PEExtraLargeDisplayText"
    ],
    "body": "import React from 'react';\nimport {SkeletonDisplayText} from '../src';\n\nexport function Playground() {\n  return (\n    <SkeletonDisplayText size=\"extraLarge\" />\n  );\n}",
    "description": "Use this component to represent extra large display text."
  },
  "SmallDisplayText": {
    "prefix": [
      "PESmallDisplayText"
    ],
    "body": "import React from 'react';\nimport {SkeletonDisplayText} from '../src';\n\nexport function Playground() {\n  return (\n    <SkeletonDisplayText size=\"small\" />\n  );\n}",
    "description": "Use this component to represent small display text such as content headings."
  },
  "PageWithDynamicContent": {
    "prefix": [
      "PEPageWithDynamicContent"
    ],
    "body": "import React from 'react';\nimport {SkeletonPage, Layout, Card, SkeletonBodyText, TextContainer, SkeletonDisplayText} from '../src';\n\nexport function Playground() {\n  return (\n    <SkeletonPage primaryAction secondaryActions={2}>\n  <Layout>\n    <Layout.Section>\n      <Card sectioned>\n        <SkeletonBodyText />\n      </Card>\n      <Card sectioned>\n        <TextContainer>\n          <SkeletonDisplayText size=\"small\" />\n          <SkeletonBodyText />\n        </TextContainer>\n      </Card>\n      <Card sectioned>\n        <TextContainer>\n          <SkeletonDisplayText size=\"small\" />\n          <SkeletonBodyText />\n        </TextContainer>\n      </Card>\n    </Layout.Section>\n    <Layout.Section secondary>\n      <Card>\n        <Card.Section>\n          <TextContainer>\n            <SkeletonDisplayText size=\"small\" />\n            <SkeletonBodyText lines={2} />\n          </TextContainer>\n        </Card.Section>\n        <Card.Section>\n          <SkeletonBodyText lines={1} />\n        </Card.Section>\n      </Card>\n      <Card subdued>\n        <Card.Section>\n          <TextContainer>\n            <SkeletonDisplayText size=\"small\" />\n            <SkeletonBodyText lines={2} />\n          </TextContainer>\n        </Card.Section>\n        <Card.Section>\n          <SkeletonBodyText lines={2} />\n        </Card.Section>\n      </Card>\n    </Layout.Section>\n  </Layout>\n</SkeletonPage>\n  );\n}",
    "description": "Use this component to compose a loading version of a page where the page title and header content are dynamic, meaning, the content changes."
  },
  "PageWithStaticContent": {
    "prefix": [
      "PEPageWithStaticContent"
    ],
    "body": "import React from 'react';\nimport {SkeletonPage, Layout, Card, SkeletonBodyText} from '../src';\n\nexport function Playground() {\n  return (\n    <SkeletonPage title=\"Products\" primaryAction secondaryActions={2}>\n  <Layout>\n    <Layout.Section>\n      <Card sectioned>\n        <SkeletonBodyText />\n      </Card>\n      <Card sectioned title=\"Images\">\n        <SkeletonBodyText />\n      </Card>\n      <Card sectioned title=\"Variants\">\n        <SkeletonBodyText />\n      </Card>\n    </Layout.Section>\n    <Layout.Section secondary>\n      <Card title=\"Sales channels\">\n        <Card.Section>\n          <SkeletonBodyText lines={2} />\n        </Card.Section>\n        <Card.Section>\n          <SkeletonBodyText lines={1} />\n        </Card.Section>\n      </Card>\n      <Card title=\"Organization\" subdued>\n        <Card.Section>\n          <SkeletonBodyText lines={2} />\n        </Card.Section>\n        <Card.Section>\n          <SkeletonBodyText lines={2} />\n        </Card.Section>\n      </Card>\n    </Layout.Section>\n  </Layout>\n</SkeletonPage>\n  );\n}",
    "description": "Use this component to compose a loading version of a page where the page title and header content are known and stay the same."
  },
  "MediumThumbnail": {
    "prefix": [
      "PEMediumThumbnail"
    ],
    "body": "import React from 'react';\nimport {SkeletonThumbnail} from '../src';\n\nexport function Playground() {\n  return (\n    <SkeletonThumbnail size=\"medium\" />\n  );\n}",
    "description": "Use this component to represent medium thumbnails."
  },
  "LargeThumbnail": {
    "prefix": [
      "PELargeThumbnail"
    ],
    "body": "import React from 'react';\nimport {Thumbnail} from '../src';\n\nexport function Playground() {\n  return (\n    <Thumbnail\n  source=\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\"\n  size=\"large\"\n  alt=\"Black choker necklace\"\n/>\n  );\n}",
    "description": "Use when a thumbnail is a major focal point. Avoid this size in lists of like items."
  },
  "SmallThumbnail": {
    "prefix": [
      "PESmallThumbnail"
    ],
    "body": "import React from 'react';\nimport {Thumbnail} from '../src';\n\nexport function Playground() {\n  return (\n    <Thumbnail\n  source=\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\"\n  size=\"small\"\n  alt=\"Black choker necklace\"\n/>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when the default size is too large for the layout, or when the thumbnail has less importance."
  },
  "DefaultSpinner": {
    "prefix": [
      "PEDefaultSpinner"
    ],
    "body": "import React from 'react';\nimport {Spinner} from '../src';\n\nexport function Playground() {\n  return (\n    <Spinner size=\"large\" color=\"teal\" />\n  );\n}",
    "description": "Use to notify merchants that their requested action is being processed."
  },
  "SmallSpinner": {
    "prefix": [
      "PESmallSpinner"
    ],
    "body": "import React from 'react';\nimport {Spinner} from '../src';\n\nexport function Playground() {\n  return (\n    <Spinner size=\"small\" color=\"teal\" />\n  );\n}",
    "description": "<!-- example-for: web -->\n\nSmaller than the default spinner."
  },
  "DefaultBehavior": {
    "prefix": [
      "PEDefaultBehavior"
    ],
    "body": "import React from 'react';\nimport {Stack, Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Stack>\n  <Badge>Paid</Badge>\n  <Badge>Processing</Badge>\n  <Badge>Fulfilled</Badge>\n  <Badge>Completed</Badge>\n</Stack>\n  );\n}",
    "description": "Use to quickly lay out a horizontal row of components and maintain their relative sizes. On small screens, children rows wrap down to additional rows as needed."
  },
  "Non-wrappingStacks": {
    "prefix": [
      "PENon-wrappingStacks"
    ],
    "body": "import React from 'react';\nimport {Stack, Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Stack wrap={false}>\n  <Badge>Paid</Badge>\n  <Badge>Processing</Badge>\n  <Badge>Fulfilled</Badge>\n  <Badge>Completed</Badge>\n</Stack>\n  );\n}",
    "description": "Use to create a stack where the children will not wrap to new rows on small screens. As noted above, the wrap option defaults to true. This means you must explitly set it to false to turn it off."
  },
  "SpacingOptions": {
    "prefix": [
      "PESpacingOptions"
    ],
    "body": "import React from 'react';\nimport {Stack, Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Stack spacing=\"loose\">\n  <Badge>Paid</Badge>\n  <Badge>Fulfilled</Badge>\n</Stack>\n  );\n}",
    "description": "Use to control spacing of items in a stack in standard increments. Use tight for less spacing, loose for more spacing, or none to remove normal spacing altogether."
  },
  "VerticalCenteringWithAStack": {
    "prefix": [
      "PEVerticalCenteringWithAStack"
    ],
    "body": "import React from 'react';\nimport {Stack, Heading, Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Stack alignment=\"center\">\n  <Heading>\n    Order\n    <br />\n    #1136\n    <br />\n    was paid\n  </Heading>\n  <Badge>Paid</Badge>\n  <Badge>Fulfilled</Badge>\n</Stack>\n  );\n}",
    "description": "Use to vertically center a set of items that have different heights."
  },
  "FillAvailableSpaceProportionally": {
    "prefix": [
      "PEFillAvailableSpaceProportionally"
    ],
    "body": "import React from 'react';\nimport {Stack, Heading, Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Stack distribution=\"fill\">\n  <Heading>Order #1136</Heading>\n  <Badge>Paid</Badge>\n  <Badge>Fulfilled</Badge>\n</Stack>\n  );\n}",
    "description": "Use to have the stack’s items fill the horizontal space in the container but maintain their relative proportions."
  },
  "StackWhereItemsFillSpaceEvenly": {
    "prefix": [
      "PEStackWhereItemsFillSpaceEvenly"
    ],
    "body": "import React from 'react';\nimport {Stack, Heading, Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Stack distribution=\"fillEvenly\">\n  <Heading>Order #1136</Heading>\n  <Badge>Paid</Badge>\n  <Badge>Fulfilled</Badge>\n</Stack>\n  );\n}",
    "description": "Use to have the stack’s items fill the horizontal space in the container and be equal widths, regardless of their content."
  },
  "StackWhereASingleItemFillsTheRemainingSpace": {
    "prefix": [
      "PEStackWhereASingleItemFillsTheRemainingSpace"
    ],
    "body": "import React from 'react';\nimport {Stack, Heading, Badge} from '../src';\n\nexport function Playground() {\n  return (\n    <Stack>\n  <Stack.Item fill>\n    <Heading>Order #1136</Heading>\n  </Stack.Item>\n  <Stack.Item>\n    <Badge>Paid</Badge>\n  </Stack.Item>\n  <Stack.Item>\n    <Badge>Fulfilled</Badge>\n  </Stack.Item>\n</Stack>\n  );\n}",
    "description": "Use for aligning buttons or secondary content to the right edge of another element, allowing it to wrap below on small screens."
  },
  "SubheadingInACard": {
    "prefix": [
      "PESubheadingInACard"
    ],
    "body": "import React from 'react';\nimport {Subheading} from '../src';\n\nexport function Playground() {\n  return (\n    <Subheading>Accounts</Subheading>\n  );\n}",
    "description": "Use to structure content in a card."
  },
  "DefaultTag": {
    "prefix": [
      "PEDefaultTag"
    ],
    "body": "import React from 'react';\nimport {Tag} from '../src';\n\nexport function Playground() {\n  return (\n    <Tag>Wholesale</Tag>\n  );\n}",
    "description": "Use to allow merchants to add attributes to, and remove attributes from, an object."
  },
  "DefaultTextContainer": {
    "prefix": [
      "PEDefaultTextContainer"
    ],
    "body": "import React from 'react';\nimport {TextContainer, Heading} from '../src';\n\nexport function Playground() {\n  return (\n    <TextContainer>\n  <Heading>Install the Shopify POS App</Heading>\n  <p>\n    Shopify POS is the easiest way to sell your products in person. Available\n    for iPad, iPhone, and Android.\n  </p>\n</TextContainer>\n  );\n}",
    "description": "Use this component for default vertical spacing."
  },
  "TightTextContainer": {
    "prefix": [
      "PETightTextContainer"
    ],
    "body": "import React from 'react';\nimport {TextContainer, Heading} from '../src';\n\nexport function Playground() {\n  return (\n    <TextContainer spacing=\"tight\">\n  <Heading>Install the Shopify POS App</Heading>\n  <p>\n    Shopify POS is the easiest way to sell your products in person. Available\n    for iPad, iPhone, and Android.\n  </p>\n</TextContainer>\n  );\n}",
    "description": "Use the tight spacing option to relate content topics to each other."
  },
  "LooseTextContainer": {
    "prefix": [
      "PELooseTextContainer"
    ],
    "body": "import React from 'react';\nimport {TextContainer} from '../src';\n\nexport function Playground() {\n  return (\n    <TextContainer spacing=\"loose\">\n  <p>\n    Manage your Shopify store on-the-go with real-time notifications, access to\n    your dashboard, and order management, all from your smartphone.\n  </p>\n  <p>\n    Shopify POS is the fastest and easiest way to start accepting Visa,\n    Mastercard, American Express, and Discover right from your smartphone or\n    tablet.\n  </p>\n</TextContainer>\n  );\n}",
    "description": "Use the loose spacing option to separate concepts that are independent of each other."
  },
  "DefaultTextField": {
    "prefix": [
      "PEDefaultTextField"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TextField} from '../src';\n\nexport function TextFieldExample() {\n  const [value, setValue] = useState('Jaded Pixel');\n\n  const handleChange = useCallback((newValue) => setValue(newValue), []);\n\n  return <TextField label=\"Store name\" value={value} onChange={handleChange} />;\n}",
    "description": "Use to allow merchants to provide text input when the expected input is short. For longer input, use the auto grow or multiline options."
  },
  "NumberField": {
    "prefix": [
      "PENumberField"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TextField} from '../src';\n\nexport function NumberFieldExample() {\n  const [value, setValue] = useState('1');\n\n  const handleChange = useCallback((newValue) => setValue(newValue), []);\n\n  return (\n    <TextField\n      label=\"Quantity\"\n      type=\"number\"\n      value={value}\n      onChange={handleChange}\n    />\n  );\n}",
    "description": "Use when input text should be a number."
  },
  "EmailField": {
    "prefix": [
      "PEEmailField"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TextField} from '../src';\n\nexport function EmailFieldExample() {\n  const [value, setValue] = useState('bernadette.lapresse@jadedpixel.com');\n\n  const handleChange = useCallback((newValue) => setValue(newValue), []);\n\n  return (\n    <TextField\n      label=\"Email\"\n      type=\"email\"\n      value={value}\n      onChange={handleChange}\n    />\n  );\n}",
    "description": "Use when the text input should be an email address."
  },
  "MultilineTextField": {
    "prefix": [
      "PEMultilineTextField"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TextField} from '../src';\n\nexport function MultilineFieldExample() {\n  const [value, setValue] = useState('1776 Barnes Street\\nOrlando, FL 32801');\n\n  const handleChange = useCallback((newValue) => setValue(newValue), []);\n\n  return (\n    <TextField\n      label=\"Shipping address\"\n      value={value}\n      onChange={handleChange}\n      multiline\n    />\n  );\n}",
    "description": "Use when the expected input could be more than one line. The field will automatically grow to accommodate additional text."
  },
  "TextFieldWithHiddenLabel": {
    "prefix": [
      "PETextFieldWithHiddenLabel"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {FormLayout, ChoiceList, TextField, Select} from '../src';\n\nexport function HiddenLabelExample() {\n  const [value, setValue] = useState('12');\n  const [selected, setSelected] = useState('yes');\n\n  const handleTextChange = useCallback((newValue) => setValue(newValue), []);\n\n  const handleChoiceChange = useCallback(\n    (selections) => setSelected(selections[0]),\n    [],\n  );\n\n  return (\n    <FormLayout>\n      <ChoiceList\n        title=\"Gift card auto-expiration\"\n        choices={[\n          {label: 'Gift cards never expire', value: 'no'},\n          {label: 'Gift cards expire', value: 'yes'},\n        ]}\n        selected={[selected]}\n        onChange={handleChoiceChange}\n      />\n      <TextField\n        label=\"Gift cards expire after\"\n        type=\"number\"\n        labelHidden\n        value={value}\n        disabled={selected === 'no'}\n        onChange={handleTextChange}\n        connectedRight={\n          <Select\n            label=\"Unit of time\"\n            labelHidden\n            options={['months after purchase']}\n          />\n        }\n      />\n    </FormLayout>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse to visually hide the label when the text field’s purpose is clear from context. The label will remain available to screen readers. Use this option with care. In almost all cases, show the label."
  },
  "TextFieldWithLabelAction": {
    "prefix": [
      "PETextFieldWithLabelAction"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TextField} from '../src';\n\nexport function LabelActionExample() {\n  const [textFieldValue, setTextFieldValue] = useState('6201.11.0000');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Tariff code\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      labelAction={{content: 'Look up codes'}}\n    />\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when an optional, secondary action is closely associated with a text field. For example, on a field for entering a customs tariff code, a label action might be to look up the appropriate code from a table."
  },
  "TextFieldWithRightAlignedText": {
    "prefix": [
      "PETextFieldWithRightAlignedText"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Stack, TextField} from '../src';\n\nexport function RightAlignExample() {\n  const [textFieldValue, setTextFieldValue] = useState('1');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <Stack>\n      <Stack.Item fill>Price</Stack.Item>\n      <TextField\n        label=\"Price\"\n        labelHidden\n        value={textFieldValue}\n        onChange={handleTextFieldChange}\n        align=\"right\"\n      />\n    </Stack>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when input text should be aligned right."
  },
  "TextFieldWithPlaceholderText": {
    "prefix": [
      "PETextFieldWithPlaceholderText"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TextField} from '../src';\n\nexport function PlaceholderExample() {\n  const [textFieldValue, setTextFieldValue] = useState('');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Shipping zone name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      placeholder=\"Example: North America, Europe\"\n    />\n  );\n}",
    "description": "Use to provide a short, non-essential hint about the expected input. Placeholder text is low-contrast, so don’t rely on it for important information."
  },
  "TextFieldWithHelpText": {
    "prefix": [
      "PETextFieldWithHelpText"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TextField} from '../src';\n\nexport function HelpTextExample() {\n  const [textFieldValue, setTextFieldValue] = useState(\n    'bernadette.lapresse@jadedpixel.com',\n  );\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Account email\"\n      type=\"email\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      helpText=\"We’ll use this address if we need to contact you about your account.\"\n    />\n  );\n}",
    "description": "Use to show short instructional content below the text field. Help text works to help merchants understand how to fix errors that result from incorrect formatting (such as dates or passwords with specific character requirements). If more explanation is needed, link to the Shopify Help Center."
  },
  "TextFieldWithPrefixOrSuffix": {
    "prefix": [
      "PETextFieldWithPrefixOrSuffix"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TextField} from '../src';\n\nexport function PrefixExample() {\n  const [textFieldValue, setTextFieldValue] = useState('2.00');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Price\"\n      type=\"number\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      prefix=\"$\"\n    />\n  );\n}",
    "description": "Use as a special form of help text that works best inline.\n\n- Use a prefix for things like currency symbols (“\\$”, “¥”, “£”).\n- Use suffix for things like units of measure (“in”, “cm”)."
  },
  "TextFieldWithConnectedFields": {
    "prefix": [
      "PETextFieldWithConnectedFields"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TextField, Select} from '../src';\n\nexport function ConnectedFieldsExample() {\n  const [textFieldValue, setTextFieldValue] = useState('10.6');\n  const [selectValue, setSelectValue] = useState('kg');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  const handleSelectChange = useCallback((value) => setSelectValue(value), []);\n\n  return (\n    <TextField\n      label=\"Weight\"\n      type=\"number\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      connectedRight={\n        <Select\n          value={selectValue}\n          label=\"Weight unit\"\n          onChange={handleSelectChange}\n          labelHidden\n          options={['kg', 'lb']}\n        />\n      }\n    />\n  );\n}",
    "description": "Use when a text field and several related fields make up a logical unit.\n\n<!-- content-for: web -->\n\nIf inputting weight as a number and a separate unit of measurement, use a text field with a [select dropdown menu](https://polaris.shopify.com/components/forms/select) (for example “kg”, “lb”) as a connected field.\n\n<!-- /content-for -->"
  },
  "TextFieldWithIconAction": {
    "prefix": [
      "PETextFieldWithIconAction"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TextField} from '../src';\n\nexport function ValidationErrorExample() {\n  const [textFieldValue, setTextFieldValue] = useState('');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      error=\"Store name is required\"\n    />\n  );\n}",
    "description": "<!-- example-for: android, ios -->\n\nUse to let merchants take an action within the text field.\n\nFor example, tap on a barcode icon to launch the camera and scan barcode for the barcode field. This helps merchants simplify their input.\n\n<!-- content-for: android -->\n\n![Text field with icon action inside the text field](/public_images/components/TextField/android/accessory@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Text field with icon action inside the text field](/public_images/components/TextField/ios/accessory@2x.png)\n\n<!-- /content-for -->\n\n### Text field with validation error\n\nUse to let merchants know if their input is valid or if there’s an error. Whenever possible, validate input as soon as merchants have finished interacting with a field (but not before). If a field already has an error, validate and remove errors as merchants type so they can immediately see when an error has been fixed."
  },
  "TextFieldWithSeparateValidationError": {
    "prefix": [
      "PETextFieldWithSeparateValidationError"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Stack, Select, TextField, InlineError, Button, Card, FormLayout,  3;} from '../src';\n\nexport function SeparateValidationErrorExample() {\n  const [textFieldValue, setTextFieldValue] = useState('');\n  const [selectTypeValue, setSelectTypeValue] = useState('Product type');\n  const [selectConditionValue, setSelectConditionValue] = useState(\n    'is equal to',\n  );\n\n  const handleTextFieldValueChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  const handleSelectTypeChange = useCallback(\n    (value) => setSelectTypeValue(value),\n    [],\n  );\n\n  const handleSelectConditionChange = useCallback(\n    (value) => setSelectConditionValue(value),\n    [],\n  );\n\n  const textFieldID = 'ruleContent';\n  const isInvalid = isValueInvalid(textFieldValue);\n  const errorMessage = isInvalid\n    ? 'Enter 3 or more characters for product type is equal to'\n    : '';\n\n  const formGroupMarkup = (\n    <Stack wrap={false} alignment=\"leading\" spacing=\"tight\">\n      <Stack.Item fill>\n        <Stack distribution=\"fill\" spacing=\"tight\">\n          <Select\n            labelHidden\n            label=\"Collection rule type\"\n            options={['Product type']}\n            value={selectTypeValue}\n            onChange={handleSelectTypeChange}\n          />\n          <Select\n            labelHidden\n            label=\"Collection rule condition\"\n            options={['is equal to']}\n            value={selectConditionValue}\n            onChange={handleSelectConditionChange}\n          />\n          <TextField\n            labelHidden\n            label=\"Collection rule content\"\n            error={isInvalid}\n            id={textFieldID}\n            value={textFieldValue}\n            onChange={handleTextFieldValueChange}\n          />\n        </Stack>\n        <div style={{marginTop: '4px'}}>\n          <InlineError message={errorMessage} fieldID={textFieldID} />\n        </div>\n      </Stack.Item>\n      <Button icon={DeleteMinor} accessibilityLabel=\"Remove item\" />\n    </Stack>\n  );\n\n  return (\n    <Card sectioned>\n      <FormLayout>{formGroupMarkup}</FormLayout>\n    </Card>\n  );\n\n  function isValueInvalid(content) {\n    if (!content) {\n      return true;\n    }\n\n    return content.length < 3;\n  }\n}",
    "description": "<!-- example-for: web -->\n\nUse to let merchants know when their text field input is invalid in the context of a group of form inputs that the text field depends on.\n\nWhen the `error` prop has a boolean value of `true`, the text field component indicates to merchants that their input is invalid without rendering an error message directly below it. It anticipates that an inline error component exists separately within the form.\n\nTo render an invalid text field and its validation error separately:\n\n- Set a unique identifier on the text field component `id` prop\n- Set a boolean on the text field component `error` prop\n- Use an [inline error component](https://polaris.shopify.com/components/forms/inline-error) to describe the invalid text field input, and set its `fieldID` prop to be the same unique indentifier as the text field component’s `id`"
  },
  "DisabledTextField": {
    "prefix": [
      "PEDisabledTextField"
    ],
    "body": "import React from 'react';\nimport {TextField} from '../src';\n\nexport function Playground() {\n  return (\n    <TextField label=\"Store name\" disabled />\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse to show that a textfield is not available for interaction. Most often used in forms when information is required only in a particular state. For example, the text field next to Other in a choice list when Other is not selected."
  },
  "TextFieldWithCharacterCount": {
    "prefix": [
      "PETextFieldWithCharacterCount"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TextField} from '../src';\n\nexport function TextFieldWithCharacterCountExample() {\n  const [textFieldValue, setTextFieldValue] = useState('Jaded Pixel');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      maxLength={20}\n      showCharacterCount\n    />\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse to display the current number of characters in a text field. Use in conjunction with max length to display the current remaining number of characters in the text field."
  },
  "TextFieldWithClearButton": {
    "prefix": [
      "PETextFieldWithClearButton"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TextField} from '../src';\n\nexport function TextFieldWithClearButtonExample() {\n  const [textFieldValue, setTextFieldValue] = useState('Jaded Pixel');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  const handleClearButtonClick = useCallback(() => setTextFieldValue(''), []);\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      clearButton\n      onClearButtonClick={handleClearButtonClick}\n    />\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse to allow merchants to clear the content from a text field."
  },
  "SubduedTextStyle": {
    "prefix": [
      "PESubduedTextStyle"
    ],
    "body": "import React from 'react';\nimport {TextStyle} from '../src';\n\nexport function Playground() {\n  return (\n    <TextStyle variation=\"subdued\">No supplier listed</TextStyle>\n  );\n}",
    "description": "Use to de-emphasize a piece of text that is less important to merchants than other nearby text. May also be used to indicate when normal content is absent, for example, “No supplier listed”. Don’t use only for aesthetic effect."
  },
  "StrongTextStyle": {
    "prefix": [
      "PEStrongTextStyle"
    ],
    "body": "import React from 'react';\nimport {TextStyle} from '../src';\n\nexport function Playground() {\n  return (\n    <TextStyle variation=\"strong\">Total</TextStyle>\n  );\n}",
    "description": "Use to mark text representing user input, or to emphasize the totals row in a price table."
  },
  "PositiveTextStyle": {
    "prefix": [
      "PEPositiveTextStyle"
    ],
    "body": "import React from 'react';\nimport {TextStyle} from '../src';\n\nexport function Playground() {\n  return (\n    <TextStyle variation=\"positive\">Orders increased</TextStyle>\n  );\n}",
    "description": "Use in combination with a symbol showing an increasing value to indicate an upward trend."
  },
  "NegativeTextStyle": {
    "prefix": [
      "PENegativeTextStyle"
    ],
    "body": "import React from 'react';\nimport {TextStyle} from '../src';\n\nexport function Playground() {\n  return (\n    <TextStyle variation=\"negative\">Orders decreased</TextStyle>\n  );\n}",
    "description": "Use in combination with a symbol showing a decreasing value to indicate a downward trend."
  },
  "CodeTextStyle": {
    "prefix": [
      "PECodeTextStyle"
    ],
    "body": "import React from 'react';\nimport {TextStyle} from '../src';\n\nexport function Playground() {\n  return (\n    <p>\n  New URL that visitors should be forwarded to. If you want your store’s\n  homepage, enter <TextStyle variation=\"code\"> / </TextStyle> (a forward slash).\n</p>\n  );\n}",
    "description": "Use to display inline snippets of code or code-like text."
  },
  "DefaultThumbnail": {
    "prefix": [
      "PEDefaultThumbnail"
    ],
    "body": "import React from 'react';\nimport {Thumbnail} from '../src';\n\nexport function Playground() {\n  return (\n    <Thumbnail\n  source=\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\"\n  alt=\"Black choker necklace\"\n/>\n  );\n}",
    "description": "Use as the default size."
  },
  "BasicToast": {
    "prefix": [
      "PEBasicToast"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Toast, Frame, Page, Button} from '../src';\n\nexport function ToastExample() {\n  const [active, setActive] = useState(false);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const toastMarkup = active ? (\n    <Toast content=\"Message sent\" onDismiss={toggleActive} />\n  ) : null;\n\n  return (\n    <div style={{height: '250px'}}>\n      <Frame>\n        <Page title=\"Toast example\">\n          <Button onClick={toggleActive}>Show Toast</Button>\n          {toastMarkup}\n        </Page>\n      </Frame>\n    </div>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse to convey general confirmation or actions that aren’t critical. For example, you might show a toast message to inform the merchant that their recent action was successful."
  },
  "MultipleToastMessages": {
    "prefix": [
      "PEMultipleToastMessages"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Toast, Frame, Page, ButtonGroup, Button} from '../src';\n\nexport function MultipleToastExample() {\n  const [activeOne, setActiveOne] = useState(false);\n  const [activeTwo, setActiveTwo] = useState(false);\n\n  const toggleActiveOne = useCallback(\n    () => setActiveOne((activeOne) => !activeOne),\n    [],\n  );\n\n  const toggleActiveTwo = useCallback(\n    () => setActiveTwo((activeTwo) => !activeTwo),\n    [],\n  );\n\n  const toastMarkup1 = activeOne ? (\n    <Toast content=\"Message sent\" onDismiss={toggleActiveOne} />\n  ) : null;\n\n  const toastMarkup2 = activeTwo ? (\n    <Toast content=\"Image uploaded\" onDismiss={toggleActiveTwo} />\n  ) : null;\n\n  return (\n    <div style={{height: '250px'}}>\n      <Frame>\n        <Page title=\"Toast example\">\n          <ButtonGroup segmented>\n            <Button onClick={toggleActiveOne}>Show toast 1</Button>\n            <Button onClick={toggleActiveTwo}>Show toast 2</Button>\n          </ButtonGroup>\n          {toastMarkup1}\n          {toastMarkup2}\n        </Page>\n      </Frame>\n    </div>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse multiple toast messages to inform the merchant about distinct actions."
  },
  "ToastWithCustomDuration": {
    "prefix": [
      "PEToastWithCustomDuration"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Toast, Frame, Page, Button} from '../src';\n\nexport function ToastWithCustomDurationExample() {\n  const [active, setActive] = useState(false);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const toastMarkup = active ? (\n    <Toast content=\"Message sent\" onDismiss={toggleActive} duration={4500} />\n  ) : null;\n\n  return (\n    <div style={{height: '250px'}}>\n      <Frame>\n        <Page title=\"Toast example\">\n          <Button onClick={toggleActive}>Show Toast</Button>\n          {toastMarkup}\n        </Page>\n      </Frame>\n    </div>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse to shorten or lengthen the default duration of 5000 miliseconds."
  },
  "ToastWithAction": {
    "prefix": [
      "PEToastWithAction"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Toast, Frame, Page, Button} from '../src';\n\nexport function ToastWithActionExample() {\n  const [active, setActive] = useState(false);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const toastMarkup = active ? (\n    <Toast\n      content=\"Image deleted\"\n      action={{\n        content: 'Undo',\n        onAction: () => {},\n      }}\n      duration={10000}\n      onDismiss={toggleActive}\n    />\n  ) : null;\n\n  return (\n    <div style={{height: '250px'}}>\n      <Frame>\n        <Page title=\"Toast example\">\n          <Button onClick={toggleActive}>Show Toast</Button>\n          {toastMarkup}\n        </Page>\n      </Frame>\n    </div>\n  );\n}",
    "description": "<!-- example-for: web -->\n\nUse when a merchant has the ability to act on the message. For example, to undo a change or retry an action."
  },
  "DefaultToast": {
    "prefix": [
      "PEDefaultToast"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {Toast, Frame, Page, Button} from '../src';\n\nexport function ErrorToastExample() {\n  const [active, setActive] = useState(false);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const toastMarkup = active ? (\n    <Toast content=\"Server error\" error onDismiss={toggleActive} />\n  ) : null;\n\n  return (\n    <div style={{height: '250px'}}>\n      <Frame>\n        <Page title=\"Toast example\">\n          <Button onClick={toggleActive}>Show Toast</Button>\n          {toastMarkup}\n        </Page>\n      </Frame>\n    </div>\n  );\n}",
    "description": "<!-- example-for: android, ios -->\n\nUse default toast for informative and neutral feedback.\n\n<!-- content-for: android -->\n\n![Default toast with neutral color](/public_images/components/Toast/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nOn iOS, icons are available for cases where you want to re-inforce the message.\n\n![Default toast with neutral color](/public_images/components/Toast/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Success toast\n\n<!-- example-for: android, ios -->\n\nUse success toast to indicate that something was successful. For example, a product was successfully updated.\n\n<!-- content-for: android -->\n\n![Success toast](/public_images/components/Toast/android/success@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nOn iOS, icons are available for cases where you want to re-inforce the message.\n\n![Success toast](/public_images/components/Toast/ios/success@2x.png)\n\n<!-- /content-for -->\n\n### Error toast\n\n<!-- example-for: android, ios, web -->\n\nAlthough error toast is still available and used in the system, we discourage its use. Reserve it for errors not caused by merchants, like a connection issue. Error toast should convey what went wrong in plain language and should not go over 3 words. For all other error message types, follow the [error message guidelines](https://polaris.shopify.com/patterns/error-messages).\n\n<!-- content-for: web -->"
  },
  "DefaultTooltip": {
    "prefix": [
      "PEDefaultTooltip"
    ],
    "body": "import React from 'react';\nimport {Tooltip, Link} from '../src';\n\nexport function Playground() {\n  return (\n    <div style={{padding: '75px 0'}}>\n  <Tooltip active content=\"This order has shipping labels.\">\n    <Link>Order #1001</Link>\n  </Tooltip>\n</div>\n  );\n}",
    "description": "Use only when necessary to provide an explanation for an interface element."
  },
  "TopBarWithAllOfItsElements": {
    "prefix": [
      "PETopBarWithAllOfItsElements"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TopBar, Card, ActionList, AppProvider, Frame} from '../src';\n\nexport function TopBarExample() {\n  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);\n  const [isSearchActive, setIsSearchActive] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n\n  const toggleIsUserMenuOpen = useCallback(\n    () => setIsUserMenuOpen((isUserMenuOpen) => !isUserMenuOpen),\n    [],\n  );\n\n  const handleSearchResultsDismiss = useCallback(() => {\n    setIsSearchActive(false);\n    setSearchValue('');\n  }, []);\n\n  const handleSearchChange = useCallback((value) => {\n    setSearchValue(value);\n    setIsSearchActive(value.length > 0);\n  }, []);\n\n  const handleNavigationToggle = useCallback(() => {\n    console.log('toggle navigation visibility');\n  }, []);\n\n  const theme = {\n    colors: {\n      topBar: {\n        background: '#357997',\n      },\n    },\n    logo: {\n      width: 124,\n      topBarSource:\n        'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999',\n      url: 'http://jadedpixel.com',\n      accessibilityLabel: 'Jaded Pixel',\n    },\n  };\n\n  const userMenuMarkup = (\n    <TopBar.UserMenu\n      actions={[\n        {\n          items: [{content: 'Back to Shopify', icon: ArrowLeftMinor}],\n        },\n        {\n          items: [{content: 'Community forums'}],\n        },\n      ]}\n      name=\"Dharma\"\n      detail=\"Jaded Pixel\"\n      initials=\"D\"\n      open={isUserMenuOpen}\n      onToggle={toggleIsUserMenuOpen}\n    />\n  );\n\n  const searchResultsMarkup = (\n    <Card>\n      <ActionList\n        items={[\n          {content: 'Shopify help center'},\n          {content: 'Community forums'},\n        ]}\n      />\n    </Card>\n  );\n\n  const searchFieldMarkup = (\n    <TopBar.SearchField\n      onChange={handleSearchChange}\n      value={searchValue}\n      placeholder=\"Search\"\n    />\n  );\n\n  const topBarMarkup = (\n    <TopBar\n      showNavigationToggle\n      userMenu={userMenuMarkup}\n      searchResultsVisible={isSearchActive}\n      searchField={searchFieldMarkup}\n      searchResults={searchResultsMarkup}\n      onSearchResultsDismiss={handleSearchResultsDismiss}\n      onNavigationToggle={handleNavigationToggle}\n    />\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <AppProvider\n        theme={theme}\n        i18n={{\n          Polaris: {\n            Avatar: {\n              label: 'Avatar',\n              labelWithInitials: 'Avatar with initials {initials}',\n            },\n            Frame: {skipToContent: 'Skip to content'},\n            TopBar: {\n              toggleMenuLabel: 'Toggle menu',\n              SearchField: {\n                clearButtonLabel: 'Clear',\n                search: 'Search',\n              },\n            },\n          },\n        }}\n      >\n        <Frame topBar={topBarMarkup} />\n      </AppProvider>\n    </div>\n  );\n}",
    "description": "Use to provide structure for the top of an application. Style the top bar component using the app provider component with a theme. Providing just the `background` key for the top bar component theme will result in intelligent defaults being set for complementary colors with contrasting text."
  },
  "TopBarThemedWithKeys": {
    "prefix": [
      "PETopBarThemedWithKeys"
    ],
    "body": "import React, {useState, useCallback} from 'react';\nimport {TopBar, Card, ActionList, AppProvider, Frame} from '../src';\n\nexport function TopBarExample() {\n  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);\n  const [isSearchActive, setIsSearchActive] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n\n  const toggleIsUserMenuOpen = useCallback(\n    () => setIsUserMenuOpen((isUserMenuOpen) => !isUserMenuOpen),\n    [],\n  );\n\n  const handleSearchResultsDismiss = useCallback(() => {\n    setIsSearchActive(false);\n    setSearchValue('');\n  }, []);\n\n  const handleSearchChange = useCallback((value) => {\n    setSearchValue(value);\n    setIsSearchActive(value.length > 0);\n  }, []);\n\n  const handleNavigationToggle = useCallback(() => {\n    console.log('toggle navigation visibility');\n  }, []);\n\n  const theme = {\n    colors: {\n      topBar: {\n        background: '#357997',\n        backgroundLighter: '#6192a9',\n        color: '#FFFFFF',\n      },\n    },\n    logo: {\n      width: 124,\n      topBarSource:\n        'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999',\n      url: 'http://jadedpixel.com',\n      accessibilityLabel: 'Jaded Pixel',\n    },\n  };\n\n  const userMenuMarkup = (\n    <TopBar.UserMenu\n      actions={[\n        {\n          items: [{content: 'Back to Shopify', icon: ArrowLeftMinor}],\n        },\n        {\n          items: [{content: 'Community forums'}],\n        },\n      ]}\n      name=\"Dharma\"\n      detail=\"Jaded Pixel\"\n      initials=\"D\"\n      open={isUserMenuOpen}\n      onToggle={toggleIsUserMenuOpen}\n    />\n  );\n\n  const searchResultsMarkup = (\n    <Card>\n      <ActionList\n        items={[\n          {content: 'Shopify help center'},\n          {content: 'Community forums'},\n        ]}\n      />\n    </Card>\n  );\n\n  const searchFieldMarkup = (\n    <TopBar.SearchField\n      onChange={handleSearchChange}\n      value={searchValue}\n      placeholder=\"Search\"\n    />\n  );\n\n  const topBarMarkup = (\n    <TopBar\n      showNavigationToggle\n      userMenu={userMenuMarkup}\n      searchResultsVisible={isSearchActive}\n      searchField={searchFieldMarkup}\n      searchResults={searchResultsMarkup}\n      onSearchResultsDismiss={handleSearchResultsDismiss}\n      onNavigationToggle={handleNavigationToggle}\n    />\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <AppProvider\n        theme={theme}\n        i18n={{\n          Polaris: {\n            Avatar: {\n              label: 'Avatar',\n              labelWithInitials: 'Avatar with initials {initials}',\n            },\n            Frame: {skipToContent: 'Skip to content'},\n            TopBar: {\n              toggleMenuLabel: 'Toggle menu',\n              SearchField: {\n                clearButtonLabel: 'Clear',\n                search: 'Search',\n              },\n            },\n          },\n        }}\n      >\n        <Frame topBar={topBarMarkup} />\n      </AppProvider>\n    </div>\n  );\n}",
    "description": "Provide specific keys and corresponding colors to the top bar theme for finer control. When giving more than just the `background`, providing all keys is necessary to prevent falling back to default colors."
  },
  "VisuallyHiddenHeading": {
    "prefix": [
      "PEVisuallyHiddenHeading"
    ],
    "body": "import React from 'react';\nimport {Card, VisuallyHidden, Heading, FormLayout, TextField} from '../src';\n\nexport function Playground() {\n  return (\n    <Card sectioned>\n  <VisuallyHidden>\n    <Heading>Title and description</Heading>\n  </VisuallyHidden>\n  <FormLayout>\n    <TextField\n      label=\"Title\"\n      value=\"Artisanal Wooden Spoon\"\n      onChange={() => {}}\n    />\n    <TextField label=\"Description\" multiline onChange={() => {}} />\n  </FormLayout>\n</Card>\n  );\n}",
    "description": "Always provide a heading for a major page section such as a card. In rare cases the heading is visually redundant and the meaning is conveyed by context. Rather than omit the heading, wrap the heading in the visually hidden component."
  },
  "VisuallyHiddenTableHeaders": {
    "prefix": [
      "PEVisuallyHiddenTableHeaders"
    ],
    "body": "import React from 'react';\nimport {VisuallyHidden} from '../src';\n\nexport function Playground() {\n  return (\n    <table>\n  <thead>\n    <tr>\n      <th scope=\"col\">\n        <VisuallyHidden>Line item</VisuallyHidden>\n      </th>\n      <th scope=\"col\">\n        <VisuallyHidden>Value</VisuallyHidden>\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Subtotal</th>\n      <td>$184.13</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Tax</th>\n      <td>$0.00</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Total</th>\n      <td>$184.13</td>\n    </tr>\n  </tbody>\n</table>\n  );\n}",
    "description": "Whenever one or more table columns has no need for a visible header, hide the header content rather than omitting it. Note that due to browser quirks the visually hidden component must go inside each `<th>`."
  }
}